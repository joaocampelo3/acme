/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-06-17 16:47:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.services.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import java.util.regex.Pattern;
import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import java.util.HashMap;
import org.wso2.carbon.apimgt.impl.utils.APIUtil;
import java.net.URI;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest;
import java.net.http.HttpClient;
import java.util.Map;
import org.wso2.carbon.apimgt.ui.publisher.Util;

public final class introspect_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/services/login/../constants.jsp", Long.valueOf(1683578756929L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.wso2.carbon.apimgt.impl.utils.APIUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.google.gson.GsonBuilder");
    _jspx_imports_classes.add("java.net.http.HttpRequest");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("java.net.http.HttpClient");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("java.util.regex.Pattern");
    _jspx_imports_classes.add("java.net.URI");
    _jspx_imports_classes.add("org.wso2.carbon.apimgt.ui.publisher.Util");
    _jspx_imports_classes.add("java.net.http.HttpResponse");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    String SETTINGS_REST_API_URL_SUFFIX = "/api/am/publisher/v4/settings";
    String SERVICE_CATALOG_SETTINGS_REST_API_URL_SUFFIX = "/api/am/service-catalog/v1/settings";
    String DCR_URL_SUFFIX = "/client-registration/v0.17/register";
    String AUTHORIZE_ENDPOINT_SUFFIX = "/oauth2/authorize";
    String OIDC_LOGOUT_ENDPOINT_SUFFIX = "/oidc/logout";
    String TOKEN_URL_SUFFIX = "/oauth2/token";
    String REVOKE_URL_SUFFIX = "/oauth2/revoke";
    String LOGIN_CALLBACK_URL_SUFFIX = "/services/auth/callback/login";
    String LOGOUT_CALLBACK_URL_SUFFIX = "/services/auth/callback/logout";
    String PUBLISHER_CLIENT_APP_NAME_OLD = "admin_publisher";
    String PUBLISHER_CLIENT_APP_NAME = "apim_publisher";
    String SUPER_TENANT_DOMAIN = "carbon.super";

    Log log = LogFactory.getLog(this.getClass());
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    Map settings = Util.readJsonFile("/site/public/conf/settings.json", request.getServletContext());
    String userInfoEndpoint = Util.getLoopbackOrigin((String) Util.readJsonObj(settings, "app.origin.host")) + "/oauth2/userinfo";
    String introspectEndpoint = Util.getLoopbackOrigin((String) Util.readJsonObj(settings, "app.origin.host")) + "/oauth2/introspect";
    Cookie[] cookies = request.getCookies();
    String tokenP1 = "";
    String tokenP2 = "";
    for (int i = 0; i < cookies.length; i++) {
        String cookieName = cookies[i].getName();
        if ("WSO2_AM_TOKEN_1_Default".equals(cookieName)) {
            tokenP1 = cookies[i].getValue();
        }
        if ("AM_ACC_TOKEN_DEFAULT_P2".equals(cookieName)) {
            tokenP2 = cookies[i].getValue();
        }
        if (!tokenP1.isEmpty() && !tokenP2.isEmpty()) {
            break;
        }
    }
    String token = tokenP1 + tokenP2;
    HttpClient client = HttpClient.newHttpClient();
    HttpRequest getReq = HttpRequest.newBuilder()
            .uri(URI.create(userInfoEndpoint))
            .header("Authorization", "Basic " + token)
            .build();
    HttpResponse<String> userResult = client.send(getReq, HttpResponse.BodyHandlers.ofString());

    String body = "token=" + token;
    HttpRequest postReq = HttpRequest.newBuilder()
            .uri(URI.create(introspectEndpoint))
            .POST(HttpRequest.BodyPublishers.ofString(body))
            .header("Authorization", "Basic " + APIUtil.getBase64EncodedAdminCredentials())
            .header("Content-Type", "application/x-www-form-urlencoded")
            .build();
    HttpResponse<String> introspectResult = client.send(postReq, HttpResponse.BodyHandlers.ofString());
    log.debug("Introspection result json: " + introspectResult.body());

    if (introspectResult.statusCode() == 200) {
        Map introspect = gson.fromJson(introspectResult.body(), Map.class);
        response.setContentType("application/json");
        out.println(gson.toJson(introspect));
    } else {
        log.warn("Something went wrong while introspecting the token " + tokenP1 + tokenP2);
        log.error(introspectResult.body());
        response.setStatus(500);
        response.setContentType("text/plain");
        out.println("Something went wrong while introspecting the token!!");
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
