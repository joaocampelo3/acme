/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-06-17 16:46:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.Gson;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import org.wso2.carbon.base.ServerConfiguration;
import org.wso2.carbon.identity.captcha.util.CaptchaUtil;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import java.util.Map;
import java.util.HashMap;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import javax.ws.rs.core.Response;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.List;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.PropertyDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.util.regex.Pattern;
import javax.ws.rs.core.Response;
import javax.servlet.http.HttpServletRequest;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.text.StringEscapeUtils;
import java.nio.charset.Charset;
import org.wso2.carbon.base.ServerConfiguration;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import java.io.File;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    private static final String FIDO_AUTHENTICATOR = "FIDOAuthenticator";
    private static final String MAGIC_LINK_AUTHENTICATOR = "MagicLinkAuthenticator";
    private static final String IWA_AUTHENTICATOR = "IwaNTLMAuthenticator";
    private static final String IS_SAAS_APP = "isSaaSApp";
    private static final String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    private static final String IDENTIFIER_EXECUTOR = "IdentifierExecutor";
    private static final String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";
    private static final String JWT_BASIC_AUTHENTICATOR = "JWTBasicAuthenticator";
    private static final String X509_CERTIFICATE_AUTHENTICATOR = "x509CertificateAuthenticator";
    private String reCaptchaAPI = null;
    private String reCaptchaKey = null;


    private static final String JAVAX_SERVLET_FORWARD_REQUEST_URI = "javax.servlet.forward.request_uri";
    private static final String JAVAX_SERVLET_FORWARD_QUERY_STRING = "javax.servlet.forward.query_string";
    private static final String UTF_8 = "UTF-8";
    private static final String TENANT_DOMAIN = "tenant-domain";
    private static final String ACCOUNT_RECOVERY_ENDPOINT = "/accountrecoveryendpoint";
    private static final String ACCOUNT_RECOVERY_ENDPOINT_RECOVER = "/recoveraccountrouter.do";
    private static final String ACCOUNT_RECOVERY_ENDPOINT_REGISTER = "/register.do";


        private String getRecoverAccountUrl(String identityMgtEndpointContext, String urlEncodedURL,
                boolean isUsernameRecovery, String urlParameters) {

            return identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_RECOVER + "?" + urlParameters
                    + "&isUsernameRecovery=" + isUsernameRecovery + "&callback=" + Encode
                    .forHtmlAttribute(urlEncodedURL);
        }

        private String getRecoverAccountUrlWithUsername(String identityMgtEndpointContext, String urlEncodedURL,
                boolean isUsernameRecovery, String urlParameters, String username) {
            if (StringUtils.isNotBlank(username)) {
               urlParameters = urlParameters + "&username=" + Encode.forHtmlAttribute(username);
            }
            return identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_RECOVER + "?" + urlParameters
                    + "&isUsernameRecovery=" + isUsernameRecovery + "&callback=" + Encode
                    .forHtmlAttribute(urlEncodedURL);
        }

        private String getRegistrationUrl(String accountRegistrationEndpointURL, String urlEncodedURL,
                String urlParameters) {
            return accountRegistrationEndpointURL + "?" + urlParameters + "&callback=" + Encode.forHtmlAttribute(urlEncodedURL);
        }
    

        private boolean isIdentifierFirstLogin(String inputType) {
            return "idf".equalsIgnoreCase(inputType);
        }
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(11);
    _jspx_dependants.put("/basicauth.jsp", Long.valueOf(1683578779948L));
    _jspx_dependants.put("/includes/init-url.jsp", Long.valueOf(1683578780736L));
    _jspx_dependants.put("/openid.jsp", Long.valueOf(1683578780008L));
    _jspx_dependants.put("/includes/init-loginform-action-url.jsp", Long.valueOf(1683578780720L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1683578780808L));
    _jspx_dependants.put("/identifierauth.jsp", Long.valueOf(1683578779700L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.5.0.jar", Long.valueOf(1683578787332L));
    _jspx_dependants.put("jar:file:/C:/Program%20Files/WSO2/wso2am-4.2.0/repository/deployment/server/webapps/authenticationendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.5.0.jar!/META-INF/taglib.tld", Long.valueOf(1667234524000L));
    _jspx_dependants.put("/tenantauth.jsp", Long.valueOf(1683578779816L));
    _jspx_dependants.put("/plugins/basicauth-extensions.jsp", Long.valueOf(1683578780448L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1683578780676L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable");
    _jspx_imports_classes.add("org.apache.http.HttpStatus");
    _jspx_imports_classes.add("org.apache.commons.codec.binary.Base64");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.PropertyDTO");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.URLBuilderException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.ServiceURLBuilder");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("javax.ws.rs.core.Response");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL");
    _jspx_imports_classes.add("org.wso2.carbon.identity.captcha.util.CaptchaUtil");
    _jspx_imports_classes.add("java.util.regex.Pattern");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("java.nio.charset.Charset");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.provider.json.JSONProvider");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.WebClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("org.wso2.carbon.base.ServerConfiguration");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.JAXRSClientFactory");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityCoreConstants");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale(), new
            EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    String logincontextURL = "../logincontext";
    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {
        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
        logincontextURL = identityServerEndpointContextParam + "/logincontext";
    }
    
    String tenantDomain;
    String userTenantDomain;
    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();
        userTenantDomain = request.getParameter("ut");
        if (StringUtils.isBlank(userTenantDomain)) {
            userTenantDomain = request.getParameter("t");
        }
        if (StringUtils.isBlank(userTenantDomain)) {
            userTenantDomain = tenantDomain;
        }
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainFromURL = request.getParameter("t");

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }
        userTenantDomain = tenantDomain;
    }

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String layout = "default";

      out.write('\n');
      out.write('\n');
      out.write('\n');

    if (config.getServletContext().getResource("extensions/layouts/custom/body.html") != null) {
        layout = "custom";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String layoutFileRelativePath;
    Map<String, Object> layoutData = new HashMap<String, Object>();

    if (!layout.equals("custom")) {
        if (layout.equals("default")) {
            layoutFileRelativePath = "includes/layouts/" + layout + "/body.html";
        } else {
            layoutFileRelativePath = "extensions/layouts/" + layout + "/body.html";
            if (config.getServletContext().getResource(layoutFileRelativePath) == null) {
                layout = "default";
                layoutFileRelativePath = "includes/layouts/default/body.html";
            }
        }
    } else {
        layoutFileRelativePath = "extensions/layouts/custom/body.html";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    request.getSession().invalidate();
    String queryString = request.getQueryString();
    Map<String, String> idpAuthenticatorMapping = null;
    if (request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP) != null) {
        idpAuthenticatorMapping = (Map<String, String>) request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP);
    }

    String errorMessage = "authentication.failed.please.retry";
    String errorCode = "";
    if(request.getParameter(Constants.ERROR_CODE)!=null){
        errorCode = request.getParameter(Constants.ERROR_CODE) ;
    }
    String loginFailed = "false";

    if (Boolean.parseBoolean(request.getParameter(Constants.AUTH_FAILURE))) {
        loginFailed = "true";
        String error = request.getParameter(Constants.AUTH_FAILURE_MSG);
        // Check the error is not null and whether there is a corresponding value in the resource bundle.
        if (!(StringUtils.isBlank(error)) &&
            !error.equalsIgnoreCase(AuthenticationEndpointUtil.i18n(resourceBundle, error))) {
                errorMessage = error;
        }
    }

      out.write('\n');

    boolean hasLocalLoginOptions = false;
    boolean isBackChannelBasicAuth = false;
    List<String> localAuthenticatorNames = new ArrayList<String>();

    if (idpAuthenticatorMapping != null && idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) {
        String authList = idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME);
        if (authList != null) {
            localAuthenticatorNames = Arrays.asList(authList.split(","));
        }
    }

    String multiOptionURIParam = "";
    if (localAuthenticatorNames.size() > 1 || idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1) {
        String baseURL;
        try {
            baseURL = ServiceURLBuilder.create().addPath(request.getRequestURI()).build().getRelativePublicURL();
        } catch (URLBuilderException e) {
            request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, "internal.error.occurred"));
            request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil.i18n(resourceBundle, "error.when.processing.authentication.request"));
            request.getRequestDispatcher("error.do").forward(request, response);
            return;
        }

        String queryParamString = request.getQueryString() != null ? ("?" + request.getQueryString()) : "";
        multiOptionURIParam = "&multiOptionURI=" + Encode.forUriComponent(baseURL + queryParamString);
    }

      out.write('\n');

    boolean reCaptchaEnabled = false;
    if (request.getParameter("reCaptcha") != null && Boolean.parseBoolean(request.getParameter("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

    boolean reCaptchaResendEnabled = false;
    if (request.getParameter("reCaptchaResend") != null && Boolean.parseBoolean(request.getParameter("reCaptchaResend"))) {
        reCaptchaResendEnabled = true;
    }

    if (reCaptchaEnabled || reCaptchaResendEnabled) {
        reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
        reCaptchaAPI = CaptchaUtil.reCaptchaAPIURL();
    }

      out.write('\n');

    String inputType = request.getParameter("inputType");
    String username = null;
    String usernameIdentifier = null;

    if (isIdentifierFirstLogin(inputType)) {
        String authAPIURL = application.getInitParameter(Constants.AUTHENTICATION_REST_ENDPOINT_URL);
        if (StringUtils.isBlank(authAPIURL)) {
            authAPIURL = IdentityUtil.getServerURL("/api/identity/auth/v1.1/", true, true);
        }
        if (!authAPIURL.endsWith("/")) {
            authAPIURL += "/";
        }
        authAPIURL += "context/" + request.getParameter("sessionDataKey");
        String contextProperties = AuthContextAPIClient.getContextProperties(authAPIURL);
        Gson gson = new Gson();
        Map<String, Object> parameters = gson.fromJson(contextProperties, Map.class);
        if (parameters != null) {
            username = (String) parameters.get("username");
            usernameIdentifier = (String) parameters.get("username");
        } else {
            String redirectURL = "error.do";
            response.sendRedirect(redirectURL);
            return;
        }
    }

    // Login context request url.
    String sessionDataKey = request.getParameter("sessionDataKey");
    String appName = request.getParameter("sp");
    String loginContextRequestUrl = logincontextURL + "?sessionDataKey=" + Encode.forUriComponent(sessionDataKey) + "&application="
            + Encode.forUriComponent(appName);
    if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        // We need to send the tenant domain as a query param only in non tenant qualified URL mode.
        loginContextRequestUrl += "&tenantDomain=" + Encode.forUriComponent(tenantDomain);
    }

    String t = request.getParameter("t");
    String ut = request.getParameter("ut");
    if (StringUtils.isNotBlank(t)) {
        loginContextRequestUrl += "&t=" + t;
    }
    if (StringUtils.isNotBlank(ut)) {
        loginContextRequestUrl += "&ut=" + ut;
    }

    if (StringUtils.isNotBlank(usernameIdentifier)) {
        if (usernameIdentifier.split("@").length == 2) {
            usernameIdentifier = usernameIdentifier.split("@")[0];
        }

        if (usernameIdentifier.split("@").length > 2
            && !StringUtils.equals(usernameIdentifier.split("@")[1], IdentityManagementEndpointConstants.SUPER_TENANT)) {

            usernameIdentifier = usernameIdentifier.split("@")[0] + "@" + usernameIdentifier.split("@")[1];
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    layoutData.put("containerSize", "medium");

      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <!-- header -->\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        if (reCaptchaEnabled || reCaptchaResendEnabled) {
    
      out.write("\n");
      out.write("    <script src=\"");
      out.print(Encode.forHtmlContent(reCaptchaAPI));
      out.write("\"></script>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout authentication-portal-layout\" onload=\"checkSessionKey()\">\n");
      out.write("\n");
      out.write("    ");
 request.setAttribute("pageName", "sign-in"); 
      out.write("\n");
      out.write("    ");
 if (new File(getServletContext().getRealPath("extensions/timeout.jsp")).exists()) { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "util/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      boolean _jspx_th_layout_005fmain_005f0_reused = false;
      try {
        _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
        _jspx_th_layout_005fmain_005f0.setParent(null);
        // /login.jsp(223,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
        // /login.jsp(223,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
        // /login.jsp(223,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setData( layoutData );
        int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
        if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f0_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /login.jsp(224,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
              int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <!-- product-title -->\n");
                  out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
              _jspx_th_layout_005fcomponent_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f0_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f1_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /login.jsp(235,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
              int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <div class=\"ui segment\">\n");
                  out.write("                <h3 class=\"ui header ellipsis\">\n");
                  out.write("                    ");
 if (isIdentifierFirstLogin(inputType)) { 
                  out.write("\n");
                  out.write("                        <div class=\"display-inline\">");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "welcome") + " ");
                  out.write("</div>\n");
                  out.write("                        <div id=\"user-name-label\" class=\"display-inline\" data-position=\"top left\" data-variation=\"inverted\" data-content=\"");
                  out.print(usernameIdentifier);
                  out.write('"');
                  out.write('>');
                  out.print(usernameIdentifier);
                  out.write("</div>\n");
                  out.write("                    ");
 } else { 
                  out.write("\n");
                  out.write("                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
                  out.write("\n");
                  out.write("                    ");
 } 
                  out.write("\n");
                  out.write("                </h3>\n");
                  out.write("\n");
                  out.write("                <div class=\"segment-form\">\n");
                  out.write("                    ");

                        if (localAuthenticatorNames.size() > 0) {
                            if (localAuthenticatorNames.contains(OPEN_ID_AUTHENTICATOR)) {
                                hasLocalLoginOptions = true;
                    
                  out.write("\n");
                  out.write("                        ");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("<form action=\"");
                  out.print(commonauthURL);
                  out.write("\" method=\"post\" id=\"loginForm\" class=\"segment-form\">\n");
                  out.write("    ");

        loginFailed = request.getParameter("loginFailed");
        if (loginFailed != null) {

    
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\">\n");
                  out.write("         ");
                  out.print(AuthenticationEndpointUtil.i18nBase64(resourceBundle,request.getParameter("errorMessage")));
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <input type=\"text\" id=\"claimed_id\" name=\"claimed_id\" size='30'\n");
                  out.write("               placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "openid"));
                  out.write("\"/>\n");
                  out.write("        <input type=\"hidden\" name=\"sessionDataKey\"\n");
                  out.write("               value='");
                  out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui checkbox\">\n");
                  out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
                  out.write("            <label>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
                  out.write("</label>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <div class=\"buttons right aligned\">\n");
                  out.write("        <button\n");
                  out.write("            class=\"ui primary large button\"\n");
                  out.write("            type=\"submit\">\n");
                  out.write("            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
                  out.write("\n");
                  out.write("        </button>\n");
                  out.write("    </div>\n");
                  out.write("</form>\n");
                  out.write("\n");
                  out.write("<script>\n");
                  out.write("\n");
                  out.write("    // Handle form submission preventing double submission.\n");
                  out.write("    $(document).ready(function(){\n");
                  out.write("        $.fn.preventDoubleSubmission = function() {\n");
                  out.write("            $(this).on('submit',function(e){\n");
                  out.write("                var $form = $(this);\n");
                  out.write("                if ($form.data('submitted') === true) {\n");
                  out.write("                    // Previously submitted - don't submit again.\n");
                  out.write("                    e.preventDefault();\n");
                  out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
                  out.write("                } else {\n");
                  out.write("                    // Mark it so that the next submit can be ignored.\n");
                  out.write("                    $form.data('submitted', true);\n");
                  out.write("                }\n");
                  out.write("            });\n");
                  out.write("\n");
                  out.write("            return this;\n");
                  out.write("        };\n");
                  out.write("        $('#loginForm').preventDoubleSubmission();\n");
                  out.write("    });\n");
                  out.write("\n");
                  out.write("</script>\n");
                  out.write("\n");
                  out.write("                    ");

                        } else if (localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) {
                            hasLocalLoginOptions = true;
                    
                  out.write("\n");
                  out.write("                        ");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write('\n');
                  out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

                  out.write('\n');
                  out.write('\n');
                  out.write('\n');

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled;
    String usernameLabel = "username";
    Boolean isMultiAttributeLoginEnabledInTenant;

    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }

    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isMultiAttributeLoginEnabledInTenant = preferenceRetrievalClient.checkMultiAttributeLogin(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", AuthenticationEndpointUtil
                .i18n(resourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    if (isEmailUsernameEnabled == true) {
        usernameLabel = "email.username";
    } else if (isMultiAttributeLoginEnabledInTenant) {
        usernameLabel = "user.identifier";
    }

                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("<script>\n");
                  out.write("    function submitIdentifier (e) {\n");
                  out.write("        e.preventDefault();\n");
                  out.write("        var userName = document.getElementById(\"username\");\n");
                  out.write("        userName.value = userName.value.trim();\n");
                  out.write("\n");
                  out.write("        if (username.value) {\n");
                  out.write("            $.ajax({\n");
                  out.write("                type: \"GET\",\n");
                  out.write("                url: \"");
                  out.print(loginContextRequestUrl);
                  out.write("\",\n");
                  out.write("                xhrFields: { withCredentials: true },\n");
                  out.write("                success: function (data) {\n");
                  out.write("                    if (data && data.status === \"redirect\" && data.redirectUrl && data.redirectUrl.length > 0) {\n");
                  out.write("                        window.location.href = data.redirectUrl;\n");
                  out.write("                    } else {\n");
                  out.write("                        document.getElementById(\"identifierForm\").submit();\n");
                  out.write("                    }\n");
                  out.write("                },\n");
                  out.write("                cache: false\n");
                  out.write("            });\n");
                  out.write("        }\n");
                  out.write("    }\n");
                  out.write("</script>\n");
                  out.write("\n");
                  out.write("<form class=\"ui large form\" action=\"");
                  out.print(loginFormActionURL);
                  out.write("\" method=\"post\" id=\"identifierForm\" onsubmit=\"event.preventDefault()\">\n");
                  out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
                  out.write("\n");
                  out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
                  out.write("    ");

        }
    
                  out.write("\n");
                  out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
                  out.write("        ");
                  out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } else if ((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))) { 
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
                  out.write("        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } else { 
                  out.write("\n");
                  out.write("        <div class=\"ui visible negative message\" style=\"display: none;\" id=\"error-msg\"></div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui fluid left icon input\">\n");
                  out.write("            <input\n");
                  out.write("                type=\"text\"\n");
                  out.write("                id=\"username\"\n");
                  out.write("                value=\"\"\n");
                  out.write("                name=\"username\"\n");
                  out.write("                maxlength=\"50\"\n");
                  out.write("                tabindex=\"0\"\n");
                  out.write("                placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, usernameLabel));
                  out.write("\"\n");
                  out.write("                required />\n");
                  out.write("            <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
                  out.write("        </div>\n");
                  out.write("        <input id=\"authType\" name=\"authType\" type=\"hidden\" value=\"idf\">\n");
                  out.write("    </div>\n");
                  out.write("    ");

        if (reCaptchaEnabled) {
    
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"g-recaptcha\"\n");
                  out.write("             data-sitekey=\"");
                  out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
                  out.write("\">\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("    ");

        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
                  out.print(Encode.forHtmlAttribute
        (request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("\n");
                  out.write("    ");

        Boolean isUsernameRecoveryEnabledInTenant = false;
        Boolean isSelfSignUpEnabledInTenant = false;

        String identityMgtEndpointContext = "";
        String accountRegistrationEndpointURL = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        try {
            PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
            isSelfSignUpEnabledInTenant = preferenceRetrievalClient.checkSelfRegistration(tenantDomain);
            isUsernameRecoveryEnabledInTenant = preferenceRetrievalClient.checkUsernameRecovery(tenantDomain);
        } catch (PreferenceRetrievalClientException e) {
            request.setAttribute("error", true);
            request.setAttribute("errorMsg", AuthenticationEndpointUtil.i18n(resourceBundle, "something.went.wrong.contact.admin"));
            IdentityManagementEndpointUtil.addErrorInformation(request, e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }

        if (isUsernameRecoveryEnabledInTenant || isSelfSignUpEnabledInTenant) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;

            identityMgtEndpointContext = application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                try {
                    identityMgtEndpointContext = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                            .getAbsolutePublicURL();
                } catch (URLBuilderException e) {
                    request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                    request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                            .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                    request.getRequestDispatcher("error.do").forward(request, response);
                    return;
                }
            }

            accountRegistrationEndpointURL = application.getInitParameter("AccountRegisterEndpointURL");
            if (StringUtils.isBlank(accountRegistrationEndpointURL)) {
                accountRegistrationEndpointURL = identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
            }
        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    ");
 if (isUsernameRecoveryEnabledInTenant) { 
                  out.write("\n");
                  out.write("        <div class=\"field\">\n");
                  out.write("            <a id=\"usernameRecoverLink\" href=\"");
                  out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true, urlParameters));
                  out.write("\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
                  out.write("\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
                  out.write(" ?\n");
                  out.write("            </a>\n");
                  out.write("        </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"ui two column stackable grid\">\n");
                  out.write("        <div class=\"column align-left buttons\">\n");
                  out.write("            ");
 if (isSelfSignUpEnabledInTenant) { 
                  out.write("\n");
                  out.write("            <input\n");
                  out.write("                type=\"button\"\n");
                  out.write("                onclick=\"window.location.href='");
                  out.print(getRegistrationUrl(accountRegistrationEndpointURL, urlEncodedURL, urlParameters));
                  out.write("';\"\n");
                  out.write("                class=\"ui large button secondary\"\n");
                  out.write("                id=\"registerLink\"\n");
                  out.write("                role=\"button\"\n");
                  out.write("                value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account"));
                  out.write("\" />\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        </div>\n");
                  out.write("        <div class=\"column align-right buttons\">\n");
                  out.write("            <input\n");
                  out.write("                type=\"submit\"\n");
                  out.write("                onclick=\"submitIdentifier(event)\"\n");
                  out.write("                class=\"ui primary large button\"\n");
                  out.write("                role=\"button\"\n");
                  out.write("                data-testid=\"identifier-auth-continue-button\"\n");
                  out.write("                value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue"));
                  out.write("\" />\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("</form>\n");
                  out.write("\n");
                  out.write("                    ");

                        } else if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                            hasLocalLoginOptions = true;
                            boolean includeBasicAuth = true;
                            if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR)) {
                                if (Boolean.parseBoolean(application.getInitParameter(ENABLE_AUTHENTICATION_WITH_REST_API))) {
                                    isBackChannelBasicAuth = true;
                                } else {
                                    String redirectURL = "error.do?" + STATUS + "=" + CONFIGURATION_ERROR + "&" +
                                            STATUS_MSG + "=" + AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
                                    response.sendRedirect(redirectURL);
                                    return;
                                }
                            } else if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                isBackChannelBasicAuth = false;
                            if (TenantDataManager.isTenantListEnabled() && Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
                                includeBasicAuth = false;
                    
                  out.write("\n");
                  out.write("                                ");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("<form class=\"ui large form\" action=\"");
                  out.print(commonauthURL);
                  out.write("\" method=\"post\" id=\"loginForm\">\n");
                  out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
                  out.write("        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.or.password.invalid"));
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <select class=\"ui fluid dropdown\" id='tenantList' name=\"tenantList\" size='1'>\n");
                  out.write("            <option value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
                  out.write("\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
                  out.write("\n");
                  out.write("            </option>\n");
                  out.write("            <option value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant"));
                  out.write("\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant.display.name"));
                  out.write("\n");
                  out.write("            </option>\n");
                  out.write("            ");

                List<String> tenantDomainsList = TenantDataManager.getAllActiveTenantDomains();
                if (!tenantDomainsList.isEmpty()) {
                    for (String tenant : tenantDomainsList) {
            
                  out.write("\n");
                  out.write("            <option value=\"");
                  out.print(Encode.forHtmlAttribute(tenant));
                  out.write('"');
                  out.write('>');
                  out.print(Encode.forHtmlContent(tenant));
                  out.write("</option>\n");
                  out.write("            ");

                    }
                }
            
                  out.write("\n");
                  out.write("        </select>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <input type=\"hidden\" id='username' name='username'/>\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui fluid left icon input\">\n");
                  out.write("            <input\n");
                  out.write("                type=\"text\"\n");
                  out.write("                id=\"username_tmp\"\n");
                  out.write("                value=\"\"\n");
                  out.write("                name=\"username_tmp\"\n");
                  out.write("                tabindex=\"0\"\n");
                  out.write("                placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
                  out.write("\"\n");
                  out.write("                required>\n");
                  out.write("            <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui fluid left icon input\">\n");
                  out.write("            <input\n");
                  out.write("                type=\"password\"\n");
                  out.write("                id=\"password\"\n");
                  out.write("                name=\"password\"\n");
                  out.write("                value=\"\"\n");
                  out.write("                autocomplete=\"off\"\n");
                  out.write("                placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
                  out.write("\">\n");
                  out.write("            <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
                  out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("\n");
                  out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String accountRegistrationEndpointURL = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;

            identityMgtEndpointContext = application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                try {
                    identityMgtEndpointContext = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                            .getAbsolutePublicURL();
                } catch (URLBuilderException e) {
                    request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                    request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                            .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                    request.getRequestDispatcher("error.do").forward(request, response);
                    return;
                }
            }

            accountRegistrationEndpointURL = application.getInitParameter("AccountRegisterEndpointURL");
            if (StringUtils.isBlank(accountRegistrationEndpointURL)) {
                accountRegistrationEndpointURL = identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
            }
        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui checkbox\">\n");
                  out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
                  out.write("            <label>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
                  out.write("</label>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <div class=\"ui two column stackable grid\">\n");
                  out.write("        ");
 if(request.getParameter("relyingParty").equals("wso2.my.dashboard")) { 
                  out.write("\n");
                  out.write("        <div class=\"column align-left buttons\">\n");
                  out.write("            ");
 if (isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType)) { 
                  out.write("\n");
                  out.write("            <button\n");
                  out.write("                type=\"submit\"\n");
                  out.write("                onclick=\"window.location.href='");
                  out.print(getRegistrationUrl(accountRegistrationEndpointURL, urlEncodedURL, urlParameters));
                  out.write("';\"\n");
                  out.write("                class=\"ui large button secondary\"\n");
                  out.write("                id=\"registerLink\"\n");
                  out.write("                role=\"button\">\n");
                  out.write("                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account"));
                  out.write("\n");
                  out.write("            </button>\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        </div>\n");
                  out.write("        ");
 } 
                  out.write("\n");
                  out.write("        <div class=\"column align-right buttons\">\n");
                  out.write("            <button\n");
                  out.write("                type=\"submit\"\n");
                  out.write("                onclick=\"appendTenantDomain();\"\n");
                  out.write("                class=\"ui primary large button\"\n");
                  out.write("                role=\"button\">\n");
                  out.write("                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue"));
                  out.write("\n");
                  out.write("            </button>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("</form>\n");
                  out.write("\n");
                  out.write("<script>\n");
                  out.write("\n");
                  out.write("    /**\n");
                  out.write("     * Append the tenant domain to the username\n");
                  out.write("     */\n");
                  out.write("        function appendTenantDomain() {\n");
                  out.write("        var element = document.getElementById(\"tenantList\");\n");
                  out.write("        var tenantDomain = element.options[element.selectedIndex].value;\n");
                  out.write("\n");
                  out.write("        setSelectedTenantCookie(tenantDomain, 30);\n");
                  out.write("\n");
                  out.write("        if (tenantDomain != \"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"select.tenant.dropdown.display.name"));
                  out.write("\") {\n");
                  out.write("\n");
                  out.write("            var username = document.getElementsByName(\"username_tmp\")[0].value;\n");
                  out.write("            var userWithDomain = username + \"@\" + tenantDomain;\n");
                  out.write("\n");
                  out.write("            document.getElementsByName(\"username\")[0].value = userWithDomain;\n");
                  out.write("        }\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    /**\n");
                  out.write("     * Write the selected tenant domain to the cookie\n");
                  out.write("     */\n");
                  out.write("    function setSelectedTenantCookie(cvalue, exdays) {\n");
                  out.write("        var date = new Date();\n");
                  out.write("        date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));\n");
                  out.write("        var expires = \"expires=\" + date.toUTCString();\n");
                  out.write("        document.cookie = \"selectedTenantDomain=\" + cvalue + \"; \" + expires + \"; secure\";\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    /**\n");
                  out.write("     * Get the previously selected tenant domain from the cookie\n");
                  out.write("     */\n");
                  out.write("    function getSelectedTenantCookie() {\n");
                  out.write("        var selectedTenantDomain = \"\";\n");
                  out.write("        var name = \"selectedTenantDomain=\";\n");
                  out.write("        var cookieItems = document.cookie.split(';');\n");
                  out.write("\n");
                  out.write("        for (var i = 0; i < cookieItems.length; i++) {\n");
                  out.write("            var item = cookieItems[i];\n");
                  out.write("            item = item.trim();\n");
                  out.write("\n");
                  out.write("            if (item.indexOf(name) != -1) {\n");
                  out.write("                selectedTenantDomain = item.substring(name.length, item.length);\n");
                  out.write("                break;\n");
                  out.write("            }\n");
                  out.write("        }\n");
                  out.write("        return selectedTenantDomain;\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    /**\n");
                  out.write("     * Select the tenant domain based on the previously selected tenant domain in cookie\n");
                  out.write("     */\n");
                  out.write("    function selectTenantFromCookie() {\n");
                  out.write("        var tenant = getSelectedTenantCookie();\n");
                  out.write("        var element = document.getElementById(\"tenantList\");\n");
                  out.write("\n");
                  out.write("        for (var i = 0; i < element.options.length; i++) {\n");
                  out.write("            if (element.options[i].value == tenant) {\n");
                  out.write("                element.value = tenant;\n");
                  out.write("                break;\n");
                  out.write("            }\n");
                  out.write("        }\n");
                  out.write("\n");
                  out.write("        //remove super tenant from dropdown based on the properties\n");
                  out.write("        var superTenant = \"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"super.tenant"));
                  out.write("\";\n");
                  out.write("        if (superTenant == null || superTenant == \"\") {\n");
                  out.write("            for (i = 0; i < element.options.length; i++) {\n");
                  out.write("                if (element.options[i].value == superTenant) {\n");
                  out.write("                    element.remove(i);\n");
                  out.write("                    break;\n");
                  out.write("                }\n");
                  out.write("            }\n");
                  out.write("        }\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    // Handle form submission preventing double submission.\n");
                  out.write("    $(document).ready(function(){\n");
                  out.write("        $.fn.preventDoubleSubmission = function() {\n");
                  out.write("            $(this).on('submit',function(e){\n");
                  out.write("                var $form = $(this);\n");
                  out.write("                if ($form.data('submitted') === true) {\n");
                  out.write("                    // Previously submitted - don't submit again.\n");
                  out.write("                    e.preventDefault();\n");
                  out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
                  out.write("                } else {\n");
                  out.write("                    // Mark it so that the next submit can be ignored.\n");
                  out.write("                    $form.data('submitted', true);\n");
                  out.write("                }\n");
                  out.write("            });\n");
                  out.write("\n");
                  out.write("            return this;\n");
                  out.write("        };\n");
                  out.write("        $('#loginForm').preventDoubleSubmission();\n");
                  out.write("    });\n");
                  out.write("\n");
                  out.write("    $('select.dropdown').dropdown();\n");
                  out.write("\n");
                  out.write("</script>\n");
                  out.write("\n");
                  out.write("                    ");

                            }
                        }

                                if (includeBasicAuth) {
                                    
                  out.write("\n");
                  out.write("                                        ");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write('\n');
                  out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

                  out.write('\n');
                  out.write('\n');
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");

    Boolean isTypingDNAEnabledInTenant;
    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isTypingDNAEnabledInTenant = preferenceRetrievalClient.checkTypingDNA(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", AuthenticationEndpointUtil
                .i18n(resourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }
    File typingPatternRecorder = new File(getServletContext().getRealPath("plugins/typing-dna.jsp"));
    if (isTypingDNAEnabledInTenant && typingPatternRecorder.exists() && !isIdentifierFirstLogin(inputType)) {

                  out.write("\n");
                  out.write("        ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "plugins/typing-dna.jsp", out, false);
                  out.write('\n');
 }  
                  out.write('\n');
                  out.write('\n');
                  out.write('\n');

    String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants
            .PROXY_CONTEXT_PATH);
    if (proxyContextPath == null) {
        proxyContextPath = "";
    }

                  out.write("\n");
                  out.write("<script>\n");
                  out.write("    function goBack() {\n");
                  out.write("        document.getElementById(\"restartFlowForm\").submit();\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    function onCompleted() {\n");
                  out.write("        $('#loginForm').submit();\n");
                  out.write("    }\n");
                  out.write("\n");
                  out.write("    // Handle form submission preventing double submission.\n");
                  out.write("    $(document).ready(function(){\n");
                  out.write("        $.fn.preventDoubleSubmission = function() {\n");
                  out.write("            $(this).on('submit',function(e){\n");
                  out.write("                var $form = $(this);\n");
                  out.write("                if ($form.data('submitted') === true) {\n");
                  out.write("                    // Previously submitted - don't submit again.\n");
                  out.write("                    e.preventDefault();\n");
                  out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
                  out.write("                } else {\n");
                  out.write("                    e.preventDefault();\n");
                  out.write("                    ");

                        if (reCaptchaEnabled) {
                    
                  out.write("\n");
                  out.write("                    if (!grecaptcha.getResponse()) {\n");
                  out.write("                        grecaptcha.execute();\n");
                  out.write("                        return;\n");
                  out.write("                    }\n");
                  out.write("                    ");

                        }
                    
                  out.write("\n");
                  out.write("                    var userName = document.getElementById(\"username\");\n");
                  out.write("                    userName.value = userName.value.trim();\n");
                  out.write("\n");
                  out.write("                    if (userName.value) {\n");
                  out.write("                        let contextPath = \"");
                  out.print(proxyContextPath);
                  out.write("\"\n");
                  out.write("                        if (contextPath !== \"\") {\n");
                  out.write("                            contextPath = contextPath.startsWith('/') ? contextPath : \"/\" + contextPath\n");
                  out.write("                            contextPath = contextPath.endsWith('/') ?\n");
                  out.write("                                contextPath.substring(0, contextPath.length - 1) : contextPath\n");
                  out.write("                        }\n");
                  out.write("                        $.ajax({\n");
                  out.write("                            type: \"GET\",\n");
                  out.write("                            url: contextPath + \"");
                  out.print(loginContextRequestUrl);
                  out.write("\",\n");
                  out.write("                            xhrFields: { withCredentials: true },\n");
                  out.write("                            success: function (data) {\n");
                  out.write("                                if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
                  out.write("                                    window.location.href = data.redirectUrl;\n");
                  out.write("                                } else if ($form.data('submitted') !== true) {\n");
                  out.write("                                    $form.data('submitted', true);\n");
                  out.write("                                    document.getElementById(\"loginForm\").submit();\n");
                  out.write("                                } else {\n");
                  out.write("                                    console.warn(\"Prevented a possible double submit event.\");\n");
                  out.write("                                }\n");
                  out.write("                            },\n");
                  out.write("                            cache: false\n");
                  out.write("                        });\n");
                  out.write("                    }\n");
                  out.write("                }\n");
                  out.write("            });\n");
                  out.write("\n");
                  out.write("            return this;\n");
                  out.write("        };\n");
                  out.write("        $('#loginForm').preventDoubleSubmission();\n");
                  out.write("    });\n");
                  out.write("</script>\n");
                  out.write("\n");
                  out.write('\n');

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;
    String usernameLabel = "username";
    Boolean isSelfSignUpEnabledInTenant;
    Boolean isMultiAttributeLoginEnabledInTenant;
    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }
    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isSelfSignUpEnabledInTenant = preferenceRetrievalClient.checkSelfRegistration(tenantDomain);
        isMultiAttributeLoginEnabledInTenant = preferenceRetrievalClient.checkMultiAttributeLogin(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", AuthenticationEndpointUtil
                .i18n(resourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }
    if (isEmailUsernameEnabled == true) {
        usernameLabel = "email.username";
    } else if (isMultiAttributeLoginEnabledInTenant) {
        usernameLabel = "user.identifier";
    }

    String resendUsername = request.getParameter("resend_username");

    if (StringUtils.isNotBlank(resendUsername)) {
        ResendCodeRequestDTO selfRegistrationRequest = new ResendCodeRequestDTO();
        UserDTO userDTO = AuthenticationEndpointUtil.getUser(resendUsername);
        selfRegistrationRequest.setUser(userDTO);

        PropertyDTO propertyDTO = new PropertyDTO();
        propertyDTO.setKey("RecoveryScenario");
        propertyDTO.setValue("SELF_SIGN_UP");
        selfRegistrationRequest.getProperties().add(propertyDTO);
        // We have to send an empty property for the client to work properly.
        PropertyDTO dummyPropertyDTO = new PropertyDTO();
        dummyPropertyDTO.setKey("");
        dummyPropertyDTO.setValue("");
        selfRegistrationRequest.getProperties().add(dummyPropertyDTO);

        String path = config.getServletContext().getInitParameter(Constants.ACCOUNT_RECOVERY_REST_ENDPOINT_URL);
        String url;
        if (StringUtils.isNotBlank(EndpointConfigManager.getServerOrigin())) {
            url = IdentityManagementEndpointUtil.getBasePath(tenantDomain, path, false);
        } else {
            url = IdentityUtil.getServerURL(path, true, false);
        }
        url = url.replace(TENANT_DOMAIN, userDTO.getTenantDomain());

        List<JSONProvider> providers = new ArrayList<JSONProvider>();
        JSONProvider jsonProvider = new JSONProvider();
        jsonProvider.setDropRootElement(true);
        jsonProvider.setIgnoreNamespaces(true);
        jsonProvider.setValidateOutput(true);
        jsonProvider.setSupportUnwrapped(true);
        providers.add(jsonProvider);

        String toEncode = EndpointConfigManager.getAppName() + ":" + String
                .valueOf(EndpointConfigManager.getAppPassword());
        byte[] encoding = Base64.encodeBase64(toEncode.getBytes());
        String authHeader = new String(encoding, Charset.defaultCharset());
        String header = "Client " + authHeader;

        SelfUserRegistrationResource selfUserRegistrationResource = JAXRSClientFactory
                .create(url, SelfUserRegistrationResource.class, providers);
        WebClient.client(selfUserRegistrationResource).header("Authorization", header);
        Response selfRegistrationResponse = selfUserRegistrationResource.regenerateCode(selfRegistrationRequest);
        if (selfRegistrationResponse != null &&  selfRegistrationResponse.getStatus() == HttpStatus.SC_CREATED) {

                  out.write("\n");
                  out.write("<div class=\"ui visible info message\">\n");
                  out.write("    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_SUCCESS_RESOURCE));
                  out.write("\n");
                  out.write("</div>\n");

} else {

                  out.write("\n");
                  out.write("<div class=\"ui visible negative message\">\n");
                  out.write("    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_FAIL_RESOURCE));
                  out.write("\n");
                  out.write("</div>\n");

        }
    }

                  out.write("\n");
                  out.write("\n");
                  out.write("<form class=\"ui large form\" action=\"");
                  out.print(loginFormActionURL);
                  out.write("\" method=\"post\" id=\"loginForm\">\n");
                  out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
                  out.write("\n");
                  out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
                  out.write("    ");

        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
                  out.write("        ");
                  out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } else if ((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
                  out.write("\n");
                  out.write("    <div class=\"ui visible negative message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
                  out.write("        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } else { 
                  out.write("\n");
                  out.write("        <div class=\"ui visible negative message\" style=\"display: none;\" id=\"error-msg\" data-testid=\"login-page-error-message\"></div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("    ");
 if(Boolean.parseBoolean(request.getParameter("passwordReset"))) {
        
                  out.write("\n");
                  out.write("            <div class=\"ui visible positive message\" data-testid=\"password-reset-success-message\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "Updated.the.password.successfully"));
                  out.write("\n");
                  out.write("            </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    ");
 if (!isIdentifierFirstLogin(inputType)) { 
                  out.write("\n");
                  out.write("        <div class=\"field\">\n");
                  out.write("            <div class=\"ui fluid left icon input\">\n");
                  out.write("                <input\n");
                  out.write("                    type=\"text\"\n");
                  out.write("                    id=\"username\"\n");
                  out.write("                    value=\"\"\n");
                  out.write("                    name=\"username\"\n");
                  out.write("                    tabindex=\"1\"\n");
                  out.write("                    placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
                  out.write("\"\n");
                  out.write("                    data-testid=\"login-page-username-input\"\n");
                  out.write("                    required>\n");
                  out.write("                <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
                  out.write("            </div>\n");
                  out.write("        </div>\n");
                  out.write("    ");
 } else { 
                  out.write("\n");
                  out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" data-testid=\"login-page-username-input\" value=\"");
                  out.print(username);
                  out.write("\">\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("        <div class=\"field\">\n");
                  out.write("            <div class=\"ui fluid left icon input addon-wrapper\">\n");
                  out.write("                <input\n");
                  out.write("                    type=\"password\"\n");
                  out.write("                    id=\"password\"\n");
                  out.write("                    name=\"password\"\n");
                  out.write("                    value=\"\"\n");
                  out.write("                    autocomplete=\"off\"\n");
                  out.write("                    tabindex=\"2\"\n");
                  out.write("                    placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
                  out.write("\"\n");
                  out.write("                    data-testid=\"login-page-password-input\"\n");
                  out.write("                    style=\"padding-right: 2.3em !important;\"\n");
                  out.write("                >\n");
                  out.write("                <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
                  out.write("                <i id=\"passwordUnmaskIcon\"\n");
                  out.write("                   class=\"eye icon mr-0\"\n");
                  out.write("                   style=\"margin: 0 auto; right: 0; pointer-events: auto; cursor: pointer;\"></i>\n");
                  out.write("            </div>\n");
                  out.write("        </div>\n");
                  out.write("    ");

        if (reCaptchaEnabled) {
    
                  out.write("\n");
                  out.write("        <div class=\"g-recaptcha\"\n");
                  out.write("                data-size=\"invisible\"\n");
                  out.write("                data-callback=\"onCompleted\"\n");
                  out.write("                data-action=\"login\"\n");
                  out.write("                                data-sitekey=\"");
                  out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
                  out.write("\"\n");
                  out.write("        </div>\n");
                  out.write("    ");

        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
         String accountRegistrationEndpointURL = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String urlWithoutEncoding = null;
            try {
                ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
                urlWithoutEncoding = applicationDataRetrievalClient.getApplicationAccessURL(tenantDomain,
                                        request.getParameter("sp"));
                urlWithoutEncoding =  IdentityManagementEndpointUtil.replaceUserTenantHintPlaceholder(
                                                                        urlWithoutEncoding, userTenantDomain);
            } catch (ApplicationDataRetrievalClientException e) {
                //ignored and fallback to login page url
            }
            if (StringUtils.isBlank(urlWithoutEncoding)) {
                String scheme = request.getScheme();
                String serverName = request.getServerName();
                int serverPort = request.getServerPort();
                String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
                String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
                urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;
            }

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);

            identityMgtEndpointContext = application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                try {
                    identityMgtEndpointContext = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                            .getAbsolutePublicURL();
                } catch (URLBuilderException e) {
                    request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                    request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                            .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                    request.getRequestDispatcher("error.do").forward(request, response);
                    return;
                }
            }

            accountRegistrationEndpointURL = application.getInitParameter("AccountRegisterEndpointURL");
            if (StringUtils.isBlank(accountRegistrationEndpointURL)) {
                accountRegistrationEndpointURL = identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
            }
        }
    
                  out.write("\n");
                  out.write("\n");
                  out.write("    <div class=\"buttons\">\n");
                  out.write("        ");
 if (isRecoveryEPAvailable) { 
                  out.write("\n");
                  out.write("        <div class=\"field\">\n");
                  out.write("            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
                  out.write("\n");
                  out.write("            <a\n");
                  out.write("                id=\"passwordRecoverLink\"\n");
                  out.write("                tabindex=\"6\"\n");
                  out.write("                href=\"");
                  out.print(StringEscapeUtils.escapeHtml4(getRecoverAccountUrlWithUsername(identityMgtEndpointContext, urlEncodedURL, false, urlParameters, usernameIdentifier)));
                  out.write("\"\n");
                  out.write("                data-testid=\"login-page-password-recovery-button\"\n");
                  out.write("            >\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.password"));
                  out.write("\n");
                  out.write("            </a>\n");
                  out.write("            ?\n");
                  out.write("        </div>\n");
                  out.write("        ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("        ");
 if (isIdentifierFirstLogin(inputType)) { 
                  out.write("\n");
                  out.write("        <div class=\"field\">\n");
                  out.write("            <a id=\"backLink\" tabindex=\"7\" onclick=\"goBack()\" data-testid=\"login-page-back-button\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.different.account"));
                  out.write("\n");
                  out.write("            </a>\n");
                  out.write("        </div>\n");
                  out.write("        ");
 } 
                  out.write("\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"ui checkbox\">\n");
                  out.write("            <input\n");
                  out.write("                tabindex=\"3\"\n");
                  out.write("                type=\"checkbox\"\n");
                  out.write("                id=\"chkRemember\"\n");
                  out.write("                name=\"chkRemember\"\n");
                  out.write("                data-testid=\"login-page-remember-me-checkbox\"\n");
                  out.write("            >\n");
                  out.write("            <label>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
                  out.write("</label>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
                  out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("\n");
                  out.write("    <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("    ");

    boolean showCookiePolicy = (Boolean)request.getAttribute("showCookiePolicy");
    if (showCookiePolicy) {
    
                  out.write("\n");
                  out.write("        <div class=\"ui visible warning message\">\n");
                  out.write("            ");

            String cookiePolicyText = (String)request.getAttribute("cookiePolicyText");
            if (!StringUtils.isEmpty(cookiePolicyText)) {
            
                  out.write("\n");
                  out.write("                ");
                  out.print(cookiePolicyText);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.cookies.short.description"));
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("            <a href=\"cookie_policy.do\" target=\"policy-pane\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.cookies"));
                  out.write("\n");
                  out.write("            </a>\n");
                  out.write("            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.for.more.details"));
                  out.write("\n");
                  out.write("        </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("    ");

    boolean showPrivacyPolicy = (Boolean)request.getAttribute("showPrivacyPolicy");
    if (showPrivacyPolicy) {
    
                  out.write("\n");
                  out.write("        <div class=\"ui visible warning message\">\n");
                  out.write("            ");

            String privacyPolicyText = (String)request.getAttribute("privacyPolicyText");
            if (!StringUtils.isEmpty(privacyPolicyText)) {
            
                  out.write("\n");
                  out.write("                ");
                  out.print(privacyPolicyText);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.privacy.short.description"));
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("            <a href=\"privacy_policy.do\" target=\"policy-pane\">\n");
                  out.write("                ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.general"));
                  out.write("\n");
                  out.write("            </a>\n");
                  out.write("        </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("    <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("    \n");
                  out.write("    <div class=\"mt-0\">\n");
                  out.write("        <div class=\"column buttons\">\n");
                  out.write("            <button\n");
                  out.write("                class=\"ui primary fluid large button\"\n");
                  out.write("                tabindex=\"4\"\n");
                  out.write("                type=\"submit\"\n");
                  out.write("            >\n");
                  out.write("                ");
                  out.print(StringEscapeUtils.escapeHtml4(AuthenticationEndpointUtil.i18n(resourceBundle, "continue")));
                  out.write("\n");
                  out.write("            </button>\n");
                  out.write("        </div>\n");
                  out.write("        <div class=\"column buttons\">\n");
                  out.write("            ");

            String sp = request.getParameter("sp");
            if ( (sp != null && !sp.endsWith("apim_publisher") && !sp.endsWith("apim_admin_portal")) && isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType) && isSelfSignUpEnabledInTenant) { 
                  out.write("\n");
                  out.write("            <button\n");
                  out.write("                type=\"button\"\n");
                  out.write("                onclick=\"window.location.href='");
                  out.print(StringEscapeUtils.escapeHtml4(getRegistrationUrl(accountRegistrationEndpointURL, urlEncodedURL, urlParameters)));
                  out.write("';\"\n");
                  out.write("                class=\"ui secondary fluid large button\"\n");
                  out.write("                id=\"registerLink\"\n");
                  out.write("                tabindex=\"8\"\n");
                  out.write("                role=\"button\"\n");
                  out.write("                data-testid=\"login-page-create-account-button\"\n");
                  out.write("            >\n");
                  out.write("                ");
                  out.print(StringEscapeUtils.escapeHtml4(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account")));
                  out.write("\n");
                  out.write("            </button>\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("\n");
                  out.write("    ");
 if (Boolean.parseBoolean(loginFailed) && errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE) && request.getParameter("resend_username") == null) { 
                  out.write("\n");
                  out.write("    <div class=\"ui divider hidden\"></div>\n");
                  out.write("    <div class=\"field\">\n");
                  out.write("        <div class=\"form-actions\">\n");
                  out.write("            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.confirmation.mail"));
                  out.write("\n");
                  out.write("            <a id=\"registerLink\"\n");
                  out.write("                href=\"login.do?resend_username=");
                  out.print(Encode.forHtml(URLEncoder.encode(request.getParameter("failedUsername"), UTF_8)));
                  out.write('&');
                  out.print(AuthenticationEndpointUtil.cleanErrorMessages(Encode.forJava(request.getQueryString())));
                  out.write("\"\n");
                  out.write("                data-testid=\"login-page-resend-confirmation-email-link\"\n");
                  out.write("            >\n");
                  out.write("                ");
                  out.print(StringEscapeUtils.escapeHtml4(AuthenticationEndpointUtil.i18n(resourceBundle, "resend.mail")));
                  out.write("\n");
                  out.write("            </a>\n");
                  out.write("        </div>\n");
                  out.write("    </div>\n");
                  out.write("    ");
 } 
                  out.write("\n");
                  out.write("    ");
                  out.write("\n");
                  out.write("\n");
                  out.write("    <script defer>\n");
                  out.write("\n");
                  out.write("        /**\n");
                  out.write("         * Toggles the password visibility using the attribute\n");
                  out.write("         * type of the input.\n");
                  out.write("         *\n");
                  out.write("         * @param event {Event} click target\n");
                  out.write("         * @description stops propagation\n");
                  out.write("         */\n");
                  out.write("        $(\"#passwordUnmaskIcon\").click(function (event) {\n");
                  out.write("            event.preventDefault();\n");
                  out.write("            var $passwordInput = $(\"#password\");\n");
                  out.write("\n");
                  out.write("            if ($passwordInput.attr(\"type\") === \"password\") {\n");
                  out.write("                $(this).addClass(\"slash outline\");\n");
                  out.write("                $passwordInput.attr(\"type\", \"text\");\n");
                  out.write("            } else {\n");
                  out.write("                $(this).removeClass(\"slash outline\");\n");
                  out.write("                $passwordInput.attr(\"type\", \"password\");\n");
                  out.write("            }\n");
                  out.write("        });\n");
                  out.write("\n");
                  out.write("        function onSubmitResend(token) {\n");
                  out.write("           $(\"#resendForm\").submit();\n");
                  out.write("        }\n");
                  out.write("\n");
                  out.write("    </script>\n");
                  out.write("\n");
                  out.write("</form>\n");
                  out.write("\n");
                  out.write("<form action=\"");
                  out.print(loginFormActionURL);
                  out.write("\" method=\"post\" id=\"restartFlowForm\">\n");
                  out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
                  out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("    <input type=\"hidden\" name=\"restart_flow\" value='true'/>\n");
                  out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
                  out.write("</form>\n");
                  out.write("\n");
                  out.write("                                    ");

                                }
                            }
                        }
                    
                  out.write("\n");
                  out.write("                    ");
if (idpAuthenticatorMapping != null &&
                            idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) { 
                  out.write("\n");
                  out.write("\n");
                  out.write("                    ");
} 
                  out.write("\n");
                  out.write("                    ");

                        if ((hasLocalLoginOptions && localAuthenticatorNames.size() > 1) || (!hasLocalLoginOptions)
                                || (hasLocalLoginOptions && idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1)) {
                    
                  out.write("\n");
                  out.write("                    ");
 if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) { 
                  out.write("\n");
                  out.write("                    <div class=\"ui divider hidden\"></div>\n");
                  out.write("                    <div class=\"ui horizontal divider\">\n");
                  out.write("                        Or\n");
                  out.write("                    </div>\n");
                  out.write("                    ");
 } 
                  out.write("\n");
                  out.write("                    <div class=\"field\">\n");
                  out.write("                        <div class=\"ui vertical ui center aligned segment form\">\n");
                  out.write("                            ");

                                int iconId = 0;
                                if (idpAuthenticatorMapping != null) {
                                for (Map.Entry<String, String> idpEntry : idpAuthenticatorMapping.entrySet()) {
                                    iconId++;
                                    if (!idpEntry.getKey().equals(Constants.RESIDENT_IDP_RESERVED_NAME)) {
                                        String idpName = idpEntry.getKey();
                                        boolean isHubIdp = false;
                                        if (idpName.endsWith(".hub")) {
                                            isHubIdp = true;
                                            idpName = idpName.substring(0, idpName.length() - 4);
                                        }

                                        // Uses the `IdentityProviderDataRetrievalClient` to get the IDP image.
                                        String imageURL = "libs/themes/default/assets/images/identity-providers/enterprise-idp-illustration.svg";

                                        try {
                                            IdentityProviderDataRetrievalClient identityProviderDataRetrievalClient = new IdentityProviderDataRetrievalClient();
                                            imageURL = identityProviderDataRetrievalClient.getIdPImage(tenantDomain, idpName);
                                        } catch (IdentityProviderDataRetrievalClientException e) {
                                            // Exception is ignored and the default `imageURL` value will be used as a fallback.
                                        }
                            
                  out.write("\n");
                  out.write("                                ");
 if (isHubIdp) { 
                  out.write("\n");
                  out.write("                                    <div class=\"field\">\n");
                  out.write("                                        <button class=\"ui labeled icon button fluid isHubIdpPopupButton\" id=\"icon-");
                  out.print(iconId);
                  out.write("\">\n");
                  out.write("                                            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" <strong>");
                  out.print(Encode.forHtmlContent(idpName));
                  out.write("</strong>\n");
                  out.write("                                        </button>\n");
                  out.write("                                        <div class=\"ui flowing popup transition hidden isHubIdpPopup\">\n");
                  out.write("                                            <h5 class=\"font-large\">");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
                  out.write("\n");
                  out.write("                                                ");
                  out.print(Encode.forHtmlContent(idpName));
                  out.write("</h5>\n");
                  out.write("                                            <div class=\"content\">\n");
                  out.write("                                                <form class=\"ui form\">\n");
                  out.write("                                                    <div class=\"field\">\n");
                  out.write("                                                        <input id=\"domainName\" class=\"form-control\" type=\"text\"\n");
                  out.write("                                                            placeholder=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "domain.name"));
                  out.write("\">\n");
                  out.write("                                                    </div>\n");
                  out.write("                                                    <input type=\"button\" class=\"ui button primary\"\n");
                  out.write("                                                        onClick=\"javascript: myFunction('");
                  out.print(idpName);
                  out.write('\'');
                  out.write(',');
                  out.write('\'');
                  out.print(idpEntry.getValue());
                  out.write("','domainName')\"\n");
                  out.write("                                                        value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"go"));
                  out.write("\"/>\n");
                  out.write("                                                </form>\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    <br>\n");
                  out.write("                                ");
 } else { 
                  out.write("\n");
                  out.write("                                    <div class=\"external-login blurring external-login-dimmer\">\n");
                  out.write("                                        <div class=\"field\">\n");
                  out.write("                                            <button\n");
                  out.write("                                                class=\"ui button fluid\"\n");
                  out.write("                                                onclick=\"handleNoDomain(this,\n");
                  out.write("                                                    '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
                  out.write("',\n");
                  out.write("                                                    '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
                  out.write("')\"\n");
                  out.write("                                                id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                                title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(' ');
                  out.print(Encode.forHtmlAttribute(idpName));
                  out.write("\"\n");
                  out.write("                                            >\n");
                  out.write("                                                <img class=\"ui image\" src=\"");
                  out.print(Encode.forHtmlAttribute(imageURL));
                  out.write("\">\n");
                  out.write("                                                <span>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(' ');
                  out.print(Encode.forHtmlContent(idpName));
                  out.write("</span>\n");
                  out.write("                                            </button>\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    <br>\n");
                  out.write("                                ");
 } 
                  out.write("\n");
                  out.write("                            ");
 } else if (localAuthenticatorNames.size() > 0) {
                                if (localAuthenticatorNames.contains(IWA_AUTHENTICATOR)) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <button class=\"ui blue labeled icon button fluid\"\n");
                  out.write("                                    onclick=\"handleNoDomain(this,\n");
                  out.write("                                        '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
                  out.write("',\n");
                  out.write("                                        'IWAAuthenticator')\"\n");
                  out.write("                                    id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                    title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" IWA\">\n");
                  out.write("                                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" <strong>IWA</strong>\n");
                  out.write("                                </button>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(X509_CERTIFICATE_AUTHENTICATOR)) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <button class=\"ui grey labeled icon button fluid\"\n");
                  out.write("                                    onclick=\"handleNoDomain(this,\n");
                  out.write("                                        '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
                  out.write("',\n");
                  out.write("                                        'x509CertificateAuthenticator')\"\n");
                  out.write("                                    id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                    title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" X509 Certificate\">\n");
                  out.write("                                    <i class=\"certificate icon\"></i>\n");
                  out.write("                                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" <strong>x509 Certificate</strong>\n");
                  out.write("                                </button>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(FIDO_AUTHENTICATOR)) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <button class=\"ui grey labeled icon button fluid\"\n");
                  out.write("                                    onclick=\"handleNoDomain(this,\n");
                  out.write("                                        '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
                  out.write("',\n");
                  out.write("                                        'FIDOAuthenticator')\"\n");
                  out.write("                                    id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                    title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write("\n");
                  out.write("                                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with" ));
                  out.write("\">\n");
                  out.write("                                    <i class=\"usb icon\"></i>\n");
                  out.write("                                    <img src=\"libs/themes/default/assets/images/icons/fingerprint.svg\" alt=\"Fido Logo\" />\n");
                  out.write("                                    <span>\n");
                  out.write("                                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with" ));
                  out.write("\n");
                  out.write("                                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "fido.authenticator" ));
                  out.write("\n");
                  out.write("                                    </span>\n");
                  out.write("                                </button>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(MAGIC_LINK_AUTHENTICATOR)) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"social-login blurring social-dimmer\">\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <button class=\"ui button\" onclick=\"handleNoDomain(this,\n");
                  out.write("                                        '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
                  out.write("',\n");
                  out.write("                                        '");
                  out.print(MAGIC_LINK_AUTHENTICATOR);
                  out.write("')\" id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                        title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write("\n");
                  out.write("                                            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "magic.link" ));
                  out.write("\"\n");
                  out.write("                                        data-componentid=\"login-page-sign-in-with-magic-link\">\n");
                  out.write("                                        <img class=\"ui image\" src=\"libs/themes/default/assets/images/icons/magic-link-icon.svg\" alt=\"Magic Link Logo\" />\n");
                  out.write("                                        <span>\n");
                  out.write("                                            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with" ));
                  out.write("\n");
                  out.write("                                            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "magic.link" ));
                  out.write("\n");
                  out.write("                                        </span>\n");
                  out.write("                                    </button>\n");
                  out.write("                                </div>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains("totp")) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <button class=\"ui brown labeled icon button fluid\"\n");
                  out.write("                                    onclick=\"handleNoDomain(this,\n");
                  out.write("                                        '");
                  out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
                  out.write("',\n");
                  out.write("                                        'totp')\"\n");
                  out.write("                                    id=\"icon-");
                  out.print(iconId);
                  out.write("\"\n");
                  out.write("                                    title=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" TOTP\">\n");
                  out.write("                                    <i class=\"key icon\"></i> ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
                  out.write(" <strong>TOTP</strong>\n");
                  out.write("                                </button>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                            }
                            }
                            }
                            } 
                  out.write("\n");
                  out.write("                            </div>\n");
                  out.write("                        </div>\n");
                  out.write("                    ");
 } 
                  out.write("\n");
                  out.write("                </div>\n");
                  out.write("            </div>\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
              _jspx_th_layout_005fcomponent_005f1_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f1, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f1_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f2_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /login.jsp(463,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
              int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <!-- product-footer -->\n");
                  out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
              _jspx_th_layout_005fcomponent_005f2_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f2, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f2_reused);
            }
            out.write("\n");
            out.write("    ");
            int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
        _jspx_th_layout_005fmain_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fmain_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fmain_005f0_reused);
      }
      out.write("\n");
      out.write("\n");
      out.write("    <!-- footer -->\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        String contextPath =
                ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.PROXY_CONTEXT_PATH);
        if (contextPath != null && contextPath != "") {
            if (contextPath.trim().charAt(0) != '/') {
                contextPath = "/" + contextPath;
            }
            if (contextPath.trim().charAt(contextPath.length() - 1) == '/') {
                contextPath = contextPath.substring(0, contextPath.length() - 1);
            }
            contextPath = contextPath.trim();
        } else {
            contextPath = "";
        }
    
      out.write("\n");
      out.write("    <script>\n");
      out.write("        function checkSessionKey() {\n");
      out.write("            var proxyPath = \"");
      out.print(contextPath);
      out.write("\"\n");
      out.write("            $.ajax({\n");
      out.write("                type: \"GET\",\n");
      out.write("                url: proxyPath + \"");
      out.print(loginContextRequestUrl);
      out.write("\",\n");
      out.write("                xhrFields: { withCredentials: true },\n");
      out.write("                success: function (data) {\n");
      out.write("                    if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                        window.location.href = data.redirectUrl;\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                cache: false\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getParameterByName(name, url) {\n");
      out.write("            if (!url) {\n");
      out.write("                url = window.location.href;\n");
      out.write("            }\n");
      out.write("            name = name.replace(/[\\[\\]]/g, '\\$&');\n");
      out.write("            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n");
      out.write("            results = regex.exec(url);\n");
      out.write("            if (!results) return null;\n");
      out.write("            if (!results[2]) return \"\";\n");
      out.write("            return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            $('#user-name-label').popup({\n");
      out.write("                lastResort: 'top left'\n");
      out.write("            });\n");
      out.write("            $('.main-link').click(function () {\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("                $(this).next().toggle('fast');\n");
      out.write("                var w = $(document).width();\n");
      out.write("                var h = $(document).height();\n");
      out.write("                $('.overlay').css(\"width\", w + \"px\").css(\"height\", h + \"px\").show();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $('.overlay').click(function () {\n");
      out.write("                $(this).hide();\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function myFunction(key, value, name) {\n");
      out.write("            var object = document.getElementById(name);\n");
      out.write("            var domain = object.value;\n");
      out.write("\n");
      out.write("\n");
      out.write("            if (domain != \"\") {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("&domain=\" +\n");
      out.write("                        domain;\n");
      out.write("            } else {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleNoDomain(elem, key, value) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\" +\n");
      out.write("                    \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.onunload = function(){};\n");
      out.write("\n");
      out.write("        function changeUsername (e) {\n");
      out.write("            document.getElementById(\"changeUserForm\").submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $('.isHubIdpPopupButton').popup({\n");
      out.write("            popup: '.isHubIdpPopup',\n");
      out.write("            on: 'click',\n");
      out.write("            position: 'top left',\n");
      out.write("            delay: {\n");
      out.write("                show: 300,\n");
      out.write("                hide: 800\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
