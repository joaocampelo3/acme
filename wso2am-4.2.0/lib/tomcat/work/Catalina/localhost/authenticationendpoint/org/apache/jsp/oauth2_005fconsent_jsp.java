/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-06-17 16:46:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.oauth2.OAuth2ScopeService;
import org.wso2.carbon.identity.oauth2.bean.Scope;
import org.wso2.carbon.identity.oauth2.IdentityOAuth2ScopeException;
import org.wso2.carbon.identity.oauth.dto.ScopeDTO;
import org.wso2.carbon.identity.oauth.IdentityOAuthAdminException;
import org.wso2.carbon.identity.oauth.OAuthAdminServiceImpl;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import java.util.Map;
import java.util.HashMap;

public final class oauth2_005fconsent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/includes/init-url.jsp", Long.valueOf(1683578780736L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1683578780808L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.5.0.jar", Long.valueOf(1683578787332L));
    _jspx_dependants.put("jar:file:/C:/Program%20Files/WSO2/wso2am-4.2.0/repository/deployment/server/webapps/authenticationendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.5.0.jar!/META-INF/taglib.tld", Long.valueOf(1667234524000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1683578780676L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth2.OAuth2ScopeService");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth2.bean.Scope");
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth2.IdentityOAuth2ScopeException");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.util.stream.Collectors");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.stream.Stream");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("org.apache.commons.collections.CollectionUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth.IdentityOAuthAdminException");
    _jspx_imports_classes.add("java.util.StringTokenizer");
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth.dto.ScopeDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.oauth.OAuthAdminServiceImpl");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.apache.commons.lang.ArrayUtils");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale(), new
            EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    String logincontextURL = "../logincontext";
    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {
        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
        logincontextURL = identityServerEndpointContextParam + "/logincontext";
    }
    
    String tenantDomain;
    String userTenantDomain;
    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();
        userTenantDomain = request.getParameter("ut");
        if (StringUtils.isBlank(userTenantDomain)) {
            userTenantDomain = request.getParameter("t");
        }
        if (StringUtils.isBlank(userTenantDomain)) {
            userTenantDomain = tenantDomain;
        }
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainFromURL = request.getParameter("t");

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }
        userTenantDomain = tenantDomain;
    }

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String layout = "default";

      out.write('\n');
      out.write('\n');
      out.write('\n');

    if (config.getServletContext().getResource("extensions/layouts/custom/body.html") != null) {
        layout = "custom";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String layoutFileRelativePath;
    Map<String, Object> layoutData = new HashMap<String, Object>();

    if (!layout.equals("custom")) {
        if (layout.equals("default")) {
            layoutFileRelativePath = "includes/layouts/" + layout + "/body.html";
        } else {
            layoutFileRelativePath = "extensions/layouts/" + layout + "/body.html";
            if (config.getServletContext().getResource(layoutFileRelativePath) == null) {
                layout = "default";
                layoutFileRelativePath = "includes/layouts/default/body.html";
            }
        }
    } else {
        layoutFileRelativePath = "extensions/layouts/custom/body.html";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String app = request.getParameter("application");
    String scopeString = request.getParameter("scope");
    boolean displayScopes = Boolean.parseBoolean(getServletContext().getInitParameter("displayScopes"));

    Map<String, String> queryParamMap = new HashMap<String, String>();
    String queryString = request.getParameter("spQueryParams");
    if (StringUtils.isNotBlank(queryString)) {
        String[] queryParams = queryString.split("&");
        for (String queryParam : queryParams) {
            String[] queryParamKeyValueArray = queryParam.split("=", 2);
                queryParamMap.put(queryParamKeyValueArray[0], queryParamKeyValueArray[1]);
        }
    }

    String clientId = queryParamMap.get("client_id");
    String[] requestedClaimList = new String[0];
    String[] mandatoryClaimList = new String[0];
    if (request.getParameter(Constants.REQUESTED_CLAIMS) != null) {
        requestedClaimList = request.getParameter(Constants.REQUESTED_CLAIMS).split(Constants.CLAIM_SEPARATOR);
    }

    if (request.getParameter(Constants.MANDATORY_CLAIMS) != null) {
        mandatoryClaimList = request.getParameter(Constants.MANDATORY_CLAIMS).split(Constants.CLAIM_SEPARATOR);
    }

    /*
        This parameter decides whether the consent page will only be used to get consent for sharing claims with the
        Service Provider. If this param is 'true' and user has already given consents for the OIDC scopes, we will be
        hiding the scopes being displayed and the approve always button.
    */
    boolean userClaimsConsentOnly = Boolean.parseBoolean(request.getParameter(Constants.USER_CLAIMS_CONSENT_ONLY));

    List<String> openIdScopes = null;
    if (!userClaimsConsentOnly && displayScopes && StringUtils.isNotBlank(scopeString)) {
            // Remove "openid" from the scope list to display.
           openIdScopes = Stream.of(scopeString.split(" "))
                    .filter(x -> !StringUtils.equalsIgnoreCase(x, "openid"))
                    .collect(Collectors.toList());
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    layoutData.put("containerSize", "medium");

      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <!-- header -->\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout authentication-portal-layout\">\n");
      out.write("\n");
      out.write("    ");
 if (new File(getServletContext().getRealPath("extensions/timeout.jsp")).exists()) { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "util/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      boolean _jspx_th_layout_005fmain_005f0_reused = false;
      try {
        _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
        _jspx_th_layout_005fmain_005f0.setParent(null);
        // /oauth2_consent.jsp(113,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
        // /oauth2_consent.jsp(113,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
        // /oauth2_consent.jsp(113,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setData( layoutData );
        int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
        if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f0_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /oauth2_consent.jsp(114,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
              int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <!-- product-title -->\n");
                  out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("            ");

                if (!(ArrayUtils.isNotEmpty(mandatoryClaimList) || ArrayUtils.isNotEmpty(requestedClaimList) || CollectionUtils.isNotEmpty(openIdScopes))){
            
                  out.write("\n");
                  out.write("                <form action=\"");
                  out.print(oauth2AuthorizeURL);
                  out.write("\" method=\"post\" id=\"profile2\" name=\"oauth2_authz\">\n");
                  out.write("                    <input type=\"hidden\" name=\"");
                  out.print(Constants.SESSION_DATA_KEY_CONSENT);
                  out.write("\"\n");
                  out.write("                    value=\"");
                  out.print(Encode.forHtmlAttribute(request.getParameter(Constants.SESSION_DATA_KEY_CONSENT)));
                  out.write("\"/>\n");
                  out.write("                    <input type=\"hidden\" name=\"consent\" id=\"consent\" value=\"approve\"/>\n");
                  out.write("                </form>\n");
                  out.write("                <script>\n");
                  out.write("                    document.getElementById(\"profile2\").submit();\n");
                  out.write("                </script>\n");
                  out.write("            ");

                }
            
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
              _jspx_th_layout_005fcomponent_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f0_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f1_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /oauth2_consent.jsp(139,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
              int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <div class=\"ui segment\">\n");
                  out.write("                <form class=\"ui large form\" action=\"");
                  out.print(oauth2AuthorizeURL);
                  out.write("\" method=\"post\" id=\"profile\" name=\"oauth2_authz\">\n");
                  out.write("                    <h4>");
                  out.print(Encode.forHtml(request.getParameter("application")));
                  out.write("\n");
                  out.write("                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "request.access.profile"));
                  out.write("\n");
                  out.write("                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "request.access.profile2"));
                  out.write("\n");
                  out.write("                        ");
                  out.print(Encode.forHtml(request.getParameter("application")));
                  out.write("\n");
                  out.write("                        ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "request.access.profile3"));
                  out.write("\n");
                  out.write("                    </h4>\n");
                  out.write("\n");
                  out.write("                    <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("                    <div class=\"segment-form\">\n");
                  out.write("\n");
                  out.write("                        <!-- Prompting for consent is only needed if we have mandatory or requested claims without any consent -->\n");
                  out.write("                        ");
 if (ArrayUtils.isNotEmpty(mandatoryClaimList) || ArrayUtils.isNotEmpty(requestedClaimList)) { 
                  out.write("\n");
                  out.write("                            <input type=\"hidden\" name=\"user_claims_consent\" id=\"user_claims_consent\" value=\"true\"/>\n");
                  out.write("                            <!-- validation -->\n");
                  out.write("                            <div class=\"ui secondary segment\" style=\"text-align: left;\">\n");
                  out.write("                                <h5>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "requested.attributes"));
                  out.write(":</h5>\n");
                  out.write("\n");
                  out.write("                                <div class=\"border-gray margin-bottom-double\">\n");
                  out.write("                                    <div class=\"claim-alert\" role=\"alert\">\n");
                  out.write("                                        <p class=\"margin-bottom-double\">\n");
                  out.write("                                            ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "by.selecting.following.attributes"));
                  out.write("\n");
                  out.write("                                            ");
                  out.print(Encode.forHtml(request.getParameter("application")));
                  out.write(".\n");
                  out.write("                                        </p>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    <div>\n");
                  out.write("                                        <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                        ");
 if (ArrayUtils.isNotEmpty(requestedClaimList)) { 
                  out.write("\n");
                  out.write("                                        <div class=\"select-all\">\n");
                  out.write("                                            <div class=\"ui checkbox claim-cb\">\n");
                  out.write("                                                <input type=\"checkbox\" class=\"hidden\" name=\"consent_select_all\" id=\"consent_select_all\" />\n");
                  out.write("                                                <label for=\"consent_select_all\">");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.all"));
                  out.write("</label>\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                        <div class=\"ui divider\"></div>\n");
                  out.write("                                        ");

                                            }
                                        
                  out.write("\n");
                  out.write("                                        <div class=\"claim-list\">\n");
                  out.write("                                            ");
 for (String claim : mandatoryClaimList) {
                                                String[] mandatoryClaimData = claim.split("_", 2);
                                                if (mandatoryClaimData.length == 2) {
                                                    String claimId = mandatoryClaimData[0];
                                                    String displayName = mandatoryClaimData[1];
                                            
                  out.write("\n");
                  out.write("                                            <div class=\"field required\">\n");
                  out.write("                                                <div class=\"ui checkbox checked read-only disabled claim-cb\">\n");
                  out.write("                                                    <input type=\"checkbox\" class=\"mandatory-claim hidden\" name=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write("\" id=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write("\" required checked readonly />\n");
                  out.write("                                                    <label for=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write('"');
                  out.write('>');
                  out.print(Encode.forHtml(displayName));
                  out.write("</label>\n");
                  out.write("                                                </div>\n");
                  out.write("                                            </div>\n");
                  out.write("                                            ");

                                                    }
                                                }
                                            
                  out.write("\n");
                  out.write("                                            ");
 for (String claim : requestedClaimList) {
                                                String[] requestedClaimData = claim.split("_", 2);
                                                if (requestedClaimData.length == 2) {
                                                    String claimId = requestedClaimData[0];
                                                    String displayName = requestedClaimData[1];
                                            
                  out.write("\n");
                  out.write("                                            <div class=\"field\">\n");
                  out.write("                                                <div class=\"ui checkbox claim-cb\">\n");
                  out.write("                                                    <input type=\"checkbox\" class=\"hidden\" name=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write("\" id=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write("\" />\n");
                  out.write("                                                    <label for=\"consent_");
                  out.print(Encode.forHtmlAttribute(claimId));
                  out.write('"');
                  out.write('>');
                  out.print(Encode.forHtml(displayName));
                  out.write("</label>\n");
                  out.write("                                                </div>\n");
                  out.write("                                            </div>\n");
                  out.write("                                            ");

                                                    }
                                                }
                                            
                  out.write("\n");
                  out.write("                                        </div>\n");
                  out.write("\n");
                  out.write("                                        <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                        <div class=\"text-left padding-top-double\">\n");
                  out.write("                                        ");
 if (ArrayUtils.isNotEmpty(mandatoryClaimList)) { 
                  out.write("\n");
                  out.write("                                            <span class=\"mandatory\">");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "mandatory.claims.recommendation"));
                  out.write("</span>\n");
                  out.write("                                            <span class=\"required font-medium\">( * )</span>\n");
                  out.write("                                        ");

                                            }
                                        
                  out.write("\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                </div>\n");
                  out.write("                            </div>\n");
                  out.write("                        ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("                        <div class=\"field\">\n");
                  out.write("                            ");
 if (userClaimsConsentOnly) {
                                // If we are getting consent for user claims only we don't need to display OIDC
                                // scopes in the consent page
                            } else { 
                  out.write("\n");
                  out.write("                                ");

                                    if (displayScopes && StringUtils.isNotBlank(scopeString)) {
                                        if (CollectionUtils.isNotEmpty(openIdScopes)) {
                                
                  out.write("\n");
                  out.write("\n");
                  out.write("                                <div class=\"ui segment\" style=\"text-align: left;\">\n");
                  out.write("                                    <h5>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "requested.scopes"));
                  out.write(":</h5>\n");
                  out.write("                                    <div class=\"scopes-list ui list\">\n");
                  out.write("                                        ");

                                            try {
                                                String scopesAsString = String.join(" ", openIdScopes);
                                                Set<Scope> scopes = new OAuth2ScopeService().getScopes(null, null,
                                                        true, scopesAsString, clientId);

                                                for (Scope scope : scopes) {
                                                    String displayName = scope.getDisplayName();
                                                    String description = scope.getDescription();
                                                    openIdScopes.remove(scope.getName());

                                                    if (displayName != null) {
                                        
                  out.write("\n");
                  out.write("                                        <div class=\"item\">\n");
                  out.write("                                            <i class=\"check circle outline icon\"></i>\n");
                  out.write("                                            <div class=\"content\">\n");
                  out.write("                                                <div class=\"header\">\n");
                  out.write("                                                    ");
                  out.print(Encode.forHtml(displayName));
                  out.write("\n");
                  out.write("                                                </div>\n");
                  out.write("                                                ");
 if (description != null) { 
                  out.write("\n");
                  out.write("                                                <div class=\"description\">\n");
                  out.write("                                                    ");
                  out.print(Encode.forHtml(description));
                  out.write("\n");
                  out.write("                                                </div>\n");
                  out.write("                                                ");
 } 
                  out.write("\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                        ");

                                                    }
                                                }
                                            } catch (IdentityOAuth2ScopeException e) {
                                                // Ignore the error
                                            }

                                            // Unregistered scopes if exist, get the consent with provided scope name.
                                            if (CollectionUtils.isNotEmpty(openIdScopes)) {
                                                for (String scope : openIdScopes) {
                                        
                  out.write("\n");
                  out.write("                                        <div class=\"item\">\n");
                  out.write("                                            <i class=\"check circle outline icon\"></i>\n");
                  out.write("                                            <div class=\"content\">\n");
                  out.write("                                                <div class=\"header\">\n");
                  out.write("                                                    ");
                  out.print(Encode.forHtml(scope));
                  out.write("\n");
                  out.write("                                                </div>\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                        ");

                                                }
                                            }
                                        
                  out.write("\n");
                  out.write("                                    </div>\n");
                  out.write("                                </div>\n");
                  out.write("\n");
                  out.write("                                ");

                                        }
                                    }
                                
                  out.write("\n");
                  out.write("\n");
                  out.write("                                <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                <div class=\"feild\">\n");
                  out.write("                                <div class=\"cookie-policy-message\">\n");
                  out.write("                                <h5>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.privacy.short.description.approving.head"));
                  out.write(' ');
                  out.print(Encode.forHtml(request.getParameter("application")));
                  out.write("</h5>\n");
                  out.write("\n");
                  out.write("                                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.privacy.short.description.approving"));
                  out.write("\n");
                  out.write("                                    ");
                  out.print(Encode.forHtml(request.getParameter("application")));
                  out.write("\n");
                  out.write("                                    ");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.privacy.short.description.approving2"));
                  out.write("\n");
                  out.write("                                <a href=\"privacy_policy.do\" target=\"policy-pane\">");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.general"));
                  out.write("</a>.\n");
                  out.write("                                </div>\n");
                  out.write("                                </div>\n");
                  out.write("\n");
                  out.write("                                <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <div class=\"ui checkbox\">\n");
                  out.write("                                        <input\n");
                  out.write("                                            tabindex=\"3\"\n");
                  out.write("                                            type=\"checkbox\"\n");
                  out.write("                                            id=\"rememberApproval\"\n");
                  out.write("                                            name=\"rememberApproval\"\n");
                  out.write("                                            data-testid=\"consent-page-remember-approval-checkbox\"\n");
                  out.write("                                        />\n");
                  out.write("                                        <label>");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.my.consent"));
                  out.write("</label>\n");
                  out.write("                                    </div>\n");
                  out.write("                                </div>\n");
                  out.write("                            ");

                                }
                            
                  out.write("\n");
                  out.write("                        </div>\n");
                  out.write("\n");
                  out.write("                        <div class=\"ui divider hidden\"></div>\n");
                  out.write("\n");
                  out.write("                        <div class=\"align-right buttons\">\n");
                  out.write("                            <input type=\"hidden\" name=\"");
                  out.print(Constants.SESSION_DATA_KEY_CONSENT);
                  out.write("\"\n");
                  out.write("                                    value=\"");
                  out.print(Encode.forHtmlAttribute(request.getParameter(Constants.SESSION_DATA_KEY_CONSENT)));
                  out.write("\"/>\n");
                  out.write("                            <input type=\"hidden\" name=\"consent\" id=\"consent\" value=\"deny\"/>\n");
                  out.write("\n");
                  out.write("                            <input class=\"ui large button secondary\" type=\"reset\"\n");
                  out.write("                                onclick=\"deny(); return false;\"\n");
                  out.write("                                value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"deny"));
                  out.write("\" />\n");
                  out.write("                            <input type=\"button\" class=\"ui primary large button\" id=\"approve\" name=\"approve\"\n");
                  out.write("                                    onclick=\"approved(); return false;\"\n");
                  out.write("                                    value=\"");
                  out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"allow"));
                  out.write(" \"/>\n");
                  out.write("                        </div>\n");
                  out.write("                    </div>\n");
                  out.write("                </form>\n");
                  out.write("            </div>\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
              _jspx_th_layout_005fcomponent_005f1_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f1, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f1_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f2_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /oauth2_consent.jsp(348,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
              int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <!-- product-footer -->\n");
                  out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("                ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
              _jspx_th_layout_005fcomponent_005f2_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f2, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f2_reused);
            }
            out.write("\n");
            out.write("    ");
            int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
        _jspx_th_layout_005fmain_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fmain_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fmain_005f0_reused);
      }
      out.write("\n");
      out.write("\n");
      out.write("    <!-- footer -->\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"ui modal mini\" id=\"modal_claim_validation\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "mandatory.claims"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"content\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "mandatory.claims.warning.msg.1"));
      out.write("\n");
      out.write("            <span class=\"mandatory-msg\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "mandatory.claims.warning.msg.2"));
      out.write("</span>\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "mandatory.claims.warning.msg.3"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"actions\">\n");
      out.write("            <button class=\"ui primary button\" onclick=\"hideModal(this)\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "ok"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"ui modal mini\" id=\"modal_scope_validation\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "requested.scopes"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"content\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "please.select.approve.always"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"actions\">\n");
      out.write("            <button class=\"ui primary button\" onclick=\"hideModal(this)\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "ok"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        function approved() {\n");
      out.write("            var mandatoryClaimCBs = $(\".mandatory-claim\");\n");
      out.write("            var checkedMandatoryClaimCBs = $(\".mandatory-claim:checked\");\n");
      out.write("            var isApproveAlwaysChecked = $(\"#rememberApproval\").is(':checked');\n");
      out.write("\n");
      out.write("            // Check if the remember approval checkbox is selected, if so set the consent\n");
      out.write("            // input value to `approveAlways` else set it to `approve`.\n");
      out.write("            if (isApproveAlwaysChecked) {\n");
      out.write("                document.getElementById('consent').value = \"approveAlways\";\n");
      out.write("            } else {\n");
      out.write("                document.getElementById('consent').value = \"approve\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkedMandatoryClaimCBs.length === mandatoryClaimCBs.length) {\n");
      out.write("                document.getElementById(\"profile\").submit();\n");
      out.write("            } else {\n");
      out.write("                $(\"#modal_claim_validation\").modal(\"show\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function approvedAlways() {\n");
      out.write("            var mandatoryClaimCBs = $(\".mandatory-claim\");\n");
      out.write("            var checkedMandatoryClaimCBs = $(\".mandatory-claim:checked\");\n");
      out.write("\n");
      out.write("            if (checkedMandatoryClaimCBs.length === mandatoryClaimCBs.length) {\n");
      out.write("                document.getElementById('consent').value = \"approveAlways\";\n");
      out.write("                document.getElementById(\"profile\").submit();\n");
      out.write("            } else {\n");
      out.write("                $(\"#modal_claim_validation\").modal(\"show\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function deny() {\n");
      out.write("            document.getElementById('consent').value = \"deny\";\n");
      out.write("            document.getElementById(\"profile\").submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideModal(elem) {\n");
      out.write("            $(elem).closest('.modal').modal('hide');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $('.checkbox.read-only').checkbox({\n");
      out.write("            uncheckable: false\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            $(\"#consent_select_all\").click(function () {\n");
      out.write("                if (this.checked) {\n");
      out.write("                    $('.checkbox:not(.read-only) input:checkbox').each(function () {\n");
      out.write("                        $(this).prop(\"checked\", true);\n");
      out.write("                    });\n");
      out.write("                } else {\n");
      out.write("                    $('.checkbox:not(.read-only) input:checkbox').each(function () {\n");
      out.write("                        $(this).prop(\"checked\", false);\n");
      out.write("                    });\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\".checkbox input\").click(function () {\n");
      out.write("                var claimCheckedCheckboxes = $(\".claim-cb input:checked\").length;\n");
      out.write("                var claimCheckboxes = $(\".claim-cb input\").length;\n");
      out.write("\n");
      out.write("                if (claimCheckedCheckboxes !== claimCheckboxes) {\n");
      out.write("                    $(\"#consent_select_all\").prop(\"checked\", false);\n");
      out.write("                } else {\n");
      out.write("                    $(\"#consent_select_all\").prop(\"checked\", true);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
