<APIManager xmlns:svns="http://org.wso2.securevault/configuration">
    <!-- JNDI name of the data source to be used by the API publisher, API Developer Portal and API
         key manager. This data source should be defined in the master-datasources.xml file
         in conf/datasources directory. -->
    <DataSourceName>jdbc/WSO2AM_DB</DataSourceName>

    <!-- This parameter is used when adding api management capability to other products like GReg, AS, DSS etc.-->
    <GatewayType>Synapse</GatewayType>

    <!-- This parameter is used to enable the securevault support when try to publish endpoint secured APIs. Values should be "true" or "false".
    By default secure vault is disabled.-->
    <EnableSecureVault>false</EnableSecureVault>

    <!-- This parameter is used to enable mutual tls based authentication support for APIs, when this is disabled,
    APIs will be protected with OAuth2 security-->
    <EnableMTLSForAPIs>true</EnableMTLSForAPIs>

    <!-- These parameters will be used to set the pool size of HTTP client-->
    <HttpClient>
         <MaxTotal>100</MaxTotal>
         <DefaultMaxPerRoute>50</DefaultMaxPerRoute>
     </HttpClient>



    <JWTConfiguration>
        <!-- Enable/Disable JWT generation. Default is false. -->
        <EnableJWTGeneration>false</EnableJWTGeneration>

        <!-- Name of the security context header to be added to the validated requests. -->
        <JWTHeader>X-JWT-Assertion</JWTHeader>

        <!-- Fully qualified name of the class that will retrieve additional user claims
             to be appended to the JWT. If not specified no claims will be appended.If user wants to add all user claims in the
             jwt token, he needs to enable this parameter.
             The DefaultClaimsRetriever class adds user claims from the default carbon user store. -->
        <EnableUserClaims></EnableUserClaims>
        <!--ClaimsRetrieverImplClass>org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever</ClaimsRetrieverImplClass-->

        <!-- The dialectURI under which the claimURIs that need to be appended to the
             JWT are defined. Not used with custom ClaimsRetriever implementations. The
             same value is used in the keys for appending the default properties to the
             JWT. -->
        <ConsumerDialectURI>http://wso2.org/claims</ConsumerDialectURI>

        <!-- Whether to convert claims retrieved from AuthorizationGrantCache to the dialect defined in ConsumerDialectURI -->
        <ConvertClaimsToConsumerDialect>false</ConvertClaimsToConsumerDialect>

        <!-- Signature algorithm. Accepts "SHA256withRSA" or "NONE". To disable signing explicitly specify "NONE". -->
        <SignatureAlgorithm>SHA256withRSA</SignatureAlgorithm>

        <!-- This parameter specifies which implementation should be used for generating the Token. JWTGenerator is the
	     default implementation provided. -->
        <JWTGeneratorImpl>org.wso2.carbon.apimgt.keymgt.token.JWTGenerator</JWTGeneratorImpl>
        <!-- This parameter specifies which implementation should be used for generating the Token. For URL safe JWT
             Token generation the implementation is provided in URLSafeJWTGenerator -->
        <!--<JWTGeneratorImpl>org.wso2.carbon.apimgt.keymgt.token.URLSafeJWTGenerator</JWTGeneratorImpl>-->
        <EnableTenantBasedSigning>false</EnableTenantBasedSigning>
        <GatewayJWTGeneration>
            <ImplClass>org.wso2.carbon.apimgt.common.gateway.jwtgenerator.APIMgtGatewayJWTGeneratorImpl</ImplClass>
            <Configuration>
            <ExcludedClaims>            </ExcludedClaims>
            <EnableUserClaimRetrievalFromKeyManager>false</EnableUserClaimRetrievalFromKeyManager>
            </Configuration>
        </GatewayJWTGeneration>
    </JWTConfiguration>

    <!-- Primary/secondary login configuration for API Developer Portal. If user likes to keep two login attributes in a distributed setup, to login the API Developer Portal,
		he should configure this section. Primary login doesn't have a claimUri associated with it. But secondary login, which is a claim attribute,
		is associated with a claimuri.-->
    <!--LoginConfig>
        <UserIdLogin  primary="true">
            <ClaimUri></ClaimUri>
        </UserIdLogin>
        <EmailLogin  primary="false">
            <ClaimUri>http://wso2.org/claims/emailaddress</ClaimUri>
        </EmailLogin>
    </LoginConfig-->

    <!-- Credentials for the API gateway admin server. This configuration
         is mainly used by the API publisher and API Developer Portal to connect to the API gateway and
         create/update published API configurations. -->
    <APIGateway>
        <!-- The environments to which an API will be published -->
        <Environments>
            <!-- Environments can be of different types. Allowed values are 'hybrid', 'production' and 'sandbox'.
                 An API deployed on a 'production' type gateway will only support production keys
                 An API deployed on a 'sandbox' type gateway will only support sandbox keys
                 An API deployed on a 'hybrid' type gateway will support both production and sandbox keys. -->
            <!-- api-console element specifies whether the environment should be listed in API Console or not -->
            <Environment type="hybrid" api-console="true" isDefault="true">
                <Name>Default</Name>
                <DisplayName></DisplayName>
                <Description>This is a hybrid gateway that handles both production and sandbox token traffic.</Description>
                <!-- Server URL of the API gateway -->
                <ServerURL>https://localhost:${mgt.transport.https.port}/services/</ServerURL>
                <!-- Admin username for the API gateway. -->
                <Username>${admin.username}</Username>
                <!-- Admin password for the API gateway.-->
                <Password>${admin.password}</Password>
                <!-- Provider Vendor of the API gateway.-->
                <Provider>wso2</Provider>
                <!-- Endpoint URLs for the APIs hosted in this API gateway.-->
                <GatewayEndpoint>https://localhost:${https.nio.port},http://localhost:${http.nio.port}</GatewayEndpoint>
                <!-- Additional properties for External Gateways -->
                <!-- Endpoint URLs of the WebSocket APIs hosted in this API Gateway -->
                <GatewayWSEndpoint>ws://localhost:9099,wss://localhost:8099</GatewayWSEndpoint>
                <!-- Endpoint URLs of the WebSub APIs hosted in this API Gateway -->
                <GatewayWebSubEndpoint>http://localhost:9021,https://localhost:8021</GatewayWebSubEndpoint>
                <VirtualHosts>
                </VirtualHosts>
            </Environment>
        </Environments>
    </APIGateway>

    <TokenIssuers>    </TokenIssuers>

    <CacheConfigurations>
	    <!-- Enable/Disable token caching at the Gateway-->
        <EnableGatewayTokenCache>true</EnableGatewayTokenCache>
	    <!-- Enable/Disable API resource caching at the Gateway-->
        <EnableGatewayResourceCache>true</EnableGatewayResourceCache>
        <!-- Enable/Disable API key validation information caching at key-management server -->
        <EnableKeyManagerTokenCache>false</EnableKeyManagerTokenCache>
        <!-- This parameter specifies whether Recently Added APIs will be loaded from the cache or not.
             If there are multiple API modification during a short time period, better to disable cache. -->
        <EnableRecentlyAddedAPICache>false</EnableRecentlyAddedAPICache>
        <!-- This parameter specifies whether scopes are taken from cache or not. If you are modifying application
        subscriptions frequently, modifying the user roles frequently or updating the subscribed APIs frequently, it
        is better to turn-off this cache-->
        <EnableScopeCache>true</EnableScopeCache>
        <!-- This indicates whether the role cache need to enabled in the publisher. If this is disabled, there will
        be a call to key manager to all the calls to API publisher APIs. It is highly recommended to enable this
        cache. However, if the system is in a state, where the role addition and deletion happens seamlessly, the
        cache will be in in-valid state.-->
        <EnablePublisherRoleCache>true</EnablePublisherRoleCache>
        <!-- Enable/Disable token caching at the Product REST APIs-->
        <EnableRESTAPITokenCache>true</EnableRESTAPITokenCache>
	    <!-- JWT claims Cache expiry in seconds -->
        <!-- Expiry time for the apim key mgt validation info cache -->
        <!-- Expiry time for the resource cache  -->
        <!-- Expiry time for the apim REST API token cache -->
        <RESTAPITokenCacheExpiry>300</RESTAPITokenCacheExpiry>
        <!-- Enable/Disable cache control headers of the Product REST APIs-->
        <EnableRESTAPICacheControlHeaders>true</EnableRESTAPICacheControlHeaders>
        <!-- MaxAge for the cache control headers of the Product REST APIs -->
        <RESTAPICacheControlHeadersMaxAge>86400</RESTAPICacheControlHeadersMaxAge>
        <!-- This parameter specifies the expiration time of the TagCache. TagCache will
             only be created when this element is uncommented. When the specified
             time duration gets elapsed ,tag cache will get re-generated. -->
        <!--change to expiray-->
        <!-- JWT Claim cache can be disabled only if below config <EnableJWTClaimCache> is set as 'false'. The default
          value is 'true'.
          Other than this config, also <EnableGatewayTokenCache> and <EnableKeyManagerTokenCache> should have been set
          as 'false' to completely disable JWTClaimCache.
         -->
        <EnableJWTClaimCache>true</EnableJWTClaimCache>
    </CacheConfigurations>

    <!--
        API usage tracker configuration used by the StreamProcessor data publisher and
        Google Analytics publisher in API gateway.
    -->
    <Analytics>
        <!-- Enable Analytics for API Manager -->
        <Enabled>false</Enabled>

        <Type></Type>

        <AuthToken></AuthToken>


        <!-- Event publisher implementation -->

        <!-- Properties for Event publisher implementation -->
        <Properties>
            <Property name="keystore_password">wso2carbon</Property>
            <Property name="proxy_config_port"></Property>
            <Property name="truststore_password">wso2carbon</Property>
            <Property name="proxy_config_username"></Property>
            <Property name="truststore_location">${carbon.home}/repository/resources/security/client-truststore.jks</Property>
            <Property name="proxy_config_enable">false</Property>
            <Property name="proxy_config_host"></Property>
            <Property name="keystore_location">${carbon.home}/repository/resources/security/wso2carbon.jks</Property>
            <Property name="proxy_config_password"></Property>
        </Properties>

    </Analytics>

    <!--
        Configurations relevant to enable rate limit feature.
        This enables to use resources considering subscription levels.
    -->
    <ResourceQuotaLimit>
        <EnableAPIQuotaLimit>false</EnableAPIQuotaLimit>
    </ResourceQuotaLimit>

    <!--
        API key validator configuration used by API key manager (IS), API Developer Portal and API gateway.
        API gateway uses it to validate and authenticate users against the provided API keys.
    -->
    <APIKeyValidator>
        <!-- Server URL of the API key manager -->
        <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>

        <!-- Admin username for API key manager. -->
        <Username>${admin.username}</Username>
        <!-- Admin password for API key manager. -->
        <Password>${admin.password}</Password>

        <KeyValidationHandlerClassName>org.wso2.carbon.apimgt.keymgt.handlers.DefaultKeyValidationHandler</KeyValidationHandlerClassName>
        <DefaultKeyManagerType>default</DefaultKeyManagerType>
     <EnableKeyManagerConfigurationRetriever>true</EnableKeyManagerConfigurationRetriever>
      <EnableProvisionedAppValidation>true</EnableProvisionedAppValidation>
      <EnableAPIKeySubscriptionValidation>true</EnableAPIKeySubscriptionValidation>
    </APIKeyValidator>


    <OAuthConfigurations>
        <!-- Remove OAuth headers from outgoing message. -->
        <RemoveOAuthHeadersFromOutMessage>true</RemoveOAuthHeadersFromOutMessage>
        <!-- Scope used for marking Application Tokens. If a token is generated with this scope, they will be treated as Application Access Tokens -->
        <ApplicationTokenScope>am_application_scope</ApplicationTokenScope>
        <!-- All  scopes under the AllowedScopes element are not validating against roles that has assigned to it.
             By default ^device_.* and openid scopes have been allowed internally. -->
        <AllowedScopes>
            <Scope>^device_.*</Scope>
            <Scope>openid</Scope>
        </AllowedScopes>

        <!-- Name of the token API -->
        <TokenEndPointName>/token</TokenEndPointName>
        <RevokeEndpointName>/revoke</RevokeEndpointName>
        <!-- This the API URL for revoke API. When we revoke tokens revoke requests should go through this
             API deployed in API gateway. Then it will do cache invalidations related to revoked tokens.
             In distributed deployment we should configure this property in key manager node by pointing
             gateway https( /http, we recommend users to use 'https' endpoints for security purpose) url.
             Also please note that we should point gateway revoke service to key manager -->
        <RevokeAPIURL>https://localhost:${mgt.transport.https.port}/oauth2/revoke</RevokeAPIURL>
        <!-- Whether to encrypt tokens when storing in the Database
        Note: If changing this value to true, change the value of <TokenPersistenceProcessor> to
        org.wso2.carbon.identity.oauth.tokenprocessor.EncryptionDecryptionPersistenceProcessor in the identity.xml -->
        <EncryptPersistedTokens>false</EncryptPersistedTokens>
        <!-- Whether to hash the tokens when storing in the Database
        Note: If changing this value to true, change the value of <TokenPersistenceProcessor> to
        org.wso2.carbon.identity.oauth.tokenprocessor.HashingPersistenceProcessor and change the value of
        <EnableClientSecretHash> to true in the identity.xml -->
        <EnableTokenHashMode>false</EnableTokenHashMode>
        <!-- Whether to validate certificate bound access tokens-->
        <EnableCertificateBoundAccessToken>false</EnableCertificateBoundAccessToken>

    </OAuthConfigurations>

    <AccessTokenBinding>
    </AccessTokenBinding>

    <TokenRevocationNotifiers class="org.wso2.carbon.apimgt.notification.TokenRevocationNotifierImpl">
        <RealtimeNotifier>
            <Property name="ttl">5000</Property>
        </RealtimeNotifier>
    </TokenRevocationNotifiers>

    <!-- Settings related to managing API access tiers. -->
    <TierManagement>
        <!-- Enable the providers to expose their APIs over the special 'Unlimited' tier which
             basically disables tier based throttling for the specified APIs. -->
        <EnableUnlimitedTier>true</EnableUnlimitedTier>
    </TierManagement>

    <!-- API Developer Portal Related Configurations -->
    <APIStore>
        <DefaultGroupExtractorClaimUri>http://wso2.org/claims/organization</DefaultGroupExtractorClaimUri>
        <!--This property is used to indicate how we do user name comparision for token generation https://wso2.org/jira/browse/APIMANAGER-2225-->
        <CompareCaseInsensitively>true</CompareCaseInsensitively>
        <DisplayURL>false</DisplayURL>
        <URL>https://localhost:${mgt.transport.https.port}/devportal</URL>

        <!-- Server URL of the API Developer Portal. -->
        <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
        <!-- Admin username for API Developer Portal. -->
        <Username>${admin.username}</Username>

        <!-- Admin password for API Developer Portal. -->
        <Password>${admin.password}</Password>
        <!-- This parameter specifies whether to display multiple versions of same
             API or only showing the latest version of an API. -->
        <DisplayMultipleVersions>false</DisplayMultipleVersions>
        <!-- This parameter specifies whether to display all the APIs
             [which are having DEPRECATED/PUBLISHED status] or only display the APIs
             with having their status is as 'PUBLISHED' -->
        <DisplayAllAPIs>false</DisplayAllAPIs>
        <!-- Uncomment this to limit the number of APIs in api the API Developer Portal -->
        <!--APIsPerPage>5</APIsPerPage-->

        <!-- This parameter specifies whether to display the comment editing facility or not.
             Default is "true". If user wants to disable, he must set this param as "false" -->
        <DisplayComments>true</DisplayComments>

        <!-- This parameter specifies whether to display the ratings  or not.
             Default is "true". If user wants to disable, he must set this param as "false" -->
        <DisplayRatings>true</DisplayRatings>

        <!--set isStoreForumEnabled to false for disable forum in API Developer Portal-->
        <isStoreForumEnabled>true</isStoreForumEnabled>

        <!--This parameter specifies whether Provisioning Out-of-Band OAuth Clients is enabled-->
        <MapExistingAuthApps>false</MapExistingAuthApps>

        <!--This parameter specifies the alias value of the Api Key which will be used for Api Key Authentication-->
        <APIKeyKeystore></APIKeyKeystore>
        <ApiKeyAlias>gateway_certificate_alias</ApiKeyAlias>
        <ApiKeyGeneratorImpl></ApiKeyGeneratorImpl>

        <!--This parameter specifies whether Anonymous Mode is enabled. By default it is true.-->
        <EnableAnonymousMode>true</EnableAnonymousMode>
        <EnableCrossTenantSubscription>false</EnableCrossTenantSubscription>
        <DefaultReservedUsername>apim_reserved_user</DefaultReservedUsername>
    </APIStore>

    <APIPublisher>
        <DisplayURL>false</DisplayURL>
        <URL>https://localhost:${mgt.transport.https.port}/publisher</URL>
        <!-- This parameter specifies enabling the capability of setting API documentation level granular visibility levels.
             By default any document associate with an API will have the same permissions set as the API.With enabling below
             property,it will show two additional permission levels as visible only to all registered users in a particular
             domain or only visible to API doc creator -->
        <EnableAPIDocVisibilityLevels>false</EnableAPIDocVisibilityLevels>
        <!-- Uncomment this to limit the number of APIs in api the API Publisher -->
        <!--APIsPerPage>30</APIsPerPage-->
        <!-- This property need to be enabled to enable the publisher access control support -->
        <EnableAccessControl>true</EnableAccessControl>
        <!-- This property is to add the claims that needs to be displayed in Publisher -->
        <SubscriberClaims>http://wso2.org/claims/givenname,http://wso2.org/claims/lastname,http://wso2.org/claims/emailaddress,http://wso2.org/claims/organization</SubscriberClaims>
         <!--This parameter specifies the alias value of the internal Api Key which will be used for Api Key Authentication-->
        <InternalKeyAlias>gateway_certificate_alias</InternalKeyAlias>
    </APIPublisher>

    <!-- Status observers can be registered against the API Publisher to listen for
         API status update events. Each observer must implement the APIStatusObserver
         interface. Multiple observers can be engaged if necessary and in such situations
         they will be notified in the order they are defined here.
         This configuration is unused from API Manager version 1.10.0 -->
    <!--StatusObservers>
        <Observer>org.wso2.carbon.apimgt.impl.observers.SimpleLoggingObserver</Observer>
    </StatusObservers-->

    <!-- Configuration to configure the email recipient field (To/cc/bcc) and delimeter(, or ;)-->
    <SubscriberContactConfiguration>
    <EmailRecipientField></EmailRecipientField>
        <EmailAddressDelimiter></EmailAddressDelimiter>
    </SubscriberContactConfiguration>

    <!-- Configuration to enable/disable sending CORS headers in the Gateway response
         and define the Access-Control-Allow-Origin header value.-->
    <CORSConfiguration>
        <!-- Configuration to enable/disable sending CORS headers from the Gateway-->
        <Enabled>true</Enabled>

        <!-- The value of the Access-Control-Allow-Origin header. Default values are
             API Developer Portal addresses, which is needed for swagger to function. -->
        <Access-Control-Allow-Origin>*</Access-Control-Allow-Origin>

        <!-- Configure Access-Control-Allow-Methods -->
        <Access-Control-Allow-Methods>GET,PUT,POST,DELETE,PATCH,OPTIONS</Access-Control-Allow-Methods>

        <!-- Configure Access-Control-Allow-Headers -->
        <Access-Control-Allow-Headers>authorization,Access-Control-Allow-Origin,Content-Type,SOAPAction,apikey,Internal-Key</Access-Control-Allow-Headers>

        <!-- Configure Access-Control-Expose-Headers -->

        <!-- Configure Access-Control-Allow-Credentials -->
        <!-- Specifying this header to true means that the server allows cookies (or other user credentials) to be included on cross-origin requests.
             It is false by default and if you set it to true then make sure that the Access-Control-Allow-Origin header does not contain the wildcard (*) -->
        <Access-Control-Allow-Credentials>false</Access-Control-Allow-Credentials>
        <!-- Configuration to enable/disable CORS validation for WebSocket APIs. If enabled (true), the 'Origin' header
             will be validated for CORS in the handshake of Webscoket API invocations. Else (false), no CORS validation will
             take place with 'Origin' header -->
        <EnableValidationForWS>false</EnableValidationForWS>
    </CORSConfiguration>

    <!-- This property is there to configure velocity log output into existing Log4j carbon Logger.
         You can enable this and set preferable Logger name. -->

    <RESTAPI>
        <!--Configure allowed URIs of REST API. Accessing allowed URIs does not require credentials (does not require Authorization header). -->
        <AllowedURIs>
             <AllowedURI>
                <URI>/api/am/devportal/{version}/tenants</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
             </AllowedURI>
            <AllowedURI>
                <URI>/api/am/publisher/{version}/swagger.json</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/swagger.json</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/admin/{version}/swagger.json</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/publisher/{version}/swagger.yaml</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/swagger.yaml</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/admin/{version}/swagger.yaml</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/swagger</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/async-api-specification</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/wsdl</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/comments</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/comments/{commentId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                 <URI>/api/am/devportal/{version}/apis/{apiId}/subscription-policies</URI>
                 <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/throttling-policies/{policyLevel}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/throttling-policies/{policyLevel}/{policyId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                 <URI>/api/am/devportal/{version}/apis/{apiId}/graphql-schema</URI>
                 <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/documents</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/documents/{documentId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/thumbnail</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/ratings</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}/swagger</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}/documents</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}/documents/{documentId}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}/documents/{documentId}/content</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-products/{apiId}/thumbnail</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/tags</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/tiers/{tierLevel}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/tiers/{tierLevel}/{tierName}</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/search</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/settings</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/publisher/{version}/settings</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/admin/{version}/settings</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/service-catalog/{serviceCatalogVersion}/settings</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/api-categories</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/graphql-policies/complexity</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/graphql-policies/complexity/types</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/topics</URI>
                <HTTPMethods>GET</HTTPMethods>
            </AllowedURI>
            <AllowedURI>
                <URI>/api/am/service-catalog/{serviceCatalogVersion}/oas.yaml</URI>
                <HTTPMethods>GET,HEAD</HTTPMethods>
            </AllowedURI>
        </AllowedURIs>
        <ETagSkipList>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/apis</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/apis/generate-sdk</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/apis/{apiId}/documents</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/applications</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/applications/generate-keys</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/subscriptions</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/tags</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/tiers/{tierLevel}</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/devportal/{version}/tiers/{tierLevel}/{tierName}</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}</URI>
                <HTTPMethods>GET,DELETE,PUT</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/swagger</URI>
                <HTTPMethods>GET,PUT</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/thumbnail</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/change-lifecycle</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/copy-api</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/applications/{applicationId}</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/documents</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}</URI>
                <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/environments</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/subscriptions</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/subscriptions/block-subscription</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/subscriptions/{subscriptionId}</URI>
                <HTTPMethods>GET</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/subscriptions/unblock-subscription</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/tiers/{tierLevel}</URI>
                <HTTPMethods>GET,POST</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/tiers/{tierLevel}/{tierName}</URI>
                <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
            </ETagSkipURI>
            <ETagSkipURI>
                <URI>/api/am/publisher/{version}/tiers/update-permission</URI>
                <HTTPMethods>POST</HTTPMethods>
            </ETagSkipURI>
        </ETagSkipList>
    </RESTAPI>
    <ThrottlingConfigurations>
        <TrafficManager>
            <Type>Binary</Type>


            <ReceiverUrlGroup>tcp://${carbon.local.ip}:${receiver.url.port}</ReceiverUrlGroup>


            <AuthUrlGroup>ssl://${carbon.local.ip}:${auth.url.port}</AuthUrlGroup>
            <Username>admin</Username>
            <Password>admin</Password>
        </TrafficManager>
        <DataPublisher>
            <Enabled>true</Enabled>
            <DataPublisherPool>
                <MaxIdle>1000</MaxIdle>
                <InitIdleCapacity>200</InitIdleCapacity>
            </DataPublisherPool>
            <DataPublisherThreadPool>
                <CorePoolSize>200</CorePoolSize>
                <MaxmimumPoolSize>1000</MaxmimumPoolSize>
                <KeepAliveTime>200</KeepAliveTime>
            </DataPublisherThreadPool>
        </DataPublisher>
        <PolicyDeployer>
            <Enabled>true</Enabled>
            <ServiceURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServiceURL>
            <Username>admin</Username>
            <Password>admin</Password>
        </PolicyDeployer>
        <BlockCondition>
            <Enabled>true</Enabled>
        </BlockCondition>
        <JMSConnectionDetails>
            <Enabled>true</Enabled>
            <JMSConnectionParameters>
                <transport.jms.ConnectionFactoryJNDIName>TopicConnectionFactory</transport.jms.ConnectionFactoryJNDIName>
                <transport.jms.DestinationType>topic</transport.jms.DestinationType>
                <java.naming.factory.initial>org.wso2.andes.jndi.PropertiesFileInitialContextFactory</java.naming.factory.initial>
                <connectionfactory.TopicConnectionFactory>amqp://<![CDATA[admin]]>:<![CDATA[admin]]>@clientid/carbon?brokerlist='tcp://${carbon.local.ip}:${jms.port}'</connectionfactory.TopicConnectionFactory>
            </JMSConnectionParameters>
        </JMSConnectionDetails>

        <!--DefaultLimits>
            <SubscriptionTierLimits>
                <Gold>5000</Gold>
                <Silver>2000</Silver>
                <Bronze>1000</Bronze>
                <Unauthenticated>60</Unauthenticated>
            </SubscriptionTierLimits>
            <ApplicationTierLimits>
                <50PerMin>50</50PerMin>
                <20PerMin>20</20PerMin>
                <10PerMin>10</10PerMin>
            </ApplicationTierLimits>
            <ResourceLevelTierLimits>
                <50KPerMin>50000</50KPerMin>
                <20KPerMin>20000</20KPerMin>
                <10KPerMin>10000</10KPerMin>
            </ResourceLevelTierLimits>
        </DefaultLimits-->
        <EnableUnlimitedTier>true</EnableUnlimitedTier>
        <EnableHeaderConditions>false</EnableHeaderConditions>
        <EnableJWTClaimConditions>false</EnableJWTClaimConditions>
        <EnableQueryParamConditions>false</EnableQueryParamConditions>
        <SkipRedeployingPolicies>RequestPreProcessorExecutionPlan</SkipRedeployingPolicies>
        <EnablePolicyDeployment>true</EnablePolicyDeployment>
    </ThrottlingConfigurations>

    <WorkflowConfigurations>
        <Enabled>false</Enabled>
    	<ServerUrl>https://localhost:9445/bpmn</ServerUrl>
    	<ServerUser>${admin.username}</ServerUser>
    	<ServerPassword>${admin.password}</ServerPassword>
    	<WorkflowCallbackAPI>https://localhost:${mgt.transport.https.port}/api/am/admin/v4/workflows/update-workflow-status</WorkflowCallbackAPI>
        <TokenEndPoint>https://localhost:${mgt.transport.https.port}/oauth2/token</TokenEndPoint>
        <DCREndPoint>https://localhost:${mgt.transport.https.port}/client-registration/v0.17/register</DCREndPoint>
        <DCREndPointUser>${admin.username}</DCREndPointUser>
        <DCREndPointPassword>${admin.password}</DCREndPointPassword>
    </WorkflowConfigurations>

    <SwaggerCodegen>
        <ClientGeneration>
            <GroupId>org.wso2</GroupId>
            <ArtifactId>org.wso2.client.</ArtifactId>
            <ModelPackage>org.wso2.client.model.</ModelPackage>
            <ApiPackage>org.wso2.client.api.</ApiPackage>
            <!-- Configure supported languages/Frameworks as comma separated values,
             Supported Languages/Frameworks : android, java, scala, csharp, dart, flash, groovy, javascript, jmeter,
             nodejs, perl, php, python, ruby, swift, clojure, asyncScala, csharpDotNet2-->
            <SupportedLanguages>android,java,javascript,jmeter</SupportedLanguages>
        </ClientGeneration>
    </SwaggerCodegen>

    <!--Specify the implementation class of the monetization interface-->
    <Monetization>
        <MonetizationImpl>org.wso2.carbon.apimgt.impl.monetization.DefaultMonetizationImpl</MonetizationImpl>
        <UsagePublisher>
            <!--Inorder to reduce configuration migration, previous config name for query API is used for choreo insight API endpoint-->
        </UsagePublisher>
    </Monetization>


    <OpenTelemetry>
        <RemoteTracer>
            <Enabled></Enabled>
            <Name></Name>
            <Url></Url>
            <HostName></HostName>
            <Port></Port>
            <Properties>
            </Properties>
        </RemoteTracer>
        <LogTracer>
            <Enabled></Enabled>
        </LogTracer>
    </OpenTelemetry>

    <OpenTracer>
        <RemoteTracer>
            <Enabled>false</Enabled>
            <Name>zipkin</Name>
            <Properties>
                <HostName>localhost</HostName>
                <Port>9411</Port>
            </Properties>
        </RemoteTracer>
        <LogTracer>
            <Enabled>false</Enabled>
        </LogTracer>
    </OpenTracer>






    <CertificateReLoaderConfiguration>
        <Period>600</Period>
    </CertificateReLoaderConfiguration>

     <MutualSSL>
        <ClientCertificateHeader>X-WSO2-CLIENT-CERTIFICATE</ClientCertificateHeader>
        <EnableClientCertificateValidation>true</EnableClientCertificateValidation>
     </MutualSSL>

     <GlobalCacheInvalidation>
        <Enabled>false</Enabled>
        <Domain>default</Domain>
        <Stream>cache.invalidation.stream:1.0.0</Stream>
        <Topic>globalCacheInvalidation</Topic>
        <ExcludedCaches>         </ExcludedCaches>
     </GlobalCacheInvalidation>

     <EventHubConfigurations>
        <Enable>true</Enable>
         <Username>admin</Username>
         <Password>admin</Password>
         <ServiceURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServiceURL>
        <InitDelay>1000</InitDelay>
        <EventPublisherConfiguration>
            <Type>Binary</Type>
                    <ReceiverUrlGroup>tcp://${carbon.local.ip}:${receiver.url.port}</ReceiverUrlGroup>
                    <AuthUrlGroup>ssl://${carbon.local.ip}:${auth.url.port}</AuthUrlGroup>
        <Properties>
        </Properties>
        </EventPublisherConfiguration>
         <EventReceiverConfiguration>
             <transport.jms.ConnectionFactoryJNDIName>TopicConnectionFactory</transport.jms.ConnectionFactoryJNDIName>
             <transport.jms.DestinationType>topic</transport.jms.DestinationType>
             <java.naming.factory.initial>org.wso2.andes.jndi.PropertiesFileInitialContextFactory</java.naming.factory.initial>
             <connectionfactory.TopicConnectionFactory>amqp://<![CDATA[admin]]>:<![CDATA[admin]]>@clientid/carbon?brokerlist='tcp://${carbon.local.ip}:${jms.port}?'</connectionfactory.TopicConnectionFactory>
         </EventReceiverConfiguration>
     </EventHubConfigurations>


    <SyncRuntimeArtifactsGateway>
        <Enable>true</Enable>
        <GatewayLabels>
            <Label>Default</Label>
        </GatewayLabels>
        <ArtifactRetriever>DBRetriever</ArtifactRetriever>
        <RetryDuration>15000</RetryDuration>
        <DataRetrievalMode>async</DataRetrievalMode>
        <EventWaitingTime>5000</EventWaitingTime>
        <SkipList>
        <APIS>
            <API>_OpenService_.xml</API>
        </APIS>
        <Endpoints>
        </Endpoints>
        <Sequences>
            <Sequence>_auth_failure_handler_.xml</Sequence>
            <Sequence>_build_.xml</Sequence>
            <Sequence>_cors_request_handler_.xml</Sequence>
            <Sequence>dispatchSeq.xml</Sequence>
            <Sequence>fault.xml</Sequence>
            <Sequence>_graphql_failure_handler_.xml</Sequence>
            <Sequence>main.xml</Sequence>
            <Sequence>outDispatchSeq.xml</Sequence>
            <Sequence>_production_key_error_.xml</Sequence>
            <Sequence>_resource_mismatch_handler_.xml</Sequence>
            <Sequence>_sandbox_key_error_.xml</Sequence>
            <Sequence>_threat_fault_.xml</Sequence>
            <Sequence>_throttle_out_handler_.xml</Sequence>
            <Sequence>_token_fault_.xml</Sequence>
            <Sequence>webhooksFaultSequence.xml</Sequence>
            <Sequence>_block_api_handler_.xml</Sequence>
            <Sequence>_backend_failure_handler_.xml</Sequence>
            <Sequence>_opa_policy_failure_handler_.xml</Sequence>
        </Sequences>
        <LocalEntries>
        </LocalEntries>
        </SkipList>
        <EnableOnDemandLoadingAPIS>false</EnableOnDemandLoadingAPIS>
    </SyncRuntimeArtifactsGateway>

    <ProxyConfig>
        <Enable>false</Enable>
        <Host></Host>
        <Port></Port>
        <Username></Username>
        <Password></Password>
        <NonProxyHosts></NonProxyHosts>
        <Protocol></Protocol>
    </ProxyConfig>
     <!--This parameter is used to Enable the password changing feature in devportal. When this is enabled, a user can
      change his/her password via devportal. By default this feature is enabled.-->
     <EnableChangePassword>true</EnableChangePassword>




      <!-- Default Correlation Log Components -->
      <CorrelationLogComponents>
          <CorrelationLogComponent>http</CorrelationLogComponent>
          <CorrelationLogComponent>jdbc</CorrelationLogComponent>
          <CorrelationLogComponent>ldap</CorrelationLogComponent>
          <CorrelationLogComponent>synapse</CorrelationLogComponent>
          <CorrelationLogComponent>method-calls</CorrelationLogComponent>
      </CorrelationLogComponents>
</APIManager>
