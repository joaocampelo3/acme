{"version":3,"sources":["webpack:///./node_modules/react-markdown/lib/uri-transformer.js","webpack:///./node_modules/unist-util-stringify-position/index.js","webpack:///./node_modules/react-markdown/node_modules/vfile-message/index.js","webpack:///./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack:///./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack:///./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack:///./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack:///./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack:///./node_modules/react-markdown/node_modules/bail/index.js","webpack:///./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack:///./node_modules/react-markdown/node_modules/trough/index.js","webpack:///./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack:///./node_modules/micromark/lib/initialize/content.js","webpack:///./node_modules/micromark/lib/initialize/document.js","webpack:///./node_modules/micromark-util-subtokenize/index.js","webpack:///./node_modules/micromark-core-commonmark/lib/content.js","webpack:///./node_modules/micromark/lib/initialize/flow.js","webpack:///./node_modules/micromark/lib/initialize/text.js","webpack:///./node_modules/micromark/lib/create-tokenizer.js","webpack:///./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack:///./node_modules/micromark-core-commonmark/lib/list.js","webpack:///./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack:///./node_modules/micromark-factory-destination/index.js","webpack:///./node_modules/micromark-factory-label/index.js","webpack:///./node_modules/micromark-factory-title/index.js","webpack:///./node_modules/micromark-factory-whitespace/index.js","webpack:///./node_modules/micromark-core-commonmark/lib/definition.js","webpack:///./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack:///./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack:///./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack:///./node_modules/micromark-util-html-tag-name/index.js","webpack:///./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack:///./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack:///./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack:///./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack:///./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-end.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack:///./node_modules/micromark-core-commonmark/lib/attention.js","webpack:///./node_modules/micromark/lib/constructs.js","webpack:///./node_modules/micromark-core-commonmark/lib/autolink.js","webpack:///./node_modules/micromark-core-commonmark/lib/html-text.js","webpack:///./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack:///./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack:///./node_modules/micromark-core-commonmark/lib/code-text.js","webpack:///./node_modules/micromark/lib/preprocess.js","webpack:///./node_modules/mdast-util-from-markdown/lib/index.js","webpack:///./node_modules/micromark/lib/postprocess.js","webpack:///./node_modules/micromark/lib/parse.js","webpack:///./node_modules/react-markdown/node_modules/remark-parse/index.js","webpack:///./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/traverse.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/wrap.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack:///./node_modules/trim-lines/index.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack:///./node_modules/remark-rehype/node_modules/unist-util-visit/index.js","webpack:///./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack:///./node_modules/remark-rehype/lib/index.js","webpack:///./node_modules/react-markdown/lib/rehype-filter.js","webpack:///./node_modules/react-markdown/node_modules/unist-util-visit/index.js","webpack:///./node_modules/react-markdown/lib/ast-to-react.js","webpack:///./node_modules/react-markdown/lib/react-markdown.js","webpack:///./node_modules/react-markdown/node_modules/react-is/index.js","webpack:///./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js"],"names":["protocols","uriTransformer","uri","url","trim","first","charAt","colon","indexOf","index","length","protocol","slice","toLowerCase","stringifyPosition","value","position","point","line","column","pos","start","end","Error","reason","place","origin","parts","super","undefined","this","name","message","stack","fatal","source","ruleId","file","actual","expected","note","prototype","basename","path","ext","TypeError","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","JSON","stringify","proc","cwd","isUrl","fileURLOrPath","href","urlToPath","URL","error","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","options","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","dirname","join","assertPart","extname","stem","encoding","toString","part","sep","bail","isPlainObject","Object","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","parameters","fnExpectsCallback","done","apply","exception","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","key","arguments","assertUnfrozen","own","call","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","Array","isArray","addList","addPreset","assign","add","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","hasOwnProperty","keys","type","asyncName","Boolean","looksLikeAVFile","tokenize","effects","contentStart","attempt","parser","constructs","contentInitial","consume","enter","exit","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","ok","nok","document","disable","null","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","partial","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","text","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","splice","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","fromCharCode","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","all","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","identifier","labelAfter","titleConstruct","defined","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","content","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","definition","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","test","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","gap","tailExitIndex","headEnterIndex","search","fromMarkdown","config","configure","combined","extensions","extension","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","blockQuote","children","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlText","htmlTextData","image","alt","listItem","spread","_spread","checked","listItemValue","getData","parseInt","setData","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","replace","codeFencedFence","lang","onexithardbreak","referenceType","fragment","labelText","ancestor","string","resource","setextHeadingLineSequence","setextHeadingText","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","d","and","errorHandler","onExitError","parent","ordered","compiler","postprocess","concat","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","left","right","unknown","h","augment","one","handlers","passThrough","returnNode","unknownHandler","nodes","head","loose","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","blockquote","break","props","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","listLoose","wrapped","disabled","child","items","properties","root","table","rows","align","row","out","cellIndex","cell","last","lines","trimLines","toml","ignore","yaml","footnoteDefinition","factory","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","visitor","reverse","parents","visit","toUpperCase","hName","hProperties","hChildren","ctx","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","remove","unwrapDisallowed","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transform","transformLinkUri","parentSchema","schema","property","space","addProperty","listDepth","component","components","basic","Fragment","isValidElementType","linkTarget","target","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","style","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","createElement","count","find","commaSeparated","v","k","styleReplacer","parseStyle","attribute","$1","deprecated","to","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","func","arrayOf","bool","oneOfType","object","any","module","exports","u","b","for","c","e","f","g","l","m","n","p","q","t","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","getModuleId","typeOf"],"mappings":"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","file":"vendors~APIOverview~MDReactMarkdown.c8e68cd152f6972597f4.bundle.js","sourcesContent":["const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|NodeLike|Position|Point|null} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point|undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position|undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number|undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    /** @type {string} */\n    this.message = typeof reason === 'object' ? reason.message : reason\n    /** @type {string} */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n    this.position = position\n\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n    this.actual\n\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n    this.expected\n\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  constructor(value) {\n    /** @type {Options} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8']\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\n   *   understand it as (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n   * associates it with the file by adding it to `vfile.messages` and setting\n   * `message.file` to the current filepath.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates an informational message where\n   * `fatal` is set to `null`.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\n   * set to `true`, and then immediately throws it.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {never}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} MdastNode\n * @typedef {Extract<MdastNode, import('mdast').Parent>} MdastParent\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n *\n * @param {H} h\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} node\n * @param {MdastParent | null} parent\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @template {MdastNode} Node\n * @param {H} h\n * @param {Node} node\n * @returns {Node}\n */\nfunction returnNode(h, node) {\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {H} h\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').H} H\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @param {H} h\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @param {H} h\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * @param {H} h\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * @param {H} h\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalizeUri(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n * @typedef {import('mdast').Parent} Parent\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {List} node\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @param {H} h\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').H} H\n */\n\nimport {trimLines} from 'trim-lines'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))))\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {ThematicBreak} [node]\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName]\n *   Defines the tag name of an element.\n * @property {Properties} [hProperties]\n *   Defines the properties of an element.\n * @property {Array<Content>} [hChildren]\n *   Defines the (hast) children of an element.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\n *   unist data with embedded hast fields.\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData\n *   unist node with embedded hast data.\n *\n * @callback Handler\n *   Handle a node.\n * @param {H} h\n *   Handle context.\n * @param {any} node\n *   mdast node to handle.\n * @param {Parent|null} parent\n *   Parent of `node`.\n * @returns {Content|Array<Content>|null|undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Properties} props\n *   Properties.\n * @param {Array<Content>?} [children]\n *   hast content.\n * @returns {Element}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<Content>?} [children]\n *   hast content\n * @returns {Element}\n *   Compiled element.\n *\n * @typedef HFields\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {Properties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use to go back to a footnote call from the footnote section.\n * @property {(identifier: string) => Definition|null} definition\n *   Definition cache.\n * @property {Record<string, FootnoteDefinition>} footnoteById\n *   Footnote cache.\n * @property {Array<string>} footnoteOrder\n *   Order in which footnotes occur.\n * @property {Record<string, number>} footnoteCounts\n *   Counts the same footnote was used.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\n *   Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteLabelTagName='h2']\n *   HTML tag to use for the footnote label.\n *   Can be changed to match your document structure and play well with your choice of css.\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label.\n *   A 'sr-only' class is added by default to hide this from sighted users.\n *   Change it to make the label visible, or add classes for other purposes.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn mdast into hast.\n *\n * @param {MdastNode} tree\n *   mdast node.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {H}\n *   `h` function.\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @returns {Element|null}\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: h.footnoteLabelTagName,\n        properties: {\n          ...JSON.parse(JSON.stringify(h.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n"],"sourceRoot":""}