{"version":3,"sources":["webpack:///./node_modules/@graphiql/react/dist/onlineParser.es.js","webpack:///./node_modules/@graphiql/react/dist/Range.es.js","webpack:///./node_modules/@graphiql/react/dist/lint.es.js"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","onlineParser","options","eatWhitespace","stream","eatWhile","lexRules","parseRules","editorConfig","initialState","level","step","name","kind","type","rule","needsSeparator","prevState","pushRule","DOCUMENT","token","state","getToken","_a","inBlockstring","match","skipToEnd","length","popRule","needsAdvance","advanceRule","sol","tabSize","indentLevel","Math","floor","indentation","lex","SpecialParseRules","backupState","assign","test","levels","concat","slice","expected","separator","ofRule","call","update","style","unsuccessful","to","from","keys","i","Invalid","Comment","rules","ruleKind","TypeError","successful","isList","Array","isArray","kinds","CharacterStream","sourceText","this","getStartOfToken","_start","getCurrentPosition","_pos","eol","_sourceText","peek","charAt","next","char","eat","pattern","_testNextCharacter","isMatched","didEat","eatSpace","skipTo","position","consume","caseFold","RegExp","substr","startsWith","backUp","num","column","indent","whiteSpaces","pos","charCodeAt","current","character","Range","start","end","containsPosition","line","Position","lessThanOrEqualTo","specifiedSDLRules","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","filter","prototype","push","apply","error","message","indexOf","nodes","node","DIRECTIVE","DIAGNOSTIC_SEVERITY","invariant","condition","Error","getDiagnostics","query","externalFragments","_b","reduce","agg","range","getRange","locations","severity","source","validateQuery","validationErrorAnnotations","mapCat","annotations","deprecationWarningAnnotations","Warning","array","mapper","map","highlightedNodes","forEach","highlightNode","variable","loc","highlightLoc","getLocation","location","queryText","parser","startState","lines","split","SEVERITY","TYPE","registerHelper","text","validationRules","Pos"],"mappings":"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","file":"46.5ecc9b1a3045b7301b55.bundle.js","sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { Kind } from \"graphql\";\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n  lexRules: LexRules,\n  parseRules: ParseRules,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, \"onlineParser\");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*\"\"\"/)) {\n      state.inBlockstring = false;\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return \"ws\";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, \"Invalid\");\n    return \"invalidchar\";\n  }\n  if (token.kind === \"Comment\") {\n    pushRule(SpecialParseRules, state, \"Comment\");\n    return \"comment\";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === \"Punctuation\") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === \"function\" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === \"string\") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === \"Punctuation\") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, \"Invalid\");\n  return \"invalidchar\";\n}\n__name(getToken, \"getToken\");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, \"assign\");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError(\"Unknown rule: \" + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, \"pushRule\");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, \"popRule\");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, \"advanceRule\");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== \"string\" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, \"isList\");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, \"unsuccessful\");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, \"lex\");\nexport { onlineParser as o };\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nclass CharacterStream {\n  constructor(sourceText) {\n    this.getStartOfToken = () => this._start;\n    this.getCurrentPosition = () => this._pos;\n    this.eol = () => this._sourceText.length === this._pos;\n    this.sol = () => this._pos === 0;\n    this.peek = () => {\n      return this._sourceText.charAt(this._pos) ? this._sourceText.charAt(this._pos) : null;\n    };\n    this.next = () => {\n      const char = this._sourceText.charAt(this._pos);\n      this._pos++;\n      return char;\n    };\n    this.eat = (pattern) => {\n      const isMatched = this._testNextCharacter(pattern);\n      if (isMatched) {\n        this._start = this._pos;\n        this._pos++;\n        return this._sourceText.charAt(this._pos - 1);\n      }\n      return void 0;\n    };\n    this.eatWhile = (match) => {\n      let isMatched = this._testNextCharacter(match);\n      let didEat = false;\n      if (isMatched) {\n        didEat = isMatched;\n        this._start = this._pos;\n      }\n      while (isMatched) {\n        this._pos++;\n        isMatched = this._testNextCharacter(match);\n        didEat = true;\n      }\n      return didEat;\n    };\n    this.eatSpace = () => this.eatWhile(/[\\s\\u00a0]/);\n    this.skipToEnd = () => {\n      this._pos = this._sourceText.length;\n    };\n    this.skipTo = (position) => {\n      this._pos = position;\n    };\n    this.match = (pattern, consume = true, caseFold = false) => {\n      let token = null;\n      let match = null;\n      if (typeof pattern === \"string\") {\n        const regex = new RegExp(pattern, caseFold ? \"i\" : \"g\");\n        match = regex.test(this._sourceText.substr(this._pos, pattern.length));\n        token = pattern;\n      } else if (pattern instanceof RegExp) {\n        match = this._sourceText.slice(this._pos).match(pattern);\n        token = match === null || match === void 0 ? void 0 : match[0];\n      }\n      if (match != null) {\n        if (typeof pattern === \"string\" || match instanceof Array && this._sourceText.startsWith(match[0], this._pos)) {\n          if (consume) {\n            this._start = this._pos;\n            if (token && token.length) {\n              this._pos += token.length;\n            }\n          }\n          return match;\n        }\n      }\n      return false;\n    };\n    this.backUp = (num) => {\n      this._pos -= num;\n    };\n    this.column = () => this._pos;\n    this.indentation = () => {\n      const match = this._sourceText.match(/\\s*/);\n      let indent = 0;\n      if (match && match.length !== 0) {\n        const whiteSpaces = match[0];\n        let pos = 0;\n        while (whiteSpaces.length > pos) {\n          if (whiteSpaces.charCodeAt(pos) === 9) {\n            indent += 2;\n          } else {\n            indent++;\n          }\n          pos++;\n        }\n      }\n      return indent;\n    };\n    this.current = () => this._sourceText.slice(this._start, this._pos);\n    this._start = 0;\n    this._pos = 0;\n    this._sourceText = sourceText;\n  }\n  _testNextCharacter(pattern) {\n    const character = this._sourceText.charAt(this._pos);\n    let isMatched = false;\n    if (typeof pattern === \"string\") {\n      isMatched = character === pattern;\n    } else {\n      isMatched = pattern instanceof RegExp ? pattern.test(character) : pattern(character);\n    }\n    return isMatched;\n  }\n}\n__name(CharacterStream, \"CharacterStream\");\nclass Range {\n  constructor(start, end) {\n    this.containsPosition = (position) => {\n      if (this.start.line === position.line) {\n        return this.start.character <= position.character;\n      } else if (this.end.line === position.line) {\n        return this.end.character >= position.character;\n      } else {\n        return this.start.line <= position.line && this.end.line >= position.line;\n      }\n    };\n    this.start = start;\n    this.end = end;\n  }\n  setStart(line, character) {\n    this.start = new Position(line, character);\n  }\n  setEnd(line, character) {\n    this.end = new Position(line, character);\n  }\n}\n__name(Range, \"Range\");\nclass Position {\n  constructor(line, character) {\n    this.lessThanOrEqualTo = (position) => this.line < position.line || this.line === position.line && this.character <= position.character;\n    this.line = line;\n    this.character = character;\n  }\n  setLine(line) {\n    this.line = line;\n  }\n  setCharacter(character) {\n    this.character = character;\n  }\n}\n__name(Position, \"Position\");\nexport { CharacterStream as C, Position as P, Range as R };\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport { Kind, specifiedRules, NoUnusedFragmentsRule, ExecutableDefinitionsRule, KnownFragmentNamesRule, validate, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, print, parse, GraphQLError, NoDeprecatedCustomRule } from \"graphql\";\nimport \"./index.es.js\";\nimport { R as Range, P as Position, C as CharacterStream } from \"./Range.es.js\";\nimport { o as onlineParser } from \"./onlineParser.es.js\";\nimport \"react\";\nimport \"react-dom\";\nconst specifiedSDLRules = [\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule\n];\nfunction validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n  const rules = specifiedRules.filter((rule) => {\n    if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n      return false;\n    }\n    if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n      return false;\n    }\n    return true;\n  });\n  if (customRules) {\n    Array.prototype.push.apply(rules, customRules);\n  }\n  if (isSchemaDocument) {\n    Array.prototype.push.apply(rules, specifiedSDLRules);\n  }\n  const errors = validate(schema, ast, rules);\n  return errors.filter((error) => {\n    if (error.message.indexOf(\"Unknown directive\") !== -1 && error.nodes) {\n      const node = error.nodes[0];\n      if (node && node.kind === Kind.DIRECTIVE) {\n        const name = node.name.value;\n        if (name === \"arguments\" || name === \"argumentDefinitions\") {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n}\n__name(validateWithCustomRules, \"validateWithCustomRules\");\nconst SEVERITY$1 = {\n  Error: \"Error\",\n  Warning: \"Warning\",\n  Information: \"Information\",\n  Hint: \"Hint\"\n};\nconst DIAGNOSTIC_SEVERITY = {\n  [SEVERITY$1.Error]: 1,\n  [SEVERITY$1.Warning]: 2,\n  [SEVERITY$1.Information]: 3,\n  [SEVERITY$1.Hint]: 4\n};\nconst invariant = /* @__PURE__ */ __name((condition, message) => {\n  if (!condition) {\n    throw new Error(message);\n  }\n}, \"invariant\");\nfunction getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n  var _a, _b;\n  let ast = null;\n  if (externalFragments) {\n    if (typeof externalFragments === \"string\") {\n      query += \"\\n\\n\" + externalFragments;\n    } else {\n      query += \"\\n\\n\" + externalFragments.reduce((agg, node) => {\n        agg += print(node) + \"\\n\\n\";\n        return agg;\n      }, \"\");\n    }\n  }\n  try {\n    ast = parse(query);\n  } catch (error) {\n    if (error instanceof GraphQLError) {\n      const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, query);\n      return [\n        {\n          severity: DIAGNOSTIC_SEVERITY.Error,\n          message: error.message,\n          source: \"GraphQL: Syntax\",\n          range\n        }\n      ];\n    }\n    throw error;\n  }\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n__name(getDiagnostics, \"getDiagnostics\");\nfunction validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n  if (!schema) {\n    return [];\n  }\n  const validationErrorAnnotations = mapCat(validateWithCustomRules(schema, ast, customRules, isRelayCompatMode), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Error, \"Validation\"));\n  const deprecationWarningAnnotations = mapCat(validate(schema, ast, [NoDeprecatedCustomRule]), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Warning, \"Deprecation\"));\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\n__name(validateQuery, \"validateQuery\");\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}\n__name(mapCat, \"mapCat\");\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n  const highlightedNodes = [];\n  error.nodes.forEach((node) => {\n    const highlightNode = node.kind !== \"Variable\" && \"name\" in node && node.name !== void 0 ? node.name : \"variable\" in node && node.variable !== void 0 ? node.variable : node;\n    if (highlightNode) {\n      invariant(error.locations, \"GraphQL validation error requires locations.\");\n      const loc = error.locations[0];\n      const highlightLoc = getLocation(highlightNode);\n      const end = loc.column + (highlightLoc.end - highlightLoc.start);\n      highlightedNodes.push({\n        source: `GraphQL: ${type}`,\n        message: error.message,\n        severity,\n        range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end))\n      });\n    }\n  });\n  return highlightedNodes;\n}\n__name(annotations, \"annotations\");\nfunction getRange(location, queryText) {\n  const parser = onlineParser();\n  const state = parser.startState();\n  const lines = queryText.split(\"\\n\");\n  invariant(lines.length >= location.line, \"Query text must have more lines than where the error happened\");\n  let stream = null;\n  for (let i = 0; i < location.line; i++) {\n    stream = new CharacterStream(lines[i]);\n    while (!stream.eol()) {\n      const style = parser.token(stream, state);\n      if (style === \"invalidchar\") {\n        break;\n      }\n    }\n  }\n  invariant(stream, \"Expected Parser stream to be available.\");\n  const line = location.line - 1;\n  const start = stream.getStartOfToken();\n  const end = stream.getCurrentPosition();\n  return new Range(new Position(line, start), new Position(line, end));\n}\n__name(getRange, \"getRange\");\nfunction getLocation(node) {\n  const typeCastedNode = node;\n  const location = typeCastedNode.loc;\n  invariant(location, \"Expected ASTNode to have a location.\");\n  return location;\n}\n__name(getLocation, \"getLocation\");\nconst SEVERITY = [\"error\", \"warning\", \"information\", \"hint\"];\nconst TYPE = {\n  \"GraphQL: Validation\": \"validation\",\n  \"GraphQL: Deprecation\": \"deprecation\",\n  \"GraphQL: Syntax\": \"syntax\"\n};\nCodeMirror.registerHelper(\"lint\", \"graphql\", (text, options) => {\n  const schema = options.schema;\n  const rawResults = getDiagnostics(text, schema, options.validationRules, void 0, options.externalFragments);\n  const results = rawResults.map((error) => ({\n    message: error.message,\n    severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n    type: error.source ? TYPE[error.source] : void 0,\n    from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n    to: CodeMirror.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});\n"],"sourceRoot":""}