{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/AsyncApiConsole/WebhookSubscriptionUI.jsx","webpack:///./source/src/app/components/Apis/Details/AsyncApiConsole/GenericSubscriptionUI.jsx","webpack:///./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiUI.jsx","webpack:///./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiConsole.jsx"],"names":["reducer","state","field","value","WebhookSubscriptionUI","props","intl","useIntl","verb","topic","type","toLowerCase","trimmedVerb","substr","useStyles","makeStyles","theme","backgroundColor","custom","resourceChipColors","bootstrapRoot","padding","marginTop","spacing","bootstrapInput","borderRadius","palette","common","white","border","marginBottom","width","transition","transitions","create","borderColor","boxShadow","fontSize","bootstrapCurl","curlGenerator","color","fontFamily","fontWeight","subscriptionSummary","Utils","hexToRGBA","maxHeight","customButton","subscription","generateGenericWHSubscriptionCurl","initialSubscriptionState","name","secret","lease","mode","callback","curl","setCurl","useState","formError","setFormError","dispatch","useReducer","handleChange","e","target","classes","className","expandIcon","aria-controls","id","Grid","container","direction","justify","alignItems","item","md","Badge","invisible","variant","Button","disableFocusRipple","size","toUpperCase","Typography","display","style","margin","gutterBottom","wrap","xs","RadioGroup","aria-label","row","onChange","FormControlLabel","control","Radio","label","formatMessage","defaultMessage","TextField","error","required","placeholder","fullWidth","InputProps","disableUnderline","root","input","InputLabelProps","shrink","defaultValue","multiline","bootstrapFormLabel","paddingRight","onClick","length","text","onCopy","Alert","info","GenericSubscriptionUI","generateGenericSubscriptionCommand","expandable","command","setCommand","pointerEvents","endpointSelectorRoot","paddingBottom","selectList","minWidth","maxWidth","AsyncApiUI","authorizationHeader","URLs","securitySchemeType","accessTokenProvider","api","useContext","ApiContext","isAdvertised","advertiseInfo","advertised","initialEndpoint","http","https","CONSTANTS","API_TYPES","WS","ws","wss","allTopics","setAllTopics","endPoint","setEndpoint","useEffect","apiID","Api","getAllTopics","then","response","body","catch","console","log","handleServerChange","event","generateAccessToken","token","encodeURIComponent","adveritsed","getTopicName","topicName","charAt","substring","generateWSSubscriptionCommand","includes","wscat","generateSSESubscriptionCommand","generateASYNCSubscriptionCommand","FormControl","InputLabel","Select","displayEmpty","Object","entries","map","key","MenuItem","WEBSUB","list","index","SSE","ASYNC","Progress","paper","grid","justifyContent","userNotificationPaper","titleSub","marginLeft","paddingTop","AsyncApiConsole","setSecurityScheme","selectedEnvironment","setSelectedEnvironment","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","environments","setEnvironments","scopes","setScopes","labels","setLabels","username","setUsername","password","setPassword","selectedKeyType","setSelectedKey","keys","setKeys","sandboxApiKey","setSandboxApiKey","productionApiKey","setProductionApiKey","environmentObject","endpointURLs","setURLs","notFound","setNotFound","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","user","AuthManager","getUser","updateAccessToken","accessToken","get","getAPIById","apiResponse","apiData","obj","environment","endpoint","environmentName","Label","scopeList","scope","status","isApiKeyEnabled","securityScheme","generateUrls","url","urlJson","protocol","split","Paper","component","Icon","TryOutController","setSelectedKeyType","selectedKey","isUpdateToken","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","getURLs","btoa","propTypes","PropTypes","shape","string","isRequired"],"mappings":"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","file":"60.3bef7afb0fc2dcf17493.bundle.js","sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useReducer } from 'react';\nimport Accordion from '@material-ui/core/ExpansionPanel';\nimport AccordionDetails from '@material-ui/core/ExpansionPanelDetails';\nimport AccordionSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport AccordionActions from '@material-ui/core/ExpansionPanelActions';\nimport Button from '@material-ui/core/Button';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { makeStyles } from '@material-ui/core/styles/index';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport { RadioGroup } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Badge from '@material-ui/core/Badge';\n\nfunction reducer(state, { field, value }) {\n    return { ...state, [field]: value };\n}\n\nfunction WebhookSubscriptionUI(props) {\n    const intl = useIntl();\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n        return {\n            bootstrapRoot: {\n                padding: 0,\n                'label + &': {\n                    marginTop: theme.spacing(1),\n                },\n            },\n            bootstrapInput: {\n                borderRadius: 4,\n                backgroundColor: theme.palette.common.white,\n                border: '1px solid #ced4da',\n                padding: '5px 12px',\n                marginTop: '11px',\n                marginBottom: '11px',\n                width: '100%',\n                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                '&:focus': {\n                    borderColor: '#80bdff',\n                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                },\n                fontSize: 12,\n            },\n            bootstrapCurl: {\n                borderRadius: 4,\n                backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                color: theme.custom.curlGenerator.color,\n                border: '1px solid #ced4da',\n                padding: '5px 12px',\n                marginTop: '11px',\n                marginBottom: '11px',\n                width: '100%',\n                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                '&:focus': {\n                    borderColor: '#80bdff',\n                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                },\n                fontSize: 12,\n                fontFamily: 'monospace',\n                fontWeight: 600,\n            },\n            subscriptionSummary: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                maxHeight: '40px',\n                borderColor: '#80bdff',\n                '&$expanded': {\n                    maxHeight: '40px',\n                },\n            },\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n            subscription: {\n                marginBottom: '10px',\n                border: `1px solid ${backgroundColor}`,\n            },\n        };\n    });\n    const { generateGenericWHSubscriptionCurl, topic } = props;\n    const initialSubscriptionState = {\n        topic: topic.name,\n        secret: null,\n        lease: 50000,\n        mode: 'subscribe',\n        callback: null,\n    };\n    const [curl, setCurl] = useState(generateGenericWHSubscriptionCurl(initialSubscriptionState));\n    const [formError, setFormError] = useState(false);\n    const [state, dispatch] = useReducer(reducer, initialSubscriptionState);\n\n    const handleClick = () => {\n        if (!state.callback || state.callback.length < 1) {\n            setFormError(true);\n        } else {\n            setFormError(false);\n            setCurl(generateGenericWHSubscriptionCurl(state));\n        }\n    };\n\n    const handleChange = (e) => {\n        dispatch({ field: e.target.name, value: e.target.value });\n    };\n\n    const classes = useStyles();\n\n    return (\n        <Accordion className={classes.subscription}>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='wh-subscription-content'\n                id='wh-subscription-header'\n                className={classes.subscriptionSummary}\n            >\n                <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                className={classes.customButton}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap'>\n                    <Grid item xs={6}>\n                        <RadioGroup aria-label='mode' name='mode' value={state.mode} row onChange={handleChange}>\n                            <FormControlLabel\n                                value='subscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Subscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Subscribe',\n                                })}\n                            />\n                            <FormControlLabel\n                                value='unsubscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Unsubscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Unsubscribe',\n                                })}\n                            />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                            name='callback'\n                            id='standard-full-width'\n                            label={intl.formatMessage({\n                                defaultMessage: 'Callback URL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.callback',\n                            })}\n                            error={formError}\n                            required\n                            placeholder='www.webhook.site'\n                            onChange={handleChange}\n                            fullWidth\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: classes.bootstrapRoot,\n                                    input: classes.bootstrapInput,\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                    {state.mode === 'subscribe' && (\n                        <>\n                            <Grid item xs={6}>\n                                <TextField\n                                    name='secret'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Secret',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.secret',\n                                    })}\n                                    placeholder='secret'\n                                    onChange={handleChange}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: classes.bootstrapRoot,\n                                            input: classes.bootstrapInput,\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    name='lease'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Lease Seconds',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.lease',\n                                    })}\n                                    onChange={handleChange}\n                                    defaultValue={50000}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: classes.bootstrapRoot,\n                                            input: classes.bootstrapInput,\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12}>\n                        <TextField\n                            label={intl.formatMessage({\n                                defaultMessage: 'cURL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.curl',\n                            })}\n                            defaultValue=''\n                            value={curl}\n                            fullWidth\n                            multiline\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: classes.bootstrapRoot,\n                                    input: classes.bootstrapCurl,\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                                className: classes.bootstrapFormLabel,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <CopyToClipboard\n                    text={curl}\n                    onCopy={() => Alert.info(intl.formatMessage({\n                        defaultMessage: 'cURL copied',\n                        id: 'Apis.Details.AsyncApiConsole.Webhooks.curl.copied',\n                    }))}\n                >\n                    <Button size='small'>\n                        <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                    </Button>\n                </CopyToClipboard>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n\nexport default WebhookSubscriptionUI;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport Accordion from '@material-ui/core/ExpansionPanel';\nimport AccordionDetails from '@material-ui/core/ExpansionPanelDetails';\nimport AccordionSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport AccordionActions from '@material-ui/core/ExpansionPanelActions';\nimport Button from '@material-ui/core/Button';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { makeStyles } from '@material-ui/core/styles/index';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Grid from '@material-ui/core/Grid';\nimport Badge from '@material-ui/core/Badge';\n\nexport default function GenericSubscriptionUI(props) {\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n        return {\n            bootstrapRoot: {\n                padding: 0,\n                'label + &': {\n                    marginTop: theme.spacing(1),\n                },\n            },\n            bootstrapCurl: {\n                borderRadius: 4,\n                backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                color: theme.custom.curlGenerator.color,\n                border: '1px solid #ced4da',\n                padding: '5px 12px',\n                marginTop: '11px',\n                marginBottom: '11px',\n                width: '100%',\n                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                '&:focus': {\n                    borderColor: '#80bdff',\n                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                },\n                fontSize: 12,\n                fontFamily: 'monospace',\n                fontWeight: 600,\n            },\n            subscriptionSummary: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                maxHeight: '40px',\n                '&$expanded': {\n                    maxHeight: '40px',\n                },\n            },\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n            subscription: {\n                marginBottom: '10px',\n                border: `1px solid ${backgroundColor}`,\n            },\n        };\n    });\n    const { generateGenericSubscriptionCommand, topic, expandable } = props;\n    const [command, setCommand] = useState(generateGenericSubscriptionCommand(topic));\n\n    const handleClick = () => {\n        setCommand(generateGenericSubscriptionCommand(topic));\n    };\n\n    const classes = useStyles();\n\n    return (\n        <Accordion className={classes.subscription} style={{ pointerEvents: expandable ? 'auto' : 'none' }}>\n            <AccordionSummary\n                expandIcon={expandable && (<ExpandMoreIcon />)}\n                aria-controls='generic-subscription-content'\n                id='generic-subscription-header'\n                className={classes.subscriptionSummary}\n            >\n                <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                className={classes.customButton}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap'>\n                    <TextField\n                        label='cURL'\n                        defaultValue=''\n                        value={command}\n                        multiline\n                        InputProps={{\n                            disableUnderline: true,\n                            classes: {\n                                root: classes.bootstrapRoot,\n                                input: classes.bootstrapCurl,\n                            },\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                            className: classes.bootstrapFormLabel,\n                        }}\n                    />\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <CopyToClipboard\n                    text={command}\n                    onCopy={() => Alert.info(\n                        <FormattedMessage id='Apis.Details.AsyncApiConsole.Copied' defaultMessage='cURL copied' />,\n                    )}\n                >\n                    <Button size='small'>\n                        <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                    </Button>\n                </CopyToClipboard>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport WebhookSubscriptionUI from './WebhookSubscriptionUI';\nimport GenericSubscriptionUI from './GenericSubscriptionUI';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from \"@material-ui/core/styles/index\";\nimport CONSTANTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useIntl } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => (\n    {\n        endpointSelectorRoot: {\n            paddingBottom: '20px',\n        },\n        // this styling is used to resemble the switch to swagger-ui switch\n        selectList: {\n            minWidth: '130px',\n            maxWidth: '100%',\n            border: '2px solid #41444e',\n            fontFamily: 'sans-serif',\n            fontSize: '14px',\n            fontWeight: 700,\n            padding: '2px 2px 2px 10px',\n            borderRadius: '4px',\n            color: '#3b4151',\n        }\n    }\n));\nexport default function AsyncApiUI(props) {\n    const classes = useStyles();\n    const intl = useIntl();\n    const {\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        accessTokenProvider,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const isAdvertised = api.advertiseInfo && api.advertiseInfo.advertised;\n\n    let initialEndpoint;\n    initialEndpoint = URLs && (URLs.http || URLs.https);\n    if (api.type === CONSTANTS.API_TYPES.WS) {\n        initialEndpoint = URLs && (URLs.ws || URLs.wss);\n    }\n\n    let expandable = true;\n    if (!URLs || (!URLs.http && !URLs.https)) {\n        expandable = false;\n    }\n\n    const [allTopics, setAllTopics] = useState('');\n    const [endPoint, setEndpoint] = useState(initialEndpoint);\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promisedTopics = apiClient.getAllTopics(apiID);\n        promisedTopics.then((response) => {\n            setAllTopics(response.body);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.AsyncApiConsole.AsyncApiUI.topics.get.error',\n                defaultMessage: 'Error while retrieving topics for the API.',\n            }));\n        });\n    }, []);\n\n    const handleServerChange = (event) => {\n        setEndpoint(event.target.value);\n    };\n\n    function generateAccessToken() {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessTokenProvider();\n        } else if (securitySchemeType === 'BASIC') {\n            token = 'Basic ' + accessTokenProvider();\n        } else if (isAdvertised) {\n            token = accessTokenProvider();\n        } else {\n            token = 'Bearer ' + accessTokenProvider();\n        }\n        return token;\n    }\n\n    function generateGenericWHSubscriptionCurl(subscription) {\n        const {\n            topic, callback, secret, mode, lease,\n        } = subscription;\n        const token = generateAccessToken();\n        if (mode === 'subscribe') {\n            let curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}'`;\n            if (secret) {\n                curl += ` -d 'hub.secret=${secret}'`;\n            }\n            if (lease) {\n                curl += ` -d 'hub.lease_seconds=${lease}'`;\n            }\n            if (api.advertiseInfo && api.advertiseInfo.adveritsed && authorizationHeader !== '') {\n                curl += ` -H '${authorizationHeader}: ${token}'`;\n            } else {\n                curl += ` -H 'Authorization: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' - 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X POST '${endPoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function getTopicName(topic) {\n        let topicName = topic.name;\n        // Remove the / from the topic name\n        if (topicName.charAt(0) === '/') {\n            topicName = topicName.substring(1);\n        }\n        return topicName;\n    }\n\n    function generateWSSubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let wscat = `wscat -c '${endPoint}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        } else {\n            let wscat = `wscat -c '${endPoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        }\n    }\n\n    function generateSSESubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endPoint}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function generateASYNCSubscriptionCommand(topic) {\n        const token = generateAccessToken();\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endPoint}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endPoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    if (!allTopics) {\n        return <Progress />;\n    } else {\n        return (\n            <>\n                <FormControl className={classes.endpointSelectorRoot}>\n                    <InputLabel>Servers</InputLabel>\n                    <Select\n                        className={classes.selectList}\n                        id=\"api-endpoint-select\"\n                        value={endPoint}\n                        displayEmpty\n                        onChange={handleServerChange}\n                    >\n                        {Object.entries(URLs).map(([key, value]) => {\n                            if (value) {\n                                return <MenuItem value={value} key={key}>{value}</MenuItem>;\n                            }\n                        })}\n                    </Select>\n                </FormControl>\n\n                {api.type === CONSTANTS.API_TYPES.WEBSUB && allTopics.list.map((topic, index) => (\n                    <WebhookSubscriptionUI\n                        topic={topic}\n                        generateGenericWHSubscriptionCurl={generateGenericWHSubscriptionCurl}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.SSE && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateSSESubscriptionCommand}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.WS && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateWSSubscriptionCommand}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.ASYNC && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateASYNCSubscriptionCommand}\n                        topic={topic}\n                        expandable={expandable}\n                    />\n                ))}\n            </>\n        );\n    }\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AuthManager from 'AppData/AuthManager';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport TryOutController from '../ApiConsole/TryOutController';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport AsyncApiUI from './AsyncApiUI';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\nexport default function AsyncApiConsole() {\n    const intl = useIntl();\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const [securitySchemeType, setSecurityScheme] = useState('OAUTH');\n    const [selectedEnvironment, setSelectedEnvironment] = useState();\n    const [productionAccessToken, setProductionAccessToken] = useState();\n    const [sandboxAccessToken, setSandboxAccessToken] = useState();\n    const [environments, setEnvironments] = useState(null);\n    const [scopes, setScopes] = useState(null);\n    const [labels, setLabels] = useState(null);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedKeyType, setSelectedKey] = useState('PRODUCTION');\n    const [keys, setKeys] = useState([]);\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject.length > 0 ? environmentObject[0].URLs : []);\n    const [notFound, setNotFound] = useState(false);\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n\n    const user = AuthManager.getUser();\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseAPI = apiClient.getAPIById(apiID);\n        promiseAPI\n            .then((apiResponse) => {\n                const apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    const environment = apiData.endpointURLs.map((endpoint) => {\n                        return endpoint.environmentName;\n                    });\n                    setEnvironments(environment);\n                } else {\n                    setEnvironments([]);\n                }\n                if (apiData.labels) {\n                    const Label = apiData.labels.map((label) => {\n                        return label.name;\n                    });\n                    setLabels(Label);\n                } else {\n                    setLabels([]);\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => {\n                        return scope.name;\n                    });\n                    setScopes(scopeList);\n                } else {\n                    setScopes([]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Overview.documents.error.occurred',\n                        defaultMessage: 'Error occurred while retrieving the API',\n                    }));\n                }\n                setScopes([]);\n                setEnvironments([]);\n                setLabels([]);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n    }, []);\n\n    /**\n     * Load the access token for given key type\n     */\n    function updateAccessToken() {\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        if (selectedKeyType === 'PRODUCTION') {\n            setProductionAccessToken(accessToken);\n        } else {\n            setSandboxAccessToken(accessToken);\n        }\n    }\n\n    /**\n     * set Password\n     * @param {*} selectedKey\n     * @param {*} isUpdateToken\n     */\n    function setSelectedKeyType(selectedKey, isUpdateToken) {\n        if (isUpdateToken && (!api.advertiseInfo || !api.advertiseInfo.advertised)) {\n            setSelectedKey(selectedKey, updateAccessToken);\n        } else {\n            setSelectedKey(selectedKey);\n        }\n    }\n\n    function accessTokenProvider() {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    if (api === null || !scopes || !labels || !environments) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.Api.Unavailable' defaultMessage='API Not Found !' />;\n    }\n\n    let isApiKeyEnabled = false;\n\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n        }\n    }\n\n    if (api.advertiseInfo && api.advertiseInfo.advertised) {\n        authorizationHeader = advAuthHeader;\n    }\n\n    const generateUrls = (url) => {\n        const urlJson = {\n            http: null,\n            https: null,\n            ws: null,\n            wss: null,\n        };\n        const [protocol] = url.split('://');\n        urlJson[protocol] = url;\n        return urlJson;\n    };\n\n    const getURLs = () => {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            if (selectedEndpoint === 'PRODUCTION') {\n                return generateUrls(api.advertiseInfo.apiExternalProductionEndpoint);\n            } else if (selectedEndpoint === 'SANDBOX') {\n                return generateUrls(api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return URLs;\n    };\n\n    return (\n        <>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>info</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                        + 'in and subscribe to the API to generate an access token. If you already '\n                                        + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                </Grid>\n                <TryOutController\n                    setSecurityScheme={setSecurityScheme}\n                    securitySchemeType={securitySchemeType}\n                    setSelectedEnvironment={setSelectedEnvironment}\n                    selectedEnvironment={selectedEnvironment}\n                    productionAccessToken={productionAccessToken}\n                    setProductionAccessToken={setProductionAccessToken}\n                    sandboxAccessToken={sandboxAccessToken}\n                    setSandboxAccessToken={setSandboxAccessToken}\n                    environments={environments}\n                    scopes={scopes}\n                    labels={labels}\n                    setUsername={setUsername}\n                    setPassword={setPassword}\n                    username={username}\n                    password={password}\n                    setSelectedKeyType={setSelectedKeyType}\n                    selectedKeyType={selectedKeyType}\n                    setKeys={setKeys}\n                    setURLs={setURLs}\n                    setProductionApiKey={setProductionApiKey}\n                    setSandboxApiKey={setSandboxApiKey}\n                    productionApiKey={productionApiKey}\n                    sandboxApiKey={sandboxApiKey}\n                    environmentObject={environmentObject}\n                    setAdvAuthHeader={setAdvAuthHeader}\n                    setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                    advAuthHeader={advAuthHeader}\n                    advAuthHeaderValue={advAuthHeaderValue}\n                    setSelectedEndpoint={setSelectedEndpoint}\n                    selectedEndpoint={selectedEndpoint}\n                    api={api}\n                    URLs={null}\n                />\n            </Paper>\n            <Paper className={classes.paper}>\n                <AsyncApiUI\n                    authorizationHeader={authorizationHeader}\n                    URLs={getURLs()}\n                    securitySchemeType={securitySchemeType}\n                    accessTokenProvider={accessTokenProvider}\n                />\n            </Paper>\n        </>\n    );\n}\n\nAsyncApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"sourceRoot":""}