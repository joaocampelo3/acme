{"version":3,"sources":["webpack:///./node_modules/@graphiql/react/dist/onlineParser.es.js","webpack:///./node_modules/@graphiql/react/dist/mode.es2.js"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","onlineParser","options","eatWhitespace","stream","eatWhile","lexRules","parseRules","editorConfig","initialState","level","step","name","kind","type","rule","needsSeparator","prevState","pushRule","DOCUMENT","token","state","getToken","_a","inBlockstring","match","skipToEnd","length","popRule","needsAdvance","advanceRule","sol","tabSize","indentLevel","Math","floor","indentation","lex","SpecialParseRules","backupState","assign","test","levels","concat","slice","expected","separator","ofRule","call","update","style","unsuccessful","to","from","keys","i","Invalid","Comment","rules","ruleKind","TypeError","successful","isList","Array","isArray","kinds","indent","textAfter","_b","this","electricInput","config","indentUnit","defineMode","parser","eatSpace","LexRules","ParseRules","startState","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","Entry","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField"],"mappings":"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","file":"50.269467b4a4670933379d.bundle.js","sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { Kind } from \"graphql\";\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n  lexRules: LexRules,\n  parseRules: ParseRules,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, \"onlineParser\");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*\"\"\"/)) {\n      state.inBlockstring = false;\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return \"ws\";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, \"Invalid\");\n    return \"invalidchar\";\n  }\n  if (token.kind === \"Comment\") {\n    pushRule(SpecialParseRules, state, \"Comment\");\n    return \"comment\";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === \"Punctuation\") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === \"function\" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === \"string\") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === \"Punctuation\") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, \"Invalid\");\n  return \"invalidchar\";\n}\n__name(getToken, \"getToken\");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, \"assign\");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError(\"Unknown rule: \" + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, \"pushRule\");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, \"popRule\");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, \"advanceRule\");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== \"string\" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, \"isList\");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, \"unsuccessful\");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, \"lex\");\nexport { onlineParser as o };\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport \"graphql\";\nimport { p, l as list, t } from \"./index.es.js\";\nimport { o as onlineParser } from \"./onlineParser.es.js\";\nimport \"react\";\nimport \"react-dom\";\nCodeMirror.defineMode(\"graphql-results\", (config) => {\n  const parser = onlineParser({\n    eatWhitespace: (stream) => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: \"brace\",\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: \"[]{}\"\n    }\n  };\n});\nfunction indent(state, textAfter) {\n  var _a, _b;\n  const levels = state.levels;\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n__name(indent, \"indent\");\nconst LexRules = {\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  Keyword: /^true|false|null/\n};\nconst ParseRules = {\n  Document: [p(\"{\"), list(\"Entry\", p(\",\")), p(\"}\")],\n  Entry: [t(\"String\", \"def\"), p(\":\"), \"Value\"],\n  Value(token) {\n    switch (token.kind) {\n      case \"Number\":\n        return \"NumberValue\";\n      case \"String\":\n        return \"StringValue\";\n      case \"Punctuation\":\n        switch (token.value) {\n          case \"[\":\n            return \"ListValue\";\n          case \"{\":\n            return \"ObjectValue\";\n        }\n        return null;\n      case \"Keyword\":\n        switch (token.value) {\n          case \"true\":\n          case \"false\":\n            return \"BooleanValue\";\n          case \"null\":\n            return \"NullValue\";\n        }\n        return null;\n    }\n  },\n  NumberValue: [t(\"Number\", \"number\")],\n  StringValue: [t(\"String\", \"string\")],\n  BooleanValue: [t(\"Keyword\", \"builtin\")],\n  NullValue: [t(\"Keyword\", \"keyword\")],\n  ListValue: [p(\"[\"), list(\"Value\", p(\",\")), p(\"]\")],\n  ObjectValue: [p(\"{\"), list(\"ObjectField\", p(\",\")), p(\"}\")],\n  ObjectField: [t(\"String\", \"property\"), p(\":\"), \"Value\"]\n};\n"],"sourceRoot":""}