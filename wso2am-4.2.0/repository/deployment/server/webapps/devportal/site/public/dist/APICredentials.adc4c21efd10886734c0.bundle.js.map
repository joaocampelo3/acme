{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenExchangeKeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/OriginalDevportalDetails.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","useState","handleClose","handleChange","event","Button","variant","color","startIcon","onClick","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","formatMessage","value","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","Typography","shape","func","bool","defaultProps","AppConfiguration","classes","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","pkceMandatory","pkceSupportPlain","bypassClientCredentials","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","useEffect","TableRow","TableCell","component","scope","className","leftCol","Box","maxWidth","type","multiple","root","removeHelperPadding","select","helperText","values","map","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","onAdd","tag","chipRenderer","size","onDelete","filter","oldScope","style","float","display","notFound","instanceOf","Object","any","injectIntl","withStyles","theme","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","button","marginLeft","quotaHelp","position","checkboxWrapper","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","mode","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","field","newRequest","cloneDeep","newGrantTypes","keyManager","includes","Validation","validate","error","clonedAdditionalProperties","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","default","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","data-testid","placeholder","length","validating","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","useStyles","makeStyles","code","background","palette","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","jwtToken","defaultTokenEndpoint","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","alias","Fragment","ViewKeys","accessTokenRequest","that","elementName","data","preventDefault","showToken","keyType","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert","body","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","getKeys","componentDidUpdate","prevProps","fullScreen","tokenType","summary","initialToken","initialValidityTime","initialScopes","Loading","csCkKeys","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","getContrastText","paper","marginTop","marginRight","keyState","states","REJECTED","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","reducer","newValue","TokenExchangeKeyConfiguration","setShowCS","setShowToken","setShowCurl","setShowSecretGen","setNotFound","setIsUpdating","isResidenceTokenAvailable","setIsResidenceTokenAvailable","initialState","tokenScope","externalIDPToken","externalIDPTokenError","initialExecution","dispatch","useReducer","validateExternalIDPToken","selectedIdPType","tableHeader","selectedIdpType","allowedAudience","rows","FormHelperTextProps","helperTextError","textField","isTokenExchange","generateWrapper","bottomInfo","owner","stepLabel","alignSelf","stepContent","keyLabel","idpGrid","textAlign","avatar","height","border","copyIconStyle","hr","divCenter","lineHeight","TabPanel","index","other","role","hidden","p","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","selectedGrantsByDefault","gt","push","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","selectdKM","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","isExchangeTokenError","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","isTokenExchangeEnabled","isEnabled","keymanager","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","isKeyManagerAllowed","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","getUser","Progress","isResidentKeyManagerTokensAvailable","has","residentKMs","cleanUpInfoText","cleanUpButton","AppBar","handleTabChange","indicatorColor","textColor","scrollButtons","displayName","tabPanel","subTitle","ml","m","enableTokenHashing","setValidating","warningIcon","kmName","RadioGroup","Radio","main","keyConfigWrapper","muiFormGroupRoot","appContent","genericDisplayDialog","handleClick","heading","caption","buttonText","OriginalDevportalDetails","originalDevPortalUrl","Paper","elevation","Link","rel","href","originalDevPortalLink","launchIcon","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","app","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","classNames","activeLink","colSpan","selectedWrapper","A200","withTheme","Credentials","api","applicationsAvailable","context","subscriptionRequest","newSubscriptionRequest","throttlingPolicyList","tiers","tierName","expanded","apiType","Api","isSubscribing","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","isSetAllorResidentKeyManagers","md","lg","advertiseInfo","advertised","handleExpandClick","titleSub","isSubscriptionAvailable","pointerEvents","addLinkWrapper","RouterLink","descWrapper","GenericDisplayDialog","goToWizard","generateCredentialWrapper","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","contextType","ApiContext","custom","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","borderRadius"],"mappings":"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","file":"APICredentials.adc4c21efd10886734c0.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\nimport ChipInput from 'material-ui-chip-input';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain',\n            defaultMessage: 'Support PKCE Plain text',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials',\n            defaultMessage: 'Public client',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory.tooltip',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain.tooltip',\n            defaultMessage: 'S256 is recommended, plain text too can be used.',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials.tooltip',\n            defaultMessage: 'Allow authentication without the client secret.',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n\n    const setCheckboxValue = () => {\n        return ( typeof selectedValue === 'string' && selectedValue === 'true' )\n            || ( typeof selectedValue !== 'string' && selectedValue === true );\n    }\n\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n\n                        {config.type === 'select' && config.multiple === false ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                select\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            >\n                                {config.values.map(key => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                            <>\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                    <Select\n                                        labelId=\"multi-select-label\"\n                                        id=\"multi-select-outlined\"\n                                        margin='dense'\n                                        displayEmpty\n                                        name={config.name}\n                                        multiple\n                                        value={selectedValue}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        input={<Input id='multi-select-outlined'/>}\n                                        renderValue={selected => (\n                                            <div className={classes.chips}>\n                                                {selected.map(value => (\n                                                    <Chip key={value} label={value} className={classes.chip}/>\n                                                ))}\n                                            </div>\n                                        )}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        label={getAppConfigLabel()}\n                                    >\n                                        {config.values.map(key => (\n                                            <MenuItem key={key} value={key}>\n                                                <Checkbox checked={selectedValue.indexOf(key) > -1}/>\n                                                <ListItemText primary={key}/>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n\n                                <Typography variant='caption'>\n                                    {getAppConfigToolTip()}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input' && config.multiple === true) ? (\n                            <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = { target: { name:config.name, value: [...selectedValue, tag] } }\n                                    handleAppRequestChange(e)\n                                }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = { target: { name:config.name, value:selectedValue.filter (\n                                            (oldScope)=> oldScope !== value) } }\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            margin: '0 8px 12px 0',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input') ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (config.type === 'checkbox') ? (\n                            <Checkbox\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                checked={setCheckboxValue()}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,mode,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else if (Validation.url.validate(callbackUrl).error) {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text',\n            }));\n        }else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                if(currentTarget.type === 'checkbox') {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.checked + \"\";\n                } else {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                }\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {mode !== 'MAPPED' && (<><TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn} id='grant-types'>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                        data-testid={key}\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                        </>)}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    mode: null,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyManagerConfig,\n        jwtToken,\n        defaultTokenEndpoint,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    if (keyManagerConfig.alias === null ) {\n        return (\n            <React.Fragment>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help'\n                        defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                    />\n                </Typography>\n\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=password&username=Username&password=Password\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                        defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                    />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=client_credentials\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    } else {\n        if (consumerKey === false) {\n            return (\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.error'\n                            defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                             order to use the token Exchange Approach. '\n                        />\n                    </Typography>\n                )\n        } else {\n            return (\n                <React.Fragment>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.TokenExchange.help'\n                            defaultMessage='The following cURL command shows how to generate an access token using the\n                        token exchange grant type'\n                        />\n                    </Typography>\n\n                    <div className={classes.contentWrapper}>\n                        <div className={classes.code}>\n                            <div>\n                                <span className={classes.command}>curl -k -X POST </span> {defaultTokenEndpoint}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" '}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token=\"'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + jwtToken : 'jwtToken'}\n                                </a>\n                            </div>\n                            <div>\n                                <span className={classes.command}> -H </span>\n                                {'\"Authorization: Basic'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                                </a>\n                                {'\"'}\n                            </div>\n                        </div>\n                        <div>\n                            <Tooltip\n                                title={\n                                    tokenCopied\n                                        ? intl.formatMessage({\n                                            defaultMessage: 'Copied',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                        })\n                                        : intl.formatMessage({\n                                            defaultMessage: 'Copy to clipboard',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                        })\n                                }\n                                placement='right'\n                            >\n                                <CopyToClipboard\n                                    text={`curl -k -X POST ${defaultTokenEndpoint} -d ` +\n                                    '\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" -d ' +\n                                    '\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    '\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    `\"subject_token=${jwtToken}\"  -H ` +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`}\n                                    onCopy={onCopy}\n                                >\n                                    <FileCopy color='secondary'/>\n                                </CopyToClipboard>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n    jwtToken: PropTypes.string,\n    defaultTokenEndpoint: PropTypes.string,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard'\n                                                    classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes, mode,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead;\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button \n                                onClick={this.handleClose} \n                                id='generate-access-token-close-btn'\n                                color='primary' \n                                autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {(keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials')))\n                                    && mode !== 'MAPPED'\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n    mode: null,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {useReducer, useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport {withStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport ViewCurl from \"AppComponents/Shared/AppsAndKeys/ViewCurl\";\nimport ViewToken from \"AppComponents/Shared/AppsAndKeys/ViewToken\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Application from \"AppData/Application\";\nimport Loading from \"AppComponents/Base/Loading/Loading\";\nimport Alert from \"AppComponents/Shared/Alert\";\nimport Tokens from \"AppComponents/Shared/AppsAndKeys/Tokens\";\nimport {TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\n\nconst styles = (theme) => ({\n        FormControl: {\n            paddingTop: 0,\n            paddingBottom: theme.spacing(2),\n            paddingLeft: 0,\n            width: '100%',\n        },\n        FormControlOdd: {\n            padding: theme.spacing(2),\n            width: '100%',\n        },\n        button: {\n            marginLeft: theme.spacing(1),\n        },\n        quotaHelp: {\n            position: 'relative',\n        },\n        checkboxWrapper: {\n            display: 'flex',\n        },\n        generateWrapper: {\n            padding: '10px 0px',\n            marginLeft: theme.spacing(1.25),\n        },\n        checkboxWrapperColumn: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'row',\n            whiteSpace: 'nowrap',\n        },\n        group: {\n            flexDirection: 'row',\n        },\n        removeHelperPadding: {\n            '& p': {\n                margin: '8px 0px',\n            },\n        },\n        iconStyle: {\n            cursor: 'pointer',\n            padding: '0 0 0 10px',\n        },\n        iconButton: {\n            padding: '0 0 0 10px',\n            '& .material-icons': {\n                fontSize: 16,\n            },\n        },\n        titleColumn: {\n            width: 150,\n            fontWeight: 500,\n        },\n        keyInfoTable: {\n            marginBottom: 20,\n            borderCollapse: 'collapse',\n            '& td': {\n                paddingBottom: 5,\n                borderBottom: 'solid 1px #cccc',\n            },\n        },\n        leftCol: {\n            width: 180,\n        },\n        stepLabel: {\n            color: \"#5567d5\",\n            alignSelf: 'center',\n        },\n        stepContent: {\n            color: '#1D2028',\n            fontSize: '0.75rem',\n        },\n        keyLabel: {\n            color: '#222228',\n            fontSize: '0.75rem',\n            marginLeft: theme.spacing(1)\n        },\n        idpGrid: {\n            textAlign: 'left',\n            margin: theme.spacing(0),\n            alignSelf: 'center',\n        },\n        helperTextError: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: 10.5\n        },\n        input: {\n            marginLeft: theme.spacing(1),\n            flex: 1,\n        },\n        avatar: {\n            width: 30,\n            height: 30,\n            background: 'transparent',\n            border: `solid 1px ${theme.palette.grey[300]}`\n        },\n        copyIconStyle: {\n            cursor: 'pointer',\n            margin: '-10px 0',\n            padding: '0 0 0 5px',\n            '& .material-icons': {\n                fontSize: 18,\n                color: '#9c9c9c',\n            },\n        },\n        hr: {\n            border: 'solid 1px #efefef',\n        },\n        divCenter: {\n            alignSelf: 'center',\n            width: 180\n        },\n        tableHeader: {\n            borderBottom: 'none',\n\n        },\n        helperText: {\n            marginLeft: 0,\n            color: '#8D91A3',\n            lineHeight: 1.6,\n            maxWidth: 410\n        },\n        dialogWrapper: {\n            '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        margin: {\n            marginRight: theme.spacing(2),\n        },\n        tokenSection: {\n            marginTop: 0,\n            marginBottom: theme.spacing(0.5),\n        },\n        inputWrapper: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            '& span, & h5, & label, & td, & li, & div, & input': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        bottomInfo: {\n            fontSize: 12,\n            marginBottom: '10px',\n        }\n    }\n);\n\nfunction reducer(state, newValue) {\n    const {field, value} = newValue;\n    switch (field) {\n        case 'tokenResponse':\n        case 'token':\n        case 'tokenScopes':\n        case 'tokenValidityTime':\n        case 'accessTokenRequest':\n        case 'subscriptionScopes':\n        case 'externalIDPToken':\n        case 'externalIDPTokenError':\n        case 'isKeyJWT':\n        case 'initialExecution':\n            return {...state, [field]: value};\n        case 'all':\n            return value;\n        default:\n            return newValue;\n    }\n}\n\n\n/**\n *\n *\n * @class TokenExchangeKeyConfiguration\n * @extends {React.Component}\n */\nconst TokenExchangeKeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [showCS, setShowCS] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [showToken, setShowToken] = useState(false);\n    const [showCurl, setShowCurl] = useState(false);\n    const [showSecretGen, setShowSecretGen] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isResidenceTokenAvailable, setIsResidenceTokenAvailable] = useState(true);\n\n\n    const [initialState] = useState({\n        tokenResponse: '',\n        token: '',\n        tokenScope: '',\n        tokenValidityTime: '',\n        accessTokenRequest: {\n            timeout: 3600,\n            scopesSelected: [],\n            keyType: '',\n        },\n        subscriptionScopes: [],\n        externalIDPToken: '',\n        externalIDPTokenError: '',\n        isKeyJWT: false,\n        initialExecution: true,\n    });\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const {\n        tokenResponse, accessTokenRequest, externalIDPToken, externalIDPTokenError, subscriptionScopes,\n        tokenValidityTime, token, isKeyJWT, initialExecution\n    } = state\n\n    const intl = useIntl();\n\n    const {\n        classes,  keyManagerConfig,\n        defaultTokenEndpoint, selectedApp, selectedTab, selectedApp: {hashEnabled}, keys, fullScreen, keyType\n    } = props;\n\n    let appId;\n    if (selectedApp) {\n        appId = selectedApp.appId || selectedApp.value;\n    }\n\n    const applicationPromise = Application.get(appId);\n\n    if (initialExecution) {\n        applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = {...accessTokenRequest, keyType};\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => {\n                            return scope.key;\n                        });\n                    dispatch({field: 'accessTokenRequest', value: newRequest});\n                    dispatch({field: 'subscriptionScopes', value: subscriptionScopes});\n                    dispatch({field: 'initialExecution', value: false});\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                }\n                dispatch({field: 'initialExecution', value: false});\n            });\n    }\n\n    const generateAccessToken = () => {\n        setIsUpdating(true);\n        applicationPromise.then((application) => application.generateToken(\n            selectedTab,\n            accessTokenRequest.keyType,\n            accessTokenRequest.timeout,\n            accessTokenRequest.scopesSelected,\n            true,\n            externalIDPToken,\n        ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                setShowToken(true);\n                dispatch({field: 'tokenResponse', value: response});\n                dispatch({field: 'token', value: response.accessToken});\n                dispatch({field: 'tokenScopes', value: response.tokenScopes})\n                dispatch({field: 'tokenValidityTime', value: response.validityTime})\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                setIsUpdating(false);\n                const {response} = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    let dialogHead;\n    if (showCurl) {\n        dialogHead = 'Get CURL to Generate Access Token';\n    } else if (showSecretGen) {\n        dialogHead = 'Generate Consumer Secret';\n    } else {\n        dialogHead = 'Generate Access Token';\n    }\n\n    const validateExternalIDPToken = (token) => {\n        if (token === \"\") {\n            return (\n                <FormattedMessage\n                    id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.empty.helperText'\n                    defaultMessage={`{selectedIdPType} token cannot be empty`}\n                    values={{selectedIdPType: keyManagerConfig.type}}\n\n                />\n            );\n        }\n        {\n            return \"\";\n        }\n    };\n\n    const onExternalIDPTokenChange = (event) => {\n        const externalIDPToken = event.target.value;\n        dispatch({field: 'externalIDPTokenError', value: validateExternalIDPToken(externalIDPToken)})\n        dispatch({field: 'externalIDPToken', value: externalIDPToken})\n    };\n\n\n    if (notFound) {\n        return <ResourceNotFound/>;\n    }\n    if (!keys) {\n        return <Loading/>;\n    }\n\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    const updateAccessTokenRequest = (accessTokenRequest) => {\n        dispatch({field: 'accessTokenRequest', value: accessTokenRequest})\n    }\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    const handleClose = () => {\n        setOpen(false);\n        setShowCurl(false);\n        setShowSecretGen(false);\n        dispatch({field: \"isKeyJWT\", value: false})\n\n    };\n\n    /**\n     * Handle on open of dialog for generating access token\n     * */\n    const handleClickOpen = () => {\n            setOpen(true);\n    };\n    /**\n     * Handle on open of dialog for generating access token and get curl\n     * */\n    const handleClickOpenCurl = () => {\n        setOpen(true);\n        setShowCurl(true)\n    };\n\n\n    const csCkKeys = keys.size > 0 && keys.get(\"Resident Key Manager\") && (keys.get(\"Resident Key Manager\").keyType === keyType)\n        && keys.get(\"Resident Key Manager\") || false;\n    const consumerKey = csCkKeys && csCkKeys.consumerKey;\n    const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n    return (\n        <>\n                    <Box display='flex' alignItems='center'>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.externalIdp.tokenGeneration.step1\"\n                                            defaultMessage=\"Step 1:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.step1.description'\n                                            defaultMessage={`Obtain an access token from {selectedIdpType}. `}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.audience'\n                                            defaultMessage='Use the audience value \"{allowedAudience}\", '\n                                            values={{allowedAudience: <b>{keyManagerConfig.alias}</b>}}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint'\n                                            defaultMessage='Token Endpoint'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint.value'\n                                            defaultMessage={'{tokenEndpoint}'}\n                                            values={{tokenEndpoint: keyManagerConfig.tokenEndpoint}}\n                                        />\n\n                                        <Tooltip\n                                            title={\n                                                urlCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copy.to.clipboard',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <CopyToClipboard\n                                                text={keyManagerConfig.tokenEndpoint}\n                                                onCopy={onCopy}\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{root: classes.iconButton}}\n                                                >\n                                                    <Icon color='secondary'>file_copy</Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.tokenGeneration.step2\"\n                                            defaultMessage=\"Step 2:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenGeneration.step2.description'\n                                            defaultMessage='Obtain test token'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token'\n                                            defaultMessage={`{selectedIdpType} Token`}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n                                        <span className={classes.error}> *</span>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box maxWidth={600}>\n                                            <TextField\n                                                id='external-idp-token'\n                                                onChange={onExternalIDPTokenChange}\n                                                size=\"small\"\n                                                fullWidth\n                                                rows={1}\n                                                value={externalIDPToken}\n                                                variant=\"outlined\"\n                                                error={externalIDPTokenError !== \"\"}\n                                                FormHelperTextProps={{\n                                                    className: classes.helperText\n                                                }}\n                                                helperText={externalIDPTokenError === \"\" ?\n                                                    externalIDPTokenError :\n                                                    <div className={classes.helperTextError}>\n                                                        <p> {externalIDPTokenError} </p>\n                                                    </div>\n                                                }\n                                                className={classes.textField}\n                                                data-testid='external-idp-token'\n                                            />\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Box>\n                    <Box>\n                        <div className={classes.inputWrapper}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Dialog\n                                        fullScreen={fullScreen}\n                                        open={open}\n                                        onClose={handleClose}\n                                        aria-labelledby='responsive-dialog-title'\n                                        className={classes.dialogWrapper}\n                                    >\n                                        <DialogTitle id='responsive-dialog-title'>\n                                            {dialogHead}\n                                        </DialogTitle>\n                                        <DialogContent>\n                                            {(!showCurl && !isKeyJWT && !showSecretGen) && (\n                                                <DialogContentText>\n                                                    {(!showToken && isResidenceTokenAvailable) && (\n                                                        <Tokens\n                                                            updateAccessTokenRequest={updateAccessTokenRequest}\n                                                            accessTokenRequest={accessTokenRequest}\n                                                            subscriptionScopes={subscriptionScopes}\n                                                        />\n                                                    )}\n                                                    {(!showToken && !isResidenceTokenAvailable) && (\n                                                        <React.Fragment>\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                                />\n                                                            </Typography>\n                                                        </React.Fragment>\n                                                    )}\n                                                    {showToken &&\n                                                    <ViewToken token={{...tokenResponse, isOauth: true}} isResidenceTokenAvailable={isResidenceTokenAvailable} isTokenExchange />}\n                                                </DialogContentText>\n                                            )}\n                                            {showCurl && (\n                                                <DialogContentText>\n                                                    <ViewCurl\n                                                        keys={{consumerKey, consumerSecret}}\n                                                        keyType={keyType}\n                                                        jwtToken={externalIDPToken}\n                                                        keyManagerConfig={keyManagerConfig}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </DialogContentText>\n                                            )}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            {isUpdating && <CircularProgress size={24}/>}\n                                            {(!showToken && !showCurl && !showSecretGen && isResidenceTokenAvailable) && (\n                                                <Button onClick={generateAccessToken} color='primary'\n                                                        disabled={isUpdating}>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                                        defaultMessage='Generate'\n                                                    />\n                                                </Button>\n                                            )}\n                                            <Button onClick={handleClose} color='primary' autoFocus>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                    defaultMessage='Close'\n                                                />\n                                            </Button>\n                                        </DialogActions>\n                                    </Dialog>\n                                    <div className={classes.generateWrapper}>\n                                        <Grid className={classes.bottomInfo}>\n                                            <FormattedMessage\n                                                id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.description'\n                                                defaultMessage={`In Exchange token flow, A JWT token has to be generated from the {selectedIdpType}\n                                             idp and then exchange for a token with the Resident Key Manager which can used to invoke APIs`}\n                                                values={{selectedIdpType: keyManagerConfig.type}}\n                                            />\n                                        </Grid>\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpen}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                        <Button\n                                            id='curl-to-generate-access-token-btn'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpenCurl}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                                defaultMessage='CURL to Generate Access Token'\n                                            />\n                                        </Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Box>\n            </>\n    );\n}\nTokenExchangeKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    fullScreen: false,\n    summary: false,\n};\nTokenExchangeKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    defaultTokenEndpoint: PropTypes.string,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }),\n};\n\n\nexport default withStyles(styles)(TokenExchangeKeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\nimport TokenExchangeKeyConfiguration from \"AppComponents/Shared/AppsAndKeys/TokenExchangeKeyConfiguration\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {\n    Dialog,\n    DialogActions, DialogContent,\n    DialogContentText,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TableCell\n} from \"@material-ui/core\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n        marginRight: theme.spacing(2),\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{children: <span/>}}/>);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n            tokenType: 'DIRECT',\n            isExchangeTokenError:false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    isTokenExchangeEnabled() {\n        const { keyManagers } = this.state;\n        let isEnabled = false;\n        if (keyManagers && keyManagers.length > 1) {\n            keyManagers.map((keymanager) => {\n                if (keymanager.tokenType === 'EXCHANGED' || keymanager.tokenType === 'BOTH') {\n                    isEnabled = true;\n                }\n            });\n        }\n        return isEnabled;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n        const selectedGrantsByDefault = [];\n        if(availableGrantTypes.find( gt => gt ==='password')){\n            selectedGrantsByDefault.push('password');\n        }\n        if(availableGrantTypes.find( gt => gt ==='client_credentials')){\n            selectedGrantsByDefault.push('client_credentials');\n        }\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                    || selectedGrantsByDefault,\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({\n                keyRequest: newRequest,\n                selectedTab: newSelectedTab,\n                mode,\n                importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n            });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: selectedGrantsByDefault,\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n                importDisabled: false,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType, intl } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectedGrantTypes = [];\n                        if(selectdKM.availableGrantTypes.find( gt => gt ==='password')){\n                            selectedGrantTypes.push('password');\n                        }\n                        if(selectdKM.availableGrantTypes.find( gt => gt ==='client_credentials')){\n                            selectedGrantTypes.push('client_credentials');\n                        }\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes,\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    } else {\n                        Alert.error(error.description\n                            || intl.formatMessage({\n                                id: 'Shared.AppsAndKeys.TokenManager.get.keys.request.error',\n                                defaultMessage: 'Error while retrieving the keys',\n                            }));\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({ keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(error.description\n                    || `${intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                        defaultMessage: 'Error occurred when generating application keys',\n                })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body && response.body.message && response.body.description) {\n                    Alert.error(`${response.body.message}: ${response.body.description}`);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n\n\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status, response } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                if (response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(error.description || intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                        defaultMessage: 'Error occurred when providing application keys',\n                    }));\n                }\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    handleChange = (e) => {\n        this.setState({ tokenType: e.target.defaultValue });\n    }\n\n    handleClose=() => {\n        this.setState({ tokenType: 'DIRECT' });\n    }\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled }, isKeyManagerAllowed,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode, tokenType\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeyhandleCloses.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km'\n                                              defaultMessage='No Key Managers'/>\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n\n        let isResidentKeyManagerTokensAvailable = false;\n        if (keys.has('Resident Key Manager') && \n            keys.get('Resident Key Manager').supportedGrantTypes &&\n            keys.get('Resident Key Manager').supportedGrantTypes.\n            includes(\"urn:ietf:params:oauth:grant-type:token-exchange\")){\n            isResidentKeyManagerTokensAvailable = true;\n        }\n\n        let defaultTokenEndpoint;\n\n        if (keyManagers.length > 0) {\n            const residentKMs = keyManagers.filter((item) => item.name === 'Resident Key Manager');\n            defaultTokenEndpoint = residentKMs.length > 0 ? (residentKMs)[0].tokenEndpoint: null;\n        }\n\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                        value={selectedTab}\n                        onChange={this.handleTabChange}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        variant=\"scrollable\"\n                        scrollButtons=\"auto\"\n                        aria-label=\"scrollable auto tabs example\"\n                        >\n                            {keyManagers.map((keymanager) => (\n                            <Tab\n                                label={keymanager.displayName || keymanager.name}\n                                value={keymanager.name}\n                                disabled={!keymanager.enabled || (isKeyManagerAllowed\n                                    && !isKeyManagerAllowed(keymanager.name)\n                                    && ((keymanager.name !== 'Resident Key Manager')\n                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                id={keymanager.name.replace(/\\s/g, '')}\n                            />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <div>\n                            {keymanager.tokenType === 'DIRECT' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box display='flex' flexDirection='row'>\n                                        <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                            <FormattedMessage\n                                                defaultMessage='Key and Secret'\n                                                id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                            />\n                                        </Typography>\n                                        {\n                                            keymanager.enableMapOAuthConsumerApps && (\n                                                <Box ml={2}>\n                                                    <ImportExternalApp\n                                                        onChange={this.handleOnChangeProvidedOAuth}\n                                                        consumerKey={providedConsumerKey}\n                                                        consumerSecret={providedConsumerSecret}\n                                                        isUserOwner={isUserOwner}\n                                                        key={key}\n                                                        provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                        importDisabled={importDisabled}\n                                                    />\n                                                </Box>\n                                            )\n                                        }\n                                    </Box>\n                                    <Box m={2}>\n                                        <ViewKeys\n                                            initialToken={initialToken}\n                                            initialValidityTime={initialValidityTime}\n                                            initialScopes={initialScopes}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            keys={keys}\n                                            selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                            isUserOwner={isUserOwner}\n                                            hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                            keyManagerConfig={keymanager}\n                                            mode={mode}\n                                        />\n                                    </Box>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        {\n                                            key\n                                                ? (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configurations'\n                                                        id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configuration'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                    />\n                                                )\n                                        }\n                                    </Typography>\n                                    <Box m={2}>\n                                        <KeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                            mode={mode}\n                                        />\n                                        <div className={classes.generateWrapper}>\n                                            <ScopeValidation\n                                                resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                resourceMethod={resourceMethods.POST}\n                                            >\n                                                {!isUserOwner ? (\n                                                    <>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={\n                                                                key ? this.updateKeys : this.generateKeys\n                                                            }\n                                                            disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation\n                                                                || (isKeyManagerAllowed\n                                                                    && !isKeyManagerAllowed(keymanager.name)\n                                                                    && ((keymanager.name !== 'Resident Key Manager')\n                                                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key ?\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                                    defaultMessage: 'Update Keys'})\n                                                            :\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys'})\n                                                            }\n                                                            {isLoading && <CircularProgress size={20}/>}\n                                                        </Button>\n                                                        <Typography variant='caption'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Only owner can generate or update keys'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                            />\n                                                        </Typography>\n                                                    </>\n                                                ) : (\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={key ? this.updateKeys : this.generateKeys}\n                                                            disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')\n                                                            || (isKeyManagerAllowed\n                                                                && !isKeyManagerAllowed(keymanager.name)\n                                                                && ((keymanager.name !== 'Resident Key Manager')\n                                                                || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key ?\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                                    defaultMessage: 'Update'})\n                                                            :\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys'})\n                                                            }\n                                                            {isLoading && <CircularProgress size={20}/>}\n                                                        </Button>\n                                                        {!keymanager.enableOAuthAppCreation && (\n                                                            <Box m={2} display='flex'>\n                                                                <WarningIcon className={classes.warningIcon}/>\n                                                                <Typography variant='body1'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                        id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                        values={{kmName: keymanager.displayName || keymanager.name}}\n                                                                    />\n                                                                </Typography>\n                                                            </Box>\n                                                        )}\n                                                    </Box>\n                                                )}\n                                            </ScopeValidation>\n                                        </div>\n\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'EXCHANGED' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        <FormattedMessage\n                                            defaultMessage='Token Generation'\n                                            id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                        />\n                                    </Typography>\n                                    <Box m={2}>\n                                        {/*\n                                        Token exchange grant flow enable/disable logic\n                                        Given that in the key manager selected has the tokenType='EXCHANGE'\n                                            If 'Resident Key Manager' disabled we can't proceed with token exchange. So need to show a banner\n                                            If 'Resident Key Manager' enabled, we need to check if the resident key manager 'exchange grant' is selected. \n                                            So we need to ask the user to select 'exchange grant' for the 'Resident Key Manager'.\n                                            If 'Resident Key Manager' enabled and 'exchange grant' is enabled the token exchange is possible\n                                        */}\n                                        <TokenExchangeKeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                        />\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'BOTH' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box m={2}>\n                                        <Box m={2}>\n                                        <Box display='flex' alignItems='center'>\n                                            <Table className={classes.table}>\n                                                <TableRow>\n                                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                        <FormattedMessage\n                                                            defaultMessage='API Invocation Method'\n                                                            id='Shared.AppsAndKeys.KeyConfiguration.API Invocation.Method.label'\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        <RadioGroup\n                                                            style={{flexDirection: 'row'}}\n                                                            aria-label='tokenType'\n                                                            name='tokenType'\n                                                            value={tokenType}\n                                                            onChange={this.handleChange}\n                                                        >\n                                                            <FormControlLabel value='DIRECT' control={<Radio/>}\n                                                                              label='Direct Token' id='direct-token'/>\n                                                            <FormControlLabel value='EXCHANGED' control={<Radio/>}\n                                                                              label='Exchange Token' id='exchange-token'/>\n                                                        </RadioGroup>\n                                                    </TableCell>\n                                                </TableRow>\n                                            </Table>\n                                        </Box>\n                                        </Box>\n\n                                    {tokenType === 'DIRECT' && (\n                                        <>\n                                            <Box display='flex' flexDirection='row'>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Key and Secret'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                                    />\n                                                </Typography>\n                                                {\n                                                    keymanager.enableMapOAuthConsumerApps && (\n                                                        <Box ml={2}>\n                                                            <ImportExternalApp\n                                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                                consumerKey={providedConsumerKey}\n                                                                consumerSecret={providedConsumerSecret}\n                                                                isUserOwner={isUserOwner}\n                                                                key={key}\n                                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                                importDisabled={importDisabled}\n                                                            />\n                                                        </Box>\n                                                    )\n                                                }\n                                            </Box>\n                                            <Box m={2}>\n                                                <ViewKeys\n                                                    initialToken={initialToken}\n                                                    initialValidityTime={initialValidityTime}\n                                                    initialScopes={initialScopes}\n                                                    selectedApp={selectedApp}\n                                                    selectedTab={selectedTab}\n                                                    keyType={keyType}\n                                                    keys={keys}\n                                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                                    isUserOwner={isUserOwner}\n                                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                                    keyManagerConfig={keymanager}\n                                                    mode={mode}\n                                                />\n                                            </Box>\n                                            <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                {\n                                                    key\n                                                        ? (\n                                                            <FormattedMessage\n                                                                defaultMessage='Key Configurations'\n                                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                            />\n                                                        )\n                                                        : (\n                                                            <FormattedMessage\n                                                                defaultMessage='Key Configuration'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                            />\n                                                        )\n                                                }\n                                            </Typography>\n                                            <Box m={2}>\n                                                <KeyConfiguration\n                                                    keys={keys}\n                                                    key={key}\n                                                    selectedApp={selectedApp}\n                                                    selectedTab={selectedTab}\n                                                    keyType={keyType}\n                                                    updateKeyRequest={this.updateKeyRequest}\n                                                    keyRequest={keyRequest}\n                                                    isUserOwner={isUserOwner}\n                                                    isKeysAvailable={!!key}\n                                                    keyManagerConfig={keymanager}\n                                                    validating={validating}\n                                                    updateHasError={this.updateHasError}\n                                                    callbackError={hasError}\n                                                    setValidating={this.setValidating}\n                                                    defaultTokenEndpoint={defaultTokenEndpoint}\n                                                />\n                                                <div className={classes.generateWrapper}>\n                                                    <ScopeValidation\n                                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                        resourceMethod={resourceMethods.POST}\n                                                    >\n                                                        {!isUserOwner ? (\n                                                            <>\n                                                                <Button\n                                                                    id='generate-keys'\n                                                                    variant='contained'\n                                                                    color='primary'\n                                                                    className={classes.button}\n                                                                    onClick={\n                                                                        key ? this.updateKeys : this.generateKeys\n                                                                    }\n\n                                                                >\n                                                                    {key ? 'Update keys' : 'Generate Keys'}\n                                                                    {isLoading && <CircularProgress size={20}/>}\n                                                                </Button>\n                                                                <Typography variant='caption'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Only owner can generate or update keys'\n                                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                                    />\n                                                                </Typography>\n                                                            </>\n                                                        ) : (\n                                                            <Box display='flex'>\n                                                                <Button\n                                                                    id='generate-keys'\n                                                                    variant='contained'\n                                                                    color='primary'\n                                                                    className={classes.button}\n                                                                    onClick={key ? this.updateKeys : this.generateKeys}\n\n                                                                >\n                                                                    {key ? 'Update' : 'Generate Keys'}\n                                                                    {isLoading && <CircularProgress size={20}/>}\n                                                                </Button>\n                                                                {!keymanager.enableOAuthAppCreation && (\n                                                                    <Box m={2} display='flex'>\n                                                                        <WarningIcon className={classes.warningIcon}/>\n                                                                        <Typography variant='body1'>\n                                                                            <FormattedMessage\n                                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                                values={{kmName: keymanager.displayName || keymanager.name}}\n                                                                            />\n                                                                        </Typography>\n                                                                    </Box>\n                                                                )}\n                                                            </Box>\n                                                        )}\n                                                    </ScopeValidation>\n                                                </div>\n                                            </Box>\n                                        </>\n                                    )}\n                                        {(tokenType === 'EXCHANGED'  && isResidentKeyManagerTokensAvailable) && (\n                                            <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Token Generation'\n                                                        id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                                    />\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <TokenExchangeKeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </Box>\n                                            </TabPanel>\n                                        )}\n                                    </Box>\n                                </TabPanel>\n                            )}\n                        </div>\n                    ))}\n\n                </div>\n                {(tokenType === 'EXCHANGED' && !isResidentKeyManagerTokensAvailable) && (\n                <div className={classes.inputWrapper}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Dialog\n                                fullScreen={false}\n                                open={true}\n                                onClose={this.handleClose}\n                                aria-labelledby='responsive-dialog-title'\n                                className={classes.dialogWrapper}\n                            >\n                                <DialogTitle id='responsive-dialog-title'>\n                                    {'Resident Key Manager Consumer Key and Secret Not Available '}\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText>\n                                        <React.Fragment>\n                                            <Typography>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                />\n                                            </Typography>\n                                        </React.Fragment>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n\n                                    <Button onClick={this.handleClose} color='primary' autoFocus id='close-btn'>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                            defaultMessage='Close'\n                                        />\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n                        </Grid>\n                    </Grid>\n                </div>\n                )}\n            </>\n        );\n    }\n}\n\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                        id='start-key-gen-wizard-btn'\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You maRefactor code of AsyncApiUIy obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Paper, Typography } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst OriginalDevportalDetails = (props) => {\n    const {\n        classes, originalDevPortalUrl,\n    } = props;\n    return (\n        <Paper elevation={0} className={classes.paper}>\n            <Typography variant='h5' component='h2'>\n                <FormattedMessage\n                    id={'Apis.Details.Credentials.OriginalDevportalDetails.'\n                    + 'original.developer.portal.title'}\n                    defaultMessage='Original Developer Portal'\n                />\n            </Typography>\n            <Link\n                target='_blank'\n                rel='noopener noreferrer'\n                href={originalDevPortalUrl}\n                variant='body2'\n            >\n                <div className={classes.originalDevPortalLink} data-testid='itest-original-devportal-link'>\n                    <FormattedMessage\n                        id='Apis.Details.Credentials.OriginalDevportalDetails.visit.original.developer.portal'\n                        defaultMessage='Visit Original Developer Portal'\n                    />\n                    <LaunchIcon className={classes.launchIcon} />\n                </div>\n            </Link>\n        </Paper>\n    );\n};\n\nexport default OriginalDevportalDetails;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link as MUILink } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete, isKeyManagerAllowed,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td} id={app.label}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <MUILink\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                            id={app.label + '-MA'}\n                            aria-labelledby={app.label + '-MA ' + app.label}\n                            component={Link}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </MUILink>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <MUILink\n                                className={classes.button}\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    handleSubscriptionDelete(\n                                        app.subscriptionId,\n                                        updateSubscriptionData,\n                                    );\n                                }}\n                                id={app.label + '-UN'}\n                                aria-labelledby={app.label + '-UN ' + app.label}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </MUILink>\n                        </ScopeValidation>\n                        <MUILink\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            id={app.label + '-PK'}\n                            aria-labelledby={app.label + '-PK ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </MUILink>\n                        <MUILink\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            id={app.label + '-SB'}\n                            aria-labelledby={app.label + '-SB ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </MUILink>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                isKeyManagerAllowed={isKeyManagerAllowed}\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport Link from '@material-ui/core/Link';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport OriginalDevportalDetails from './OriginalDevportalDetails';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        '& table > tr > th:last-child': {\n            textAlign: 'right',\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    launchIcon: {\n        paddingLeft: theme.spacing(1),\n    },\n    originalDevPortalLink: {\n        marginTop: theme.spacing(2),\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    /**\n     *Creates an instance of Credentials.\n     * @param JSON props\n     * @memberof Credentials\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            selectedAppId: false,\n            selectedKeyType: false,\n            subscriptionRequest: {\n                applicationId: '',\n                apiId: '',\n                throttlingPolicy: '',\n            },\n            throttlingPolicyList: [],\n            applicationOwner: '',\n            hashEnabled: false,\n            isSubscribing: false,\n        };\n        this.api = new Api();\n    }\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * used to check if key manager is in the allowed list for an API\n     * @param {*} name name of the key manager\n     * @memberof Credentials\n     */\n    isKeyManagerAllowed = (name) => {\n        const { api } = this.context;\n        return api && ((api.keyManagers && api.keyManagers.includes('all'))\n        || (api.keyManagers && api.keyManagers.includes(name)));\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n        && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n         && !api.securityScheme.includes('api_key');\n        const isSetAllorResidentKeyManagers = (api.keyManagers && api.keyManagers.includes('all'))\n            || (api.keyManagers && api.keyManagers.includes('Resident Key Manager'));\n        const renderCredentialInfo = () => {\n            if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                        + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                component={RouterLink}\n                                                disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth || !isSetAllorResidentKeyManagers}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                    defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                />\n                                            </Button>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                                id='subscribe-to-api-btn'\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h2' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table id='subscription-table'>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.action'}\n                                                    defaultMessage='Actions'\n                                                />\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={app.id}\n                                                loadInfo={this.loadInfo}\n                                                isKeyManagerAllowed={this.isKeyManagerAllowed}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={2}>\n                        <Grid item md={12}>\n                            {api.advertiseInfo && api.advertiseInfo.advertised\n                                && api.advertiseInfo.originalDevPortalUrl && (\n                                <OriginalDevportalDetails\n                                    classes={classes}\n                                    originalDevPortalUrl={api.advertiseInfo.originalDevPortalUrl}\n                                />\n                            )}\n                            {api.tiers.length > 0 ? (\n                                <>\n                                    <Typography\n                                        onClick={this.handleExpandClick}\n                                        variant='h4'\n                                        component='div'\n                                        className={classes.titleSub}\n                                    >\n                                        {applicationsAvailable.length > 0 && (\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                                className={classes.addLinkWrapper}\n                                                component={RouterLink}\n                                            >\n                                                <Button\n                                                    color='secondary'\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers}\n                                                    size='small'\n                                                    id='start-key-gen-wizard-btn'\n                                                >\n                                                    <Icon>add_circle_outline</Icon>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        )}\n                                    </Typography>\n                                    <Paper elevation={0} className={classes.paper}>\n                                        <Typography variant='body2' className={classes.descWrapper}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Credentials.Credentials.'\n                                                defaultMessage={`An application is primarily used to decouple the \n                                                consumer from the APIs. It allows you to generate and use a single \n                                                key for multiple APIs and subscribe multiple times to a single API \n                                                with different SLA levels.`}\n                                            />\n                                        </Typography>\n                                        {renderCredentialInfo()}\n                                    </Paper>\n                                </>\n                            ) : (\n                                <Paper elevation={0} className={classes.paper}>\n                                    <InlineMessage type='info' className={classes.dialogContainer}>\n                                        <Typography component='p' data-testid='itest-no-tier-dialog'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Creadentials.credetials.no.tiers'\n                                                defaultMessage='No tiers are available for the API.'\n                                            />\n                                        </Typography>\n                                    </InlineMessage>\n                                </Paper>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\nCredentials.contextType = ApiContext;\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}