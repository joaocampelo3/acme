{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/AdvertiseDetailsPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx"],"names":["AdvertiseDetailsPanel","props","classes","advAuthHeader","advAuthHeaderValue","handleChanges","selectedEndpoint","api","advertiseInfo","transport","securityScheme","authorizationHeader","availableTransports","join","toUpperCase","securitySchemes","forEach","scheme","index","substring","length","Box","display","justifyContent","className","authHeader","Grid","x","md","centerItems","Typography","variant","component","id","color","tryoutHeading","defaultMessage","container","spacing","direction","tokenType","xs","style","paddingLeft","item","TextField","margin","label","name","onChange","value","fullWidth","paddingRight","select","helperText","apiExternalProductionEndpoint","MenuItem","menuItem","apiExternalSandboxEndpoint","marginTop","severity","AlertTitle","withStyles","theme","fontWeight","palette","getContrastText","background","paper","selectedApplication","selectedKeyType","subscriptions","handleSelectPanelChange","event","target","SelectProps","map","sub","applicationInfo","applicationId","key","FormControl","RadioGroup","aria-labelledby","row","find","status","FormControlLabel","control","Radio","styles","makeStyles","padding","grid","marginBottom","genKeyButton","width","height","marginLeft","cursor","grey","gatewayEnvironment","categoryHeading","tooltip","warningIcon","fontSize","marginRight","loadMoreLink","textDecoration","link","default","TryOutController","securitySchemeType","selectedEnvironment","environments","productionAccessToken","sandboxAccessToken","setKeys","setSelectedKeyType","setSelectedKeyManager","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","scopes","setSecurityScheme","setUsername","setPassword","username","password","updateSwagger","setProductionApiKey","setSandboxApiKey","productionApiKey","sandboxApiKey","environmentObject","setURLs","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","URLs","selectedKeyManager","showToken","setShowToken","useState","showPassword","setShowPassword","isUpdating","setIsUpdating","notFound","setNotFound","setSubscriptions","setSelectedApplication","keyManagers","setKeyManagers","selectedKMObject","setSelectedKMObject","ksGenerated","setKSGenerated","showMoreGWUrls","setShowMoreGWUrls","apiID","restApi","Api","type","urls","elm","environmentName","useEffect","subscriptionsList","newSelectedApplication","accessToken","selectedKeyTypes","lifeCycleStatus","getSubscriptions","then","subscriptionsResponse","obj","list","filter","Application","get","application","getKeys","appKeys","keyType","token","keys","catch","error","getKeyManagers","response","responseKeyManagerList","body","push","filteredKMs","km","selectedKeys","consumerKey","updateApplication","user","AuthManager","getUser","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","isTestKeyEnabled","prefix","includes","isPrototypedAPI","toLowerCase","showSecurityType","tokenValue","advertised","mb","alignItems","enabled","disabled","values","what","InputProps","autoComplete","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","Icon","startAdornment","minWidth","Button","generateApiKey","console","log","apikey","generateToken","CircularProgress","size","Tooltip","placement","interactive","title","m","mt","env","displayName","verticalSpace","onKeyDown","https","wss","propTypes","PropTypes","shape","string","isRequired","inputAdornmentStart"],"mappings":"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","file":"21.6cceb25a85364961c8d5.bundle.js","sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\n\nconst AdvertiseDetailsPanel = (props) => {\n    const {\n        classes,\n        advAuthHeader,\n        advAuthHeaderValue,\n        handleChanges,\n        selectedEndpoint,\n        api: {\n            advertiseInfo,\n            transport,\n            securityScheme,\n            authorizationHeader,\n        },\n    } = props;\n\n    const availableTransports = transport.join(', ').toUpperCase();\n    let securitySchemes = '';\n    securityScheme.forEach((scheme, index) => {\n        if (index !== 0) {\n            securitySchemes += ', ';\n        }\n        if (scheme === 'basic_auth') {\n            securitySchemes += 'Basic';\n        } else if (scheme === 'oauth2') {\n            securitySchemes += 'OAuth2';\n        } else if (scheme === 'mutualssl') {\n            securitySchemes += 'Mutual SSL';\n        } else if (scheme === 'api_key') {\n            securitySchemes += 'API Key';\n        } else {\n            securitySchemes = securitySchemes.substring(0, securitySchemes.length - 2);\n        }\n    });\n\n    return (\n        <Box display='block' justifyContent='center' className={classes.authHeader}>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography\n                    variant='h6'\n                    component='label'\n                    id='authentication-heading'\n                    color='textSecondary'\n                    className={classes.tryoutHeading}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.authentication.heading'\n                        defaultMessage='Authentication'\n                    />\n                </Typography>\n            </Grid>\n            <Grid container spacing={2} x={8} md={6} direction='row' className={classes.tokenType}>\n                <Grid xs={6} md={4} style={{ paddingLeft: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeader'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header'\n                                defaultMessage='Authorization Header'\n                            />\n                        )}\n                        name='advAuthHeader'\n                        onChange={handleChanges}\n                        value={advAuthHeader || ''}\n                        fullWidth\n                    />\n                </Grid>\n                <Grid xs={6} md={8} style={{ paddingRight: 0 }} item>\n                    <TextField\n                        margin='normal'\n                        variant='outlined'\n                        id='advAuthHeaderValue'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.adv.auth.header.value'\n                                defaultMessage='Authorization Header Value'\n                            />\n                        )}\n                        name='advAuthHeaderValue'\n                        onChange={handleChanges}\n                        value={advAuthHeaderValue || ''}\n                        fullWidth\n                    />\n                </Grid>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography\n                    variant='h6'\n                    component='label'\n                    id='key-type'\n                    color='textSecondary'\n                    className={classes.tryoutHeading}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.heading'\n                        defaultMessage='API Endpoint'\n                    />\n                </Typography>\n                <TextField\n                    fullWidth\n                    select\n                    id='selectedEndpoint'\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Endpoint type'\n                            id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint'\n                        />\n                    )}\n                    value={selectedEndpoint}\n                    name='selectedEndpoint'\n                    onChange={handleChanges}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Please select an endpoint type'\n                            id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.endpoint.help'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {advertiseInfo.apiExternalProductionEndpoint && (\n                        <MenuItem\n                            value='PRODUCTION'\n                            className={classes.menuItem}\n                        >\n                            Production\n                        </MenuItem>\n                    )}\n                    {advertiseInfo.apiExternalSandboxEndpoint && (\n                        <MenuItem\n                            value='SANDBOX'\n                            className={classes.menuItem}\n                        >\n                            Sandbox\n                        </MenuItem>\n                    )}\n                </TextField>\n            </Grid>\n            {(availableTransports || securitySchemes || authorizationHeader) && (\n                <Grid x={12} md={6} className={classes.centerItems} style={{ marginTop: '10px' }}>\n                    <MuiAlert severity='info'>\n                        <AlertTitle>\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.AdvertiseDetailsPanel.security.details'\n                                defaultMessage='Security Details'\n                            />\n                        </AlertTitle>\n                        {availableTransports && (\n                            <div>\n                                <strong>Transports: </strong>\n                                {availableTransports}\n                            </div>\n                        )}\n                        {securitySchemes && (\n                            <div>\n                                <strong>Security schemes: </strong>\n                                {securitySchemes}\n                            </div>\n                        )}\n                        {authorizationHeader && (\n                            <div>\n                                <strong>Authorization header: </strong>\n                                {authorizationHeader}\n                            </div>\n                        )}\n                    </MuiAlert>\n                </Grid>\n            )}\n        </Box>\n    );\n};\n\nexport default AdvertiseDetailsPanel;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Grid, FormControl, FormControlLabel, RadioGroup, Radio, Typography,\n} from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = (theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tryoutHeading: {\n        display: 'block',\n        fontWeight: 400,\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nconst SelectAppPanel = (props) => {\n    let {\n        selectedApplication, selectedKeyType,\n    } = props;\n\n    const {\n        subscriptions, handleChanges, classes,\n    } = props;\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} event event fired\n     */\n    const handleSelectPanelChange = (event) => {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedApplication':\n                selectedApplication = value;\n                break;\n            case 'selectedKeyType':\n                selectedKeyType = value;\n                break;\n            default:\n                break;\n        }\n        handleChanges(event);\n    };\n    return (\n        <>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <TextField\n                    fullWidth\n                    id='selected-application'\n                    select\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                        />\n                    )}\n                    value={selectedApplication}\n                    name='selectedApplication'\n                    onChange={handleSelectPanelChange}\n                    SelectProps={subscriptions}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Subscribed applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.select.subscribed.application'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {subscriptions.map((sub) => (\n                        <MenuItem\n                            value={sub.applicationInfo.applicationId}\n                            key={sub.applicationInfo.applicationId}\n                            className={classes.menuItem}\n                        >\n                            {sub.applicationInfo.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography variant='h6' component='label' id='key-type' color='textSecondary' className={classes.tryoutHeading}>\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type.heading'\n                        defaultMessage='Key Type'\n                    />\n                </Typography>\n                <FormControl component='fieldset'>\n                    <RadioGroup\n                        name='selectedKeyType'\n                        value={selectedKeyType}\n                        onChange={handleSelectPanelChange}\n                        aria-labelledby='key-type'\n                        row\n                    >\n                        {(subscriptions !== null && (subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'UNBLOCKED'\n                                || subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'TIER_UPDATE_PENDING'))\n                                && (\n                                    <FormControlLabel\n                                        value='PRODUCTION'\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                                defaultMessage='Production'\n                                            />\n                                        )}\n                                    />\n                                )}\n                        <FormControlLabel\n                            value='SANDBOX'\n                            control={<Radio />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                    defaultMessage='Sandbox'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n        </>\n    );\n};\n\nexport default withStyles(styles)(SelectAppPanel);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect, useState,\n} from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl, CircularProgress, Tooltip,\n} from '@material-ui/core';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport AdvertiseDetailsPanel from 'AppComponents/Apis/Details/ApiConsole/AdvertiseDetailsPanel';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport Application from '../../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = makeStyles((theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#6d6d6d',\n        },\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    tryoutHeading: {\n        fontWeight: 400,\n        display: 'block',\n    },\n    genKeyButton: {\n        width: theme.spacing(20),\n        height: theme.spacing(5),\n        marginTop: theme.spacing(2.5),\n        marginLeft: theme.spacing(2),\n        '&:disabled': {\n            cursor: 'not-allowed',\n            background: theme.palette.grey[50],\n        },\n    },\n    gatewayEnvironment: {\n        marginTop: theme.spacing(4),\n    },\n    categoryHeading: {\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(-5),\n    },\n    tooltip: {\n        marginLeft: theme.spacing(1),\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 25,\n        marginRight: 10,\n    },\n    loadMoreLink: {\n        textDecoration: 'none',\n        margin: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    authHeader: {\n        marginBottom: '20px',\n    },\n}));\n\n/**\n * TryOut component\n *\n * @class TryOutController\n * @extends {Component}\n */\nfunction TryOutController(props) {\n    const {\n        securitySchemeType, selectedEnvironment, environments,\n        productionAccessToken, sandboxAccessToken, selectedKeyType, setKeys, setSelectedKeyType, setSelectedKeyManager,\n        setSelectedEnvironment, setProductionAccessToken, setSandboxAccessToken, scopes, setSecurityScheme, setUsername,\n        setPassword, username, password, updateSwagger, setProductionApiKey, setSandboxApiKey, productionApiKey,\n        sandboxApiKey, environmentObject, setURLs, setAdvAuthHeader, setAdvAuthHeaderValue, advAuthHeader,\n        advAuthHeaderValue, setSelectedEndpoint, selectedEndpoint, api, URLs,\n    } = props;\n    let { selectedKeyManager } = props;\n    selectedKeyManager = selectedKeyManager || 'Resident Key Manager';\n\n    const classes = styles();\n    const [showToken, setShowToken] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [selectedApplication, setSelectedApplication] = useState([]);\n    const [keyManagers, setKeyManagers] = useState([]);\n    const [selectedKMObject, setSelectedKMObject] = useState(null);\n    const [ksGenerated, setKSGenerated] = useState(false);\n    const [showMoreGWUrls, setShowMoreGWUrls] = useState(false);\n    const apiID = api.id;\n    const restApi = new Api();\n\n    useEffect(() => {\n        let subscriptionsList;\n        let newSelectedApplication;\n        let keys;\n        let selectedKeyTypes = 'PRODUCTION';\n        let accessToken;\n        if (api.lifeCycleStatus) {\n            const promiseSubscriptions = restApi.getSubscriptions(apiID);\n            promiseSubscriptions.then((subscriptionsResponse) => {\n                if (subscriptionsResponse !== null) {\n                    subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                        || item.status === 'PROD_ONLY_BLOCKED' || item.status === 'TIER_UPDATE_PENDING');\n\n                    if (subscriptionsList && subscriptionsList.length > 0) {\n                        newSelectedApplication = subscriptionsList[0].applicationId;\n                        Application.get(newSelectedApplication)\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                    selectedKeyTypes = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                } else if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                    selectedKeyTypes = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                }\n                                setSelectedApplication(newSelectedApplication);\n                                setSubscriptions(subscriptionsList);\n                                setKeys(appKeys);\n                                setSelectedEnvironment(selectedEnvironment, false);\n                                setSelectedKeyType(selectedKeyTypes, false);\n                                if (selectedKeyType === 'PRODUCTION') {\n                                    setProductionAccessToken(accessToken);\n                                } else {\n                                    setSandboxAccessToken(accessToken);\n                                }\n                            });\n                    } else {\n                        setSelectedApplication(newSelectedApplication);\n                        setSubscriptions(subscriptionsList);\n                        setKeys(keys);\n                        setSelectedEnvironment(selectedEnvironment, false);\n                        if (selectedKeyType === 'PRODUCTION') {\n                            setProductionAccessToken(accessToken);\n                        } else {\n                            setSandboxAccessToken(accessToken);\n                        }\n                        setSelectedKeyType(selectedKeyType, false);\n                    }\n                } else {\n                    setSelectedApplication(newSelectedApplication);\n                    setSubscriptions(subscriptionsList);\n                    setKeys(keys);\n                    setSelectedEnvironment(selectedEnvironment, false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setSelectedKeyType(selectedKeyType, false);\n                }\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n            const promisedKeyManagers = restApi.getKeyManagers();\n            promisedKeyManagers\n                .then((response) => {\n                    const responseKeyManagerList = [];\n                    response.body.list.map((item) => responseKeyManagerList.push(item));\n                    setKeyManagers(responseKeyManagerList);\n                    const filteredKMs = (responseKeyManagerList.filter((km) => km.name === selectedKeyManager));\n                    if (filteredKMs && filteredKMs.length > 0) {\n                        setSelectedKMObject(filteredKMs[0]);\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     * Generate access token\n     * */\n    function generateAccessToken() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const applicationPromise = Application.get(selectedApplication);\n            applicationPromise\n                .then((application) => application.generateToken(\n                    selectedKeyManager,\n                    selectedKeyType,\n                    3600,\n                    scopes,\n                ))\n                .then((response) => {\n                    console.log('token generated successfully ' + response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(response.accessToken);\n                    } else {\n                        setSandboxAccessToken(response.accessToken);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     * Generate api key\n     * */\n    function generateApiKey() {\n        if (api.lifeCycleStatus) {\n            setIsUpdating(true);\n            const promisedKey = restApi.generateApiKey(selectedApplication, selectedKeyType, -1);\n            promisedKey\n                .then((response) => {\n                    console.log('Non empty response received', response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionApiKey(response.body.apikey);\n                    } else {\n                        setSandboxApiKey(response.body.apikey);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof TryOutController\n     */\n    function handleClickShowToken() {\n        setShowToken(!showToken);\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof TryOutController\n     */\n    function updateApplication() {\n        if (api.lifeCycleStatus) {\n            let accessToken;\n            let keyType;\n            if (subscriptions !== null && subscriptions.length !== 0 && selectedApplication.length !== 0) {\n                if (subscriptions.find((sub) => sub.applicationId\n                    === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                    setSelectedKeyType(selectedKeyType, false);\n                    keyType = 'SANDBOX';\n                } else {\n                    keyType = selectedKeyType;\n                }\n            }\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(keyType || 'PRODUCTION');\n                })\n                .then((appKeys) => {\n                    const selectedKeys = appKeys.get(selectedKeyManager);\n                    if (selectedKeys && selectedKeys.keyType === selectedKeyType) {\n                        ({ accessToken } = selectedKeys.token);\n                    }\n                    if (selectedKeys && selectedKeys.keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else if (selectedKeys && selectedKeys.keyType === 'SANDBOX') {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    if (selectedKeys && selectedKeys.consumerKey && selectedKeys.consumerKey !== '') {\n                        setKSGenerated(true);\n                    } else {\n                        setKSGenerated(false);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    }\n\n    useEffect(() => {\n        updateApplication();\n    }, [selectedApplication, selectedKeyType, selectedEnvironment, securitySchemeType]);\n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof TryOutController\n     */\n    function handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                setSelectedEnvironment(value, true);\n                if (api.type !== 'GRAPHQL') {\n                    updateSwagger(value);\n                }\n                if (environmentObject) {\n                    const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n                    setURLs(urls);\n                }\n                break;\n            case 'selectedApplication':\n                setProductionAccessToken('');\n                setSandboxAccessToken('');\n                setProductionApiKey('');\n                setSandboxApiKey('');\n                setSelectedApplication(value);\n                break;\n            case 'selectedKeyManager':\n                setSelectedKeyManager(value, true, selectedApplication);\n                break;\n            case 'selectedKeyType':\n                if (!productionAccessToken || !sandboxAccessToken) {\n                    setSelectedKeyType(value, true, selectedApplication);\n                } else {\n                    setSelectedKeyType(value, false, selectedApplication);\n                }\n                break;\n            case 'securityScheme':\n                setSecurityScheme(value);\n                break;\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'accessToken':\n                if (securitySchemeType === 'API-KEY' && selectedKeyType === 'PRODUCTION') {\n                    setProductionApiKey(value);\n                } else if (securitySchemeType === 'API-KEY' && selectedKeyType === 'SANDBOX') {\n                    setSandboxApiKey(value);\n                } else if (selectedKeyType === 'PRODUCTION') {\n                    setProductionAccessToken(value);\n                } else {\n                    setSandboxAccessToken(value);\n                }\n                break;\n            case 'advAuthHeader':\n                setAdvAuthHeader(value);\n                break;\n            case 'advAuthHeaderValue':\n                setAdvAuthHeaderValue(value);\n                break;\n            case 'selectedEndpoint':\n                setSelectedEndpoint(value);\n                break;\n            default:\n        }\n    }\n\n    const user = AuthManager.getUser();\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let isTestKeyEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        isTestKeyEnabled = api.securityScheme.includes('test_auth');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n            prefix = '';\n        }\n        if (isTestKeyEnabled && securitySchemeType === 'TEST') {\n            authorizationHeader = 'testKey';\n            prefix = '';\n        }\n    }\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    const isPublished = api.lifeCycleStatus.toLowerCase() === 'published';\n    const showSecurityType = isPublished || isPrototypedAPI;\n\n    let tokenValue = '';\n    if (securitySchemeType === 'API-KEY') {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionApiKey : sandboxApiKey;\n    } else {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionAccessToken : sandboxAccessToken;\n    }\n\n    const authHeader = `${authorizationHeader}: ${prefix}`;\n\n    return (\n        <>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Box>\n                    {securitySchemeType !== 'TEST' && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <>\n                            <Box mb={1}>\n                                <Typography variant='body1'>\n                                    <Box display='flex' alignItems='center'>\n                                        {(keyManagers.length > 1 && selectedKMObject && selectedKMObject.enabled) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.one'\n                                                defaultMessage='The Resident Key Manager is selected for try out console.'\n                                            />\n                                        )}\n                                        {(selectedKMObject && !selectedKMObject.enabled) && (\n                                            <>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.TryOutController.default.km.msg.two'\n                                                        defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'But the default key manager is disabled at the moment.'}\n                                                    />\n                                                </div>\n                                            </>\n                                        )}\n                                        {(selectedKMObject && selectedKMObject.length === 0) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.three'\n                                                defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'Something went wrong while selecting the default Key manager.'}\n                                            />\n                                        )}\n                                    </Box>\n                                </Typography>\n                            </Box>\n                        </>\n                    )}\n                    {((isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && showSecurityType)\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <>\n                            <Typography variant='h5' component='h2' color='textPrimary' className={classes.categoryHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.heading'\n                                    defaultMessage='Security'\n                                />\n                            </Typography>\n                            <Typography\n                                variant='h6'\n                                component='label'\n                                id='security-type'\n                                color='textSecondary'\n                                className={classes.tryoutHeading}\n                            >\n                                <FormattedMessage\n                                    id='api.console.security.type.heading'\n                                    defaultMessage='Security Type'\n                                />\n                            </Typography>\n                            <FormControl component='fieldset'>\n                                <RadioGroup\n                                    name='securityScheme'\n                                    value={securitySchemeType}\n                                    onChange={handleChanges}\n                                    aria-labelledby='security-type'\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value='OAUTH'\n                                        disabled={!isOAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.oauth'\n                                                defaultMessage='OAuth'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='API-KEY'\n                                        disabled={!isApiKeyEnabled}\n                                        control={<Radio />}\n                                        id='api-key-select-radio-button'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.apikey'\n                                                defaultMessage='API Key'\n                                            />\n                                        )}\n                                    />\n                                    <FormControlLabel\n                                        value='BASIC'\n                                        disabled={!isBasicAuthEnabled}\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.security.scheme.basic'\n                                                defaultMessage='Basic'\n                                            />\n                                        )}\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                        </>\n                    )}\n                </Box>\n            </Grid>\n\n            <Grid xs={12} md={12} item>\n                <Box display='block'>\n                    {user && subscriptions\n                        && subscriptions.length > 0 && securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised)\n                        && (\n                            <SelectAppPanel\n                                subscriptions={subscriptions}\n                                handleChanges={handleChanges}\n                                selectedApplication={selectedApplication}\n                                selectedKeyManager={selectedKeyManager}\n                                selectedKeyType={selectedKeyType}\n                                keyManagers={keyManagers}\n                            />\n                        )}\n                    {subscriptions && subscriptions.length === 0 && securitySchemeType !== 'TEST'\n                        && (!api.advertiseInfo || !api.advertiseInfo.advertised) ? (\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                <Box mb={1} alignItems='center'>\n                                    <Typography variant='body1'>\n                                        <Box display='flex'>\n                                            <WarningIcon className={classes.warningIcon} />\n                                            <div>\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </div>\n                                        </Box>\n                                    </Typography>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            (!ksGenerated && securitySchemeType === 'OAUTH') && (!api.advertiseInfo\n                                || !api.advertiseInfo.advertised) && (\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    <Box mb={1} alignItems='center'>\n                                        <Typography variant='body1'>\n                                            <Box display='flex'>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.ApiConsole.keys.not.generated'\n                                                        defaultMessage={'Consumer key and secret not generated for the selected'\n                                                                + ' application on the {what} environment. '}\n                                                        values={{ what: selectedKeyType }}\n                                                    />\n                                                </div>\n                                            </Box>\n                                        </Typography>\n                                    </Box>\n                                </Grid>\n                            )\n                        )}\n                    {(!api.advertiseInfo || !api.advertiseInfo.advertised) ? (\n                        <Box display='block' justifyContent='center'>\n                            <Grid x={8} md={6} className={classes.tokenType} item>\n                                {securitySchemeType === 'BASIC' && (\n                                    <>\n                                        <Grid x={12} md={12} item>\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='username'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='username'\n                                                        defaultMessage='Username'\n                                                    />\n                                                )}\n                                                name='username'\n                                                onChange={handleChanges}\n                                                value={username || ''}\n                                                fullWidth\n                                            />\n                                            <TextField\n                                                margin='normal'\n                                                variant='outlined'\n                                                id='input-password'\n                                                label={(\n                                                    <FormattedMessage\n                                                        id='password'\n                                                        defaultMessage='Password'\n                                                    />\n                                                )}\n                                                name='password'\n                                                onChange={handleChanges}\n                                                type={showPassword ? 'text' : 'password'}\n                                                value={password || ''}\n                                                fullWidth\n                                                InputProps={{\n                                                    autoComplete: 'new-password',\n                                                    endAdornment: (\n                                                        <InputAdornment position='end'>\n                                                            <IconButton\n                                                                edge='end'\n                                                                aria-label='toggle password visibility'\n                                                                onClick={() => setShowPassword(!showPassword)}\n                                                            >\n                                                                {showPassword ? <Visibility /> : <VisibilityOff />}\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    ),\n                                                }}\n                                            />\n                                        </Grid>\n                                    </>\n                                )}\n\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                    <TextField\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        label={(\n                                            <FormattedMessage\n                                                id='access.token'\n                                                defaultMessage='Access Token'\n                                            />\n                                        )}\n                                        name='accessToken'\n                                        onChange={handleChanges}\n                                        type={showToken ? 'text' : 'password'}\n                                        value={tokenValue || ''}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='enter.access.token'\n                                                defaultMessage='Enter access Token'\n                                            />\n                                        )}\n                                        id='accessTokenInput'\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <IconButton\n                                                        edge='end'\n                                                        aria-label='Toggle token visibility'\n                                                        onClick={handleClickShowToken}\n                                                    >\n                                                        {showToken ? <Icon>visibility_off</Icon>\n                                                            : <Icon>visibility</Icon>}\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ),\n                                            startAdornment: (\n                                                <InputAdornment\n                                                    style={{\n                                                        minWidth: (authHeader.length * 7),\n                                                    }}\n                                                    position='start'\n                                                >\n                                                    {`${authorizationHeader}: ${prefix}`}\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                )}\n                                {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                    <>\n                                        <Button\n                                            onClick={securitySchemeType === 'API-KEY' ? generateApiKey\n                                                : generateAccessToken}\n                                            variant='contained'\n                                            className={classes.genKeyButton}\n                                            disabled={!user || (subscriptions && subscriptions.length === 0)\n                                                        || (!ksGenerated && securitySchemeType === 'OAUTH')}\n                                            id='gen-test-key'\n                                        >\n                                            {isUpdating && (\n                                                <CircularProgress size={15} />\n                                            )}\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiCOnsole.generate.test.key'\n                                                defaultMessage='GET TEST KEY '\n                                            />\n                                        </Button>\n                                        <Tooltip\n                                            placement='right'\n                                            interactive\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.TryOutConsole.access.token.tooltip'\n                                                    defaultMessage={\n                                                        'You can use your existing Access Token or '\n                                                                + 'you can generate a new Test Key.'\n                                                    }\n                                                />\n                                            )}\n                                        >\n                                            <Box m={1} mt={2}>\n                                                <IconButton\n                                                    aria-label='Use existing Access Token or generate a new Test Key'\n                                                >\n                                                    <HelpOutline />\n                                                </IconButton>\n                                            </Box>\n                                        </Tooltip>\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    ) : (\n                        <AdvertiseDetailsPanel\n                            classes={classes}\n                            advAuthHeader={advAuthHeader}\n                            advAuthHeaderValue={advAuthHeaderValue}\n                            handleChanges={handleChanges}\n                            selectedEndpoint={selectedEndpoint}\n                            api={api}\n                        />\n                    )}\n                    {(!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                            <Grid xs={12} md={6} item>\n                                {(environments && environments.length > 0) && (\n                                    <>\n                                        <Typography\n                                            variant='h5'\n                                            component='h3'\n                                            color='textPrimary'\n                                            className={classes.categoryHeading}\n                                        >\n                                            <FormattedMessage\n                                                id='api.console.gateway.heading'\n                                                defaultMessage='Gateway'\n                                            />\n                                        </Typography>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            id='environment'\n                                            label={(\n                                                <FormattedMessage\n                                                    defaultMessage='Environment'\n                                                    id='Apis.Details.ApiConsole.environment'\n                                                />\n                                            )}\n                                            value={selectedEnvironment || (environments && environments[0].name)}\n                                            name='selectedEnvironment'\n                                            onChange={handleChanges}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    defaultMessage='Please select an environment'\n                                                    id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                />\n                                            )}\n                                            margin='normal'\n                                            variant='outlined'\n                                        >\n                                            {environments && environments.length > 0 && (\n                                                <MenuItem value='' disabled className={classes.menuItem}>\n                                                    <em>\n                                                        <FormattedMessage\n                                                            id='api.gateways'\n                                                            defaultMessage='API Gateways'\n                                                        />\n                                                    </em>\n                                                </MenuItem>\n                                            )}\n                                            {environments && (\n                                                environments.map((env) => (\n                                                    <MenuItem\n                                                        value={env.name}\n                                                        key={env.name}\n                                                        className={classes.menuItem}\n                                                    >\n                                                        {env.displayName}\n                                                    </MenuItem>\n                                                )))}\n                                        </TextField>\n                                        {api && api.type === 'GRAPHQL' && (\n                                            <>\n                                                <Typography className={classes.verticalSpace} variant='body1'>\n                                                    <a\n                                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                                        onClick={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                        onKeyDown={() => setShowMoreGWUrls(!showMoreGWUrls)}\n                                                    >\n                                                        {!showMoreGWUrls ? (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more'}\n                                                                    defaultMessage='Show More'\n                                                                />\n                                                                <ExpandMoreIcon />\n\n                                                            </>\n                                                        ) : (\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.less'}\n                                                                    defaultMessage='Show Less'\n                                                                />\n                                                                <ExpandLessIcon />\n                                                            </>\n                                                        )}\n                                                    </a>\n                                                </Typography>\n                                                {showMoreGWUrls && (\n                                                    <>\n                                                        <TextField\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    defaultMessage='Gateway URLs'\n                                                                    id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                    + '.environment.show.more.http.URLs'}\n                                                                />\n                                                            )}\n                                                            value={URLs && URLs.https}\n                                                            name='selectedHTTPURL'\n                                                            fullWidth\n                                                            margin='normal'\n                                                            variant='outlined'\n                                                            InputProps={URLs && URLs.https}\n                                                        />\n                                                        {URLs && URLs.wss\n                                                        && (\n                                                            <TextField\n                                                                label={(\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Subscription Gateway URLs'\n                                                                        id={'Apis.Details.ApiConsole.SelectAppPanel'\n                                                                        + '.environment.show.more.subscription.URLs'}\n                                                                    />\n                                                                )}\n                                                                value={URLs && URLs.wss}\n                                                                name='selectedWSURL'\n                                                                fullWidth\n                                                                margin='normal'\n                                                                variant='outlined'\n                                                                InputProps={URLs && URLs.wss}\n                                                            />\n                                                        )}\n                                                    </>\n                                                )}\n                                            </>\n                                        )}\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    )}\n                </Box>\n            </Grid>\n        </>\n    );\n}\n\nTryOutController.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(makeStyles)(TryOutController);\n"],"sourceRoot":""}