{"version":3,"sources":["webpack:///./node_modules/markdown-it/lib/common/utils.js","webpack:///./node_modules/mdurl/encode.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/uc.micro/categories/P/regex.js","webpack:///./node_modules/markdown-it/lib/ruler.js","webpack:///./node_modules/markdown-it/lib/token.js","webpack:///./node_modules/markdown-it/index.js","webpack:///./node_modules/markdown-it/lib/common/entities.js","webpack:///./node_modules/mdurl/index.js","webpack:///./node_modules/uc.micro/properties/Any/regex.js","webpack:///./node_modules/uc.micro/categories/Cc/regex.js","webpack:///./node_modules/uc.micro/categories/Z/regex.js","webpack:///./node_modules/markdown-it/lib/common/html_re.js","webpack:///./node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///./node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///./node_modules/markdown-it/lib/index.js","webpack:///./node_modules/mdurl/decode.js","webpack:///./node_modules/mdurl/format.js","webpack:///./node_modules/mdurl/parse.js","webpack:///./node_modules/uc.micro/index.js","webpack:///./node_modules/uc.micro/categories/Cf/regex.js","webpack:///./node_modules/markdown-it/lib/helpers/index.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///./node_modules/markdown-it/lib/renderer.js","webpack:///./node_modules/markdown-it/lib/parser_core.js","webpack:///./node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///./node_modules/markdown-it/lib/rules_core/block.js","webpack:///./node_modules/markdown-it/lib/rules_core/inline.js","webpack:///./node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///./node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///./node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///./node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///./node_modules/markdown-it/lib/parser_block.js","webpack:///./node_modules/markdown-it/lib/rules_block/table.js","webpack:///./node_modules/markdown-it/lib/rules_block/code.js","webpack:///./node_modules/markdown-it/lib/rules_block/fence.js","webpack:///./node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///./node_modules/markdown-it/lib/rules_block/hr.js","webpack:///./node_modules/markdown-it/lib/rules_block/list.js","webpack:///./node_modules/markdown-it/lib/rules_block/reference.js","webpack:///./node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///./node_modules/markdown-it/lib/common/html_blocks.js","webpack:///./node_modules/markdown-it/lib/rules_block/heading.js","webpack:///./node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///./node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///./node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///./node_modules/markdown-it/lib/parser_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text.js","webpack:///./node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///./node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///./node_modules/markdown-it/lib/rules_inline/link.js","webpack:///./node_modules/markdown-it/lib/rules_inline/image.js","webpack:///./node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///./node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///./node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///./node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///./node_modules/linkify-it/index.js","webpack:///./node_modules/linkify-it/lib/re.js","webpack:///./node_modules/markdown-it/lib/presets/default.js","webpack:///./node_modules/markdown-it/lib/presets/zero.js","webpack:///./node_modules/markdown-it/lib/presets/commonmark.js"],"names":["_hasOwnProperty","Object","prototype","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","mdurl","ucmicro","assign","obj","sources","Array","slice","arguments","forEach","TypeError","keys","isString","toString","_class","unescapeMd","str","indexOf","replace","unescapeAll","match","escaped","entity","name","code","charCodeAt","test","toLowerCase","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","concat","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","trim","toUpperCase","encodeCache","encode","string","exclude","keepEscaped","i","l","nextCode","cache","result","defaultChars","push","length","getEncodeCache","encodeURIComponent","componentChars","module","target","Ruler","this","__rules__","__cache__","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","options","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","idx","enableOnly","disable","getRules","chainName","Token","type","tag","nesting","attrs","map","level","children","content","markup","info","meta","block","hidden","attrIndex","len","attrPush","attrData","attrSet","value","attrGet","attrJoin","decode","format","parse","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","postProcess","state","delimiters","j","startDelim","endDelim","token","loneMarkers","max","marker","end","tokens","pop","tokenize","silent","scanned","start","scanDelims","open","can_open","close","can_close","curr","tokens_meta","isStrong","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","default","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","hostname","protocol","toASCII","er","normalizeLinkText","toUnicode","MarkdownIt","presetName","inline","core","renderer","linkify","configure","set","presets","components","rules","ruler","rules2","ruler2","missed","filter","use","plugin","args","apply","env","State","process","render","parseInline","inlineMode","renderInline","decodeCache","getDecodeCache","seq","b1","b2","b3","b4","chr","slashes","auth","port","pathname","search","hash","Url","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","slashedProtocol","slashesDenoteHost","lowerProto","hec","rest","split","simplePath","exec","proto","substr","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","k","validParts","notHost","bit","unshift","join","qm","u","Any","Cc","Cf","P","Z","parseLinkLabel","parseLinkDestination","parseLinkTitle","disableNested","found","prevPos","labelEnd","posMax","oldPos","md","skipToken","ok","lines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","arr","tmpAttrs","tmpToken","langName","langAttrs","highlight","langPrefix","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","_rules","Core","NEWLINES_RE","NULL_RE","tok","isLinkClose","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","pretest","schema","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","single","quotes","StateCore","startLine","endLine","line","hasEmptyLines","maxNesting","skipEmptyLines","sCount","blkIndent","tight","isEmpty","outTokens","lineMax","getLine","bMarks","tShift","eMarks","escapedSplit","isEscaped","current","substring","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","oldParentType","terminate","terminatorRules","firstCh","secondCh","shift","parentType","last","getLines","params","mem","haveEndMarker","skipChars","skipSpaces","adjustTab","initial","lastLineEmpty","offset","oldBMarks","oldBSCount","oldIndent","oldSCount","oldTShift","spaceAfterMarker","isOutdented","oldLineMax","bsCount","cnt","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldListIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","listIndent","Number","Math","min","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","block_names","HTML_SEQUENCES","html","tmp","skipSpacesBack","skipCharsBack","StateBlock","s","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","_rules2","pending","pushPending","isTerminatorChar","pmax","ws","ESCAPED","matchStart","matchEnd","openerLength","closerLength","backticksScanned","backticks","labelStart","ref","parseReference","EMAIL_RE","AUTOLINK_RE","lc","isLetter","DIGITAL_RE","NAMED_RE","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","headerIdx","lastTokenIdx","jumps","StateInline","pendingLevel","_prev_delimiters","token_meta","canSplitWord","count","left_flanking","right_flanking","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","http","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","src_xn","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","isRegExp","createValidator","normalize","alias","slist","schema_test","src_ZPCc","schema_search","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","m","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","el","reverse","opts","src_Any","src_Cc","src_Z","src_P","src_ZCc","src_pseudo_letter","src_ip4","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict"],"mappings":"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","file":"13.d3a89c1c715b4ee43337.bundle.js","sourcesContent":["// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + ').|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n"],"sourceRoot":""}